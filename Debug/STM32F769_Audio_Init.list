
STM32F769_Audio_Init.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000417c  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004374  08004374  00005374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800438c  0800438c  00006140  2**0
                  CONTENTS
  4 .ARM          00000008  0800438c  0800438c  0000538c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004394  08004394  00006140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004394  08004394  00005394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004398  08004398  00005398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000140  20000000  0800439c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000045b0  20000140  080044dc  00006140  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200046f0  080044dc  000066f0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00006140  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dda7  00000000  00000000  0000616e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d48  00000000  00000000  00023f15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00010063  00000000  00000000  00027c5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001060  00000000  00000000  00037cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001f3b  00000000  00000000  00038d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002fa23  00000000  00000000  0003ac5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002554a  00000000  00000000  0006a67e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011d2e3  00000000  00000000  0008fbc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001aceab  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003064  00000000  00000000  001acef0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  001aff54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000140 	.word	0x20000140
 8000214:	00000000 	.word	0x00000000
 8000218:	0800435c 	.word	0x0800435c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000144 	.word	0x20000144
 8000234:	0800435c 	.word	0x0800435c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <Codec>:

    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
}


void Codec(void){
 8000528:	b5f0      	push	{r4, r5, r6, r7, lr}
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 800052a:	2200      	movs	r2, #0
void Codec(void){
 800052c:	b085      	sub	sp, #20
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 800052e:	4db5      	ldr	r5, [pc, #724]	@ (8000804 <Codec+0x2dc>)
 8000530:	2464      	movs	r4, #100	@ 0x64
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000532:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000534:	2304      	movs	r3, #4
 8000536:	aa03      	add	r2, sp, #12
 8000538:	2134      	movs	r1, #52	@ 0x34
 800053a:	4628      	mov	r0, r5
 800053c:	9400      	str	r4, [sp, #0]
 800053e:	f002 f96f 	bl	8002820 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000542:	4ab1      	ldr	r2, [pc, #708]	@ (8000808 <Codec+0x2e0>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000544:	2304      	movs	r3, #4
 8000546:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000548:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 800054a:	4628      	mov	r0, r5
 800054c:	aa03      	add	r2, sp, #12
 800054e:	9400      	str	r4, [sp, #0]
 8000550:	f002 f966 	bl	8002820 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000554:	f241 7208 	movw	r2, #5896	@ 0x1708
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000558:	2304      	movs	r3, #4
 800055a:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 800055c:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 800055e:	4628      	mov	r0, r5
 8000560:	aa03      	add	r2, sp, #12
 8000562:	9400      	str	r4, [sp, #0]
 8000564:	f002 f95c 	bl	8002820 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000568:	f240 2201 	movw	r2, #513	@ 0x201
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 800056c:	2304      	movs	r3, #4
 800056e:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000570:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000572:	4628      	mov	r0, r5
 8000574:	aa03      	add	r2, sp, #12
 8000576:	9400      	str	r4, [sp, #0]
 8000578:	f002 f952 	bl	8002820 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 800057c:	4aa3      	ldr	r2, [pc, #652]	@ (800080c <Codec+0x2e4>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 800057e:	2304      	movs	r3, #4
 8000580:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000582:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000584:	4628      	mov	r0, r5
 8000586:	aa03      	add	r2, sp, #12
 8000588:	9400      	str	r4, [sp, #0]
 800058a:	f002 f949 	bl	8002820 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 800058e:	4aa0      	ldr	r2, [pc, #640]	@ (8000810 <Codec+0x2e8>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000590:	2304      	movs	r3, #4
 8000592:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000594:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000596:	4628      	mov	r0, r5
 8000598:	aa03      	add	r2, sp, #12
 800059a:	9400      	str	r4, [sp, #0]
 800059c:	f002 f940 	bl	8002820 <HAL_I2C_Master_Transmit>
	/* Enable bias generator, Enable VMID */
	write_register(0x01, 0x0013);


	/* Add Delay */
	HAL_Delay(50);
 80005a0:	2032      	movs	r0, #50	@ 0x32
 80005a2:	f001 fa41 	bl	8001a28 <HAL_Delay>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80005a6:	4a9b      	ldr	r2, [pc, #620]	@ (8000814 <Codec+0x2ec>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80005a8:	2304      	movs	r3, #4
 80005aa:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80005ac:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80005ae:	4628      	mov	r0, r5
 80005b0:	aa03      	add	r2, sp, #12
 80005b2:	9400      	str	r4, [sp, #0]
 80005b4:	f002 f934 	bl	8002820 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80005b8:	4a97      	ldr	r2, [pc, #604]	@ (8000818 <Codec+0x2f0>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80005ba:	2304      	movs	r3, #4
 80005bc:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80005be:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80005c0:	4628      	mov	r0, r5
 80005c2:	aa03      	add	r2, sp, #12
 80005c4:	9400      	str	r4, [sp, #0]
 80005c6:	f002 f92b 	bl	8002820 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80005ca:	4a94      	ldr	r2, [pc, #592]	@ (800081c <Codec+0x2f4>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80005cc:	2304      	movs	r3, #4
 80005ce:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80005d0:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80005d2:	4628      	mov	r0, r5
 80005d4:	aa03      	add	r2, sp, #12
 80005d6:	9400      	str	r4, [sp, #0]
 80005d8:	f002 f922 	bl	8002820 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80005dc:	f240 4206 	movw	r2, #1030	@ 0x406
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80005e0:	2304      	movs	r3, #4
 80005e2:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80005e4:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80005e6:	4628      	mov	r0, r5
 80005e8:	aa03      	add	r2, sp, #12
 80005ea:	9400      	str	r4, [sp, #0]
 80005ec:	f002 f918 	bl	8002820 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80005f0:	f240 5206 	movw	r2, #1286	@ 0x506
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80005f4:	2304      	movs	r3, #4
 80005f6:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80005f8:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80005fa:	4628      	mov	r0, r5
 80005fc:	aa03      	add	r2, sp, #12
 80005fe:	9400      	str	r4, [sp, #0]
 8000600:	f002 f90e 	bl	8002820 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000604:	4a86      	ldr	r2, [pc, #536]	@ (8000820 <Codec+0x2f8>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000606:	2304      	movs	r3, #4
 8000608:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 800060a:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 800060c:	4628      	mov	r0, r5
 800060e:	aa03      	add	r2, sp, #12
 8000610:	9400      	str	r4, [sp, #0]
 8000612:	f002 f905 	bl	8002820 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000616:	4a83      	ldr	r2, [pc, #524]	@ (8000824 <Codec+0x2fc>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000618:	2304      	movs	r3, #4
 800061a:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 800061c:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 800061e:	4628      	mov	r0, r5
 8000620:	aa03      	add	r2, sp, #12
 8000622:	9400      	str	r4, [sp, #0]
 8000624:	f002 f8fc 	bl	8002820 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000628:	4a7f      	ldr	r2, [pc, #508]	@ (8000828 <Codec+0x300>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 800062a:	2304      	movs	r3, #4
 800062c:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 800062e:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000630:	4628      	mov	r0, r5
 8000632:	aa03      	add	r2, sp, #12
 8000634:	9400      	str	r4, [sp, #0]
 8000636:	f002 f8f3 	bl	8002820 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 800063a:	4a7c      	ldr	r2, [pc, #496]	@ (800082c <Codec+0x304>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 800063c:	2304      	movs	r3, #4
 800063e:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000640:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000642:	4628      	mov	r0, r5
 8000644:	aa03      	add	r2, sp, #12
 8000646:	9400      	str	r4, [sp, #0]
 8000648:	f002 f8ea 	bl	8002820 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 800064c:	4a78      	ldr	r2, [pc, #480]	@ (8000830 <Codec+0x308>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 800064e:	2304      	movs	r3, #4
 8000650:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000652:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000654:	4628      	mov	r0, r5
 8000656:	aa03      	add	r2, sp, #12
 8000658:	9400      	str	r4, [sp, #0]
 800065a:	f002 f8e1 	bl	8002820 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 800065e:	4a75      	ldr	r2, [pc, #468]	@ (8000834 <Codec+0x30c>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000660:	2304      	movs	r3, #4
 8000662:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000664:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000666:	4628      	mov	r0, r5
 8000668:	aa03      	add	r2, sp, #12
 800066a:	9400      	str	r4, [sp, #0]
 800066c:	f002 f8d8 	bl	8002820 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000670:	4a71      	ldr	r2, [pc, #452]	@ (8000838 <Codec+0x310>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000672:	2304      	movs	r3, #4
 8000674:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000676:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000678:	4628      	mov	r0, r5
 800067a:	aa03      	add	r2, sp, #12
 800067c:	9400      	str	r4, [sp, #0]
 800067e:	f002 f8cf 	bl	8002820 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000682:	4a6e      	ldr	r2, [pc, #440]	@ (800083c <Codec+0x314>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000684:	2304      	movs	r3, #4
 8000686:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000688:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 800068a:	4628      	mov	r0, r5
 800068c:	aa03      	add	r2, sp, #12
 800068e:	9400      	str	r4, [sp, #0]
 8000690:	f002 f8c6 	bl	8002820 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000694:	4a6a      	ldr	r2, [pc, #424]	@ (8000840 <Codec+0x318>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000696:	2304      	movs	r3, #4
 8000698:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 800069a:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 800069c:	4628      	mov	r0, r5
 800069e:	aa03      	add	r2, sp, #12
 80006a0:	9400      	str	r4, [sp, #0]
 80006a2:	f002 f8bd 	bl	8002820 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80006a6:	4a67      	ldr	r2, [pc, #412]	@ (8000844 <Codec+0x31c>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80006a8:	2304      	movs	r3, #4
 80006aa:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80006ac:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80006ae:	4628      	mov	r0, r5
 80006b0:	aa03      	add	r2, sp, #12
 80006b2:	9400      	str	r4, [sp, #0]
 80006b4:	f002 f8b4 	bl	8002820 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80006b8:	4a63      	ldr	r2, [pc, #396]	@ (8000848 <Codec+0x320>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80006ba:	2304      	movs	r3, #4
 80006bc:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80006be:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80006c0:	4628      	mov	r0, r5
 80006c2:	aa03      	add	r2, sp, #12
 80006c4:	9400      	str	r4, [sp, #0]
 80006c6:	f002 f8ab 	bl	8002820 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80006ca:	f240 2203 	movw	r2, #515	@ 0x203
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80006ce:	2304      	movs	r3, #4
 80006d0:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80006d2:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80006d4:	4628      	mov	r0, r5
 80006d6:	aa03      	add	r2, sp, #12
 80006d8:	9400      	str	r4, [sp, #0]
 80006da:	f002 f8a1 	bl	8002820 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80006de:	4a5b      	ldr	r2, [pc, #364]	@ (800084c <Codec+0x324>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80006e0:	2304      	movs	r3, #4
 80006e2:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80006e4:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80006e6:	4628      	mov	r0, r5
 80006e8:	aa03      	add	r2, sp, #12
 80006ea:	9400      	str	r4, [sp, #0]
 80006ec:	f002 f898 	bl	8002820 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80006f0:	4a57      	ldr	r2, [pc, #348]	@ (8000850 <Codec+0x328>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80006f2:	2304      	movs	r3, #4
 80006f4:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80006f6:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80006f8:	4628      	mov	r0, r5
 80006fa:	aa03      	add	r2, sp, #12
 80006fc:	9400      	str	r4, [sp, #0]
 80006fe:	f002 f88f 	bl	8002820 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000702:	4a54      	ldr	r2, [pc, #336]	@ (8000854 <Codec+0x32c>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000704:	2304      	movs	r3, #4
 8000706:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000708:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 800070a:	4628      	mov	r0, r5
 800070c:	aa03      	add	r2, sp, #12
 800070e:	9400      	str	r4, [sp, #0]
 8000710:	f002 f886 	bl	8002820 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000714:	f44f 5208 	mov.w	r2, #8704	@ 0x2200
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000718:	2304      	movs	r3, #4
 800071a:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 800071c:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 800071e:	4628      	mov	r0, r5
 8000720:	aa03      	add	r2, sp, #12
 8000722:	9400      	str	r4, [sp, #0]
 8000724:	f002 f87c 	bl	8002820 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000728:	f44f 520c 	mov.w	r2, #8960	@ 0x2300
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 800072c:	2304      	movs	r3, #4
 800072e:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000730:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000732:	4628      	mov	r0, r5
 8000734:	aa03      	add	r2, sp, #12
 8000736:	9400      	str	r4, [sp, #0]
 8000738:	f002 f872 	bl	8002820 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 800073c:	4a46      	ldr	r2, [pc, #280]	@ (8000858 <Codec+0x330>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 800073e:	2304      	movs	r3, #4
 8000740:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000742:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000744:	4628      	mov	r0, r5
 8000746:	aa03      	add	r2, sp, #12
 8000748:	9400      	str	r4, [sp, #0]
 800074a:	f002 f869 	bl	8002820 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 800074e:	4a43      	ldr	r2, [pc, #268]	@ (800085c <Codec+0x334>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000750:	2304      	movs	r3, #4
 8000752:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000754:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000756:	4628      	mov	r0, r5
 8000758:	aa03      	add	r2, sp, #12
 800075a:	9400      	str	r4, [sp, #0]
 800075c:	f002 f860 	bl	8002820 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000760:	4a3f      	ldr	r2, [pc, #252]	@ (8000860 <Codec+0x338>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000762:	2304      	movs	r3, #4
 8000764:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000766:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000768:	4628      	mov	r0, r5
 800076a:	aa03      	add	r2, sp, #12
 800076c:	9400      	str	r4, [sp, #0]
 800076e:	f002 f857 	bl	8002820 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000772:	4a3c      	ldr	r2, [pc, #240]	@ (8000864 <Codec+0x33c>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000774:	2304      	movs	r3, #4
 8000776:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000778:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 800077a:	4628      	mov	r0, r5
 800077c:	aa03      	add	r2, sp, #12
 800077e:	9400      	str	r4, [sp, #0]
 8000780:	f002 f84e 	bl	8002820 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000784:	4a38      	ldr	r2, [pc, #224]	@ (8000868 <Codec+0x340>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000786:	2304      	movs	r3, #4
 8000788:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 800078a:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 800078c:	4628      	mov	r0, r5
 800078e:	aa03      	add	r2, sp, #12
 8000790:	9400      	str	r4, [sp, #0]
 8000792:	f002 f845 	bl	8002820 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000796:	4a35      	ldr	r2, [pc, #212]	@ (800086c <Codec+0x344>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000798:	2304      	movs	r3, #4
 800079a:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 800079c:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 800079e:	4628      	mov	r0, r5
 80007a0:	aa03      	add	r2, sp, #12
 80007a2:	9400      	str	r4, [sp, #0]
 80007a4:	f002 f83c 	bl	8002820 <HAL_I2C_Master_Transmit>

	/* Enable Charge Pump */
	write_register(0x4C, 0x9F25);

    /* Add Delay */
	HAL_Delay(15);
 80007a8:	200f      	movs	r0, #15
 80007aa:	f001 f93d 	bl	8001a28 <HAL_Delay>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80007ae:	4a30      	ldr	r2, [pc, #192]	@ (8000870 <Codec+0x348>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80007b0:	2304      	movs	r3, #4
 80007b2:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80007b4:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80007b6:	4628      	mov	r0, r5
 80007b8:	aa03      	add	r2, sp, #12
 80007ba:	9400      	str	r4, [sp, #0]
 80007bc:	f002 f830 	bl	8002820 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80007c0:	4a2c      	ldr	r2, [pc, #176]	@ (8000874 <Codec+0x34c>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80007c2:	2304      	movs	r3, #4
 80007c4:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80007c6:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80007c8:	4628      	mov	r0, r5
 80007ca:	aa03      	add	r2, sp, #12
 80007cc:	9400      	str	r4, [sp, #0]
 80007ce:	f002 f827 	bl	8002820 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80007d2:	4a29      	ldr	r2, [pc, #164]	@ (8000878 <Codec+0x350>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80007d4:	2304      	movs	r3, #4
 80007d6:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80007d8:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80007da:	4628      	mov	r0, r5
 80007dc:	aa03      	add	r2, sp, #12
 80007de:	9400      	str	r4, [sp, #0]
 80007e0:	f002 f81e 	bl	8002820 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80007e4:	4a25      	ldr	r2, [pc, #148]	@ (800087c <Codec+0x354>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80007e6:	2304      	movs	r3, #4
 80007e8:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80007ea:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80007ec:	4628      	mov	r0, r5
 80007ee:	aa03      	add	r2, sp, #12
 80007f0:	9400      	str	r4, [sp, #0]
 80007f2:	f002 f815 	bl	8002820 <HAL_I2C_Master_Transmit>

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    write_register(0x54, 0x0033);

    /* Add Delay */
    HAL_Delay(250);
 80007f6:	20fa      	movs	r0, #250	@ 0xfa
 80007f8:	f001 f916 	bl	8001a28 <HAL_Delay>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80007fc:	4a20      	ldr	r2, [pc, #128]	@ (8000880 <Codec+0x358>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80007fe:	2304      	movs	r3, #4
 8000800:	2134      	movs	r1, #52	@ 0x34
 8000802:	e03f      	b.n	8000884 <Codec+0x35c>
 8000804:	20000208 	.word	0x20000208
 8000808:	03000201 	.word	0x03000201
 800080c:	6c003900 	.word	0x6c003900
 8000810:	13000100 	.word	0x13000100
 8000814:	03030500 	.word	0x03030500
 8000818:	01000106 	.word	0x01000106
 800081c:	01000206 	.word	0x01000206
 8000820:	11002800 	.word	0x11002800
 8000824:	20002900 	.word	0x20002900
 8000828:	20002a00 	.word	0x20002a00
 800082c:	03030400 	.word	0x03030400
 8000830:	00024004 	.word	0x00024004
 8000834:	50630200 	.word	0x50630200
 8000838:	02000606 	.word	0x02000606
 800083c:	02000706 	.word	0x02000706
 8000840:	0d000007 	.word	0x0d000007
 8000844:	83001002 	.word	0x83001002
 8000848:	10400003 	.word	0x10400003
 800084c:	0a000802 	.word	0x0a000802
 8000850:	01000002 	.word	0x01000002
 8000854:	00030300 	.word	0x00030300
 8000858:	00033600 	.word	0x00033600
 800085c:	03300100 	.word	0x03300100
 8000860:	05005100 	.word	0x05005100
 8000864:	03330100 	.word	0x03330100
 8000868:	22006000 	.word	0x22006000
 800086c:	259f4c00 	.word	0x259f4c00
 8000870:	01002d00 	.word	0x01002d00
 8000874:	01002e00 	.word	0x01002e00
 8000878:	30030300 	.word	0x30030300
 800087c:	33005400 	.word	0x33005400
 8000880:	ee006000 	.word	0xee006000
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000884:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000886:	4628      	mov	r0, r5
 8000888:	aa03      	add	r2, sp, #12
 800088a:	9400      	str	r4, [sp, #0]
 800088c:	f001 ffc8 	bl	8002820 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000890:	4a56      	ldr	r2, [pc, #344]	@ (80009ec <Codec+0x4c4>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000892:	2304      	movs	r3, #4
 8000894:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000896:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000898:	4628      	mov	r0, r5
 800089a:	aa03      	add	r2, sp, #12
 800089c:	9400      	str	r4, [sp, #0]
 800089e:	f001 ffbf 	bl	8002820 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80008a2:	4a53      	ldr	r2, [pc, #332]	@ (80009f0 <Codec+0x4c8>)
 80008a4:	f242 0704 	movw	r7, #8196	@ 0x2004
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80008a8:	2304      	movs	r3, #4
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80008aa:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80008ac:	2134      	movs	r1, #52	@ 0x34
 80008ae:	aa03      	add	r2, sp, #12
 80008b0:	4628      	mov	r0, r5
 80008b2:	9400      	str	r4, [sp, #0]
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80008b4:	f242 2604 	movw	r6, #8708	@ 0x2204
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80008b8:	f001 ffb2 	bl	8002820 <HAL_I2C_Master_Transmit>
 80008bc:	aa03      	add	r2, sp, #12
 80008be:	2304      	movs	r3, #4
 80008c0:	2134      	movs	r1, #52	@ 0x34
 80008c2:	4628      	mov	r0, r5
 80008c4:	9400      	str	r4, [sp, #0]
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80008c6:	9703      	str	r7, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80008c8:	f001 ffaa 	bl	8002820 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80008cc:	4b49      	ldr	r3, [pc, #292]	@ (80009f4 <Codec+0x4cc>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80008ce:	aa03      	add	r2, sp, #12
 80008d0:	2134      	movs	r1, #52	@ 0x34
 80008d2:	4628      	mov	r0, r5
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80008d4:	9303      	str	r3, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80008d6:	2304      	movs	r3, #4
 80008d8:	9400      	str	r4, [sp, #0]
 80008da:	f001 ffa1 	bl	8002820 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80008de:	4b46      	ldr	r3, [pc, #280]	@ (80009f8 <Codec+0x4d0>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80008e0:	aa03      	add	r2, sp, #12
 80008e2:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80008e4:	9303      	str	r3, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80008e6:	4628      	mov	r0, r5
 80008e8:	2304      	movs	r3, #4
 80008ea:	9400      	str	r4, [sp, #0]
 80008ec:	f001 ff98 	bl	8002820 <HAL_I2C_Master_Transmit>
 80008f0:	aa03      	add	r2, sp, #12
 80008f2:	2304      	movs	r3, #4
 80008f4:	2134      	movs	r1, #52	@ 0x34
 80008f6:	4628      	mov	r0, r5
 80008f8:	9400      	str	r4, [sp, #0]
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80008fa:	9603      	str	r6, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80008fc:	f001 ff90 	bl	8002820 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000900:	4b3e      	ldr	r3, [pc, #248]	@ (80009fc <Codec+0x4d4>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000902:	aa03      	add	r2, sp, #12
 8000904:	2134      	movs	r1, #52	@ 0x34
 8000906:	4628      	mov	r0, r5
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000908:	9303      	str	r3, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 800090a:	2304      	movs	r3, #4
 800090c:	9400      	str	r4, [sp, #0]
 800090e:	f001 ff87 	bl	8002820 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000912:	4b3b      	ldr	r3, [pc, #236]	@ (8000a00 <Codec+0x4d8>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000914:	aa03      	add	r2, sp, #12
 8000916:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000918:	9303      	str	r3, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 800091a:	4628      	mov	r0, r5
 800091c:	2304      	movs	r3, #4
 800091e:	9400      	str	r4, [sp, #0]
 8000920:	f001 ff7e 	bl	8002820 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000924:	4b37      	ldr	r3, [pc, #220]	@ (8000a04 <Codec+0x4dc>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000926:	aa03      	add	r2, sp, #12
 8000928:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 800092a:	9303      	str	r3, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 800092c:	4628      	mov	r0, r5
 800092e:	2304      	movs	r3, #4
 8000930:	9400      	str	r4, [sp, #0]
 8000932:	f001 ff75 	bl	8002820 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000936:	4b34      	ldr	r3, [pc, #208]	@ (8000a08 <Codec+0x4e0>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000938:	aa03      	add	r2, sp, #12
 800093a:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 800093c:	9303      	str	r3, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 800093e:	4628      	mov	r0, r5
 8000940:	2304      	movs	r3, #4
 8000942:	9400      	str	r4, [sp, #0]
 8000944:	f001 ff6c 	bl	8002820 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000948:	4b30      	ldr	r3, [pc, #192]	@ (8000a0c <Codec+0x4e4>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 800094a:	aa03      	add	r2, sp, #12
 800094c:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 800094e:	9303      	str	r3, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000950:	4628      	mov	r0, r5
 8000952:	2304      	movs	r3, #4
 8000954:	9400      	str	r4, [sp, #0]
 8000956:	f001 ff63 	bl	8002820 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 800095a:	4b2d      	ldr	r3, [pc, #180]	@ (8000a10 <Codec+0x4e8>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 800095c:	aa03      	add	r2, sp, #12
 800095e:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000960:	9303      	str	r3, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000962:	4628      	mov	r0, r5
 8000964:	2304      	movs	r3, #4
 8000966:	9400      	str	r4, [sp, #0]
 8000968:	f001 ff5a 	bl	8002820 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 800096c:	4b29      	ldr	r3, [pc, #164]	@ (8000a14 <Codec+0x4ec>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 800096e:	aa03      	add	r2, sp, #12
 8000970:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000972:	9303      	str	r3, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000974:	4628      	mov	r0, r5
 8000976:	2304      	movs	r3, #4
 8000978:	9400      	str	r4, [sp, #0]
 800097a:	f001 ff51 	bl	8002820 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 800097e:	4b26      	ldr	r3, [pc, #152]	@ (8000a18 <Codec+0x4f0>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000980:	aa03      	add	r2, sp, #12
 8000982:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000984:	9303      	str	r3, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000986:	4628      	mov	r0, r5
 8000988:	2304      	movs	r3, #4
 800098a:	9400      	str	r4, [sp, #0]
 800098c:	f001 ff48 	bl	8002820 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000990:	4b22      	ldr	r3, [pc, #136]	@ (8000a1c <Codec+0x4f4>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000992:	aa03      	add	r2, sp, #12
 8000994:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000996:	9303      	str	r3, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000998:	4628      	mov	r0, r5
 800099a:	2304      	movs	r3, #4
 800099c:	9400      	str	r4, [sp, #0]
 800099e:	f001 ff3f 	bl	8002820 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80009a2:	4b1f      	ldr	r3, [pc, #124]	@ (8000a20 <Codec+0x4f8>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80009a4:	aa03      	add	r2, sp, #12
 80009a6:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80009a8:	9303      	str	r3, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80009aa:	4628      	mov	r0, r5
 80009ac:	2304      	movs	r3, #4
 80009ae:	9400      	str	r4, [sp, #0]
 80009b0:	f001 ff36 	bl	8002820 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80009b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a24 <Codec+0x4fc>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80009b6:	aa03      	add	r2, sp, #12
 80009b8:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80009ba:	9303      	str	r3, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80009bc:	4628      	mov	r0, r5
 80009be:	2304      	movs	r3, #4
 80009c0:	9400      	str	r4, [sp, #0]
 80009c2:	f001 ff2d 	bl	8002820 <HAL_I2C_Master_Transmit>
 80009c6:	aa03      	add	r2, sp, #12
 80009c8:	2304      	movs	r3, #4
 80009ca:	2134      	movs	r1, #52	@ 0x34
 80009cc:	4628      	mov	r0, r5
 80009ce:	9400      	str	r4, [sp, #0]
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80009d0:	9703      	str	r7, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80009d2:	f001 ff25 	bl	8002820 <HAL_I2C_Master_Transmit>
 80009d6:	2304      	movs	r3, #4
 80009d8:	aa03      	add	r2, sp, #12
 80009da:	2134      	movs	r1, #52	@ 0x34
 80009dc:	4628      	mov	r0, r5
 80009de:	9400      	str	r4, [sp, #0]
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80009e0:	9603      	str	r6, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80009e2:	f001 ff1d 	bl	8002820 <HAL_I2C_Master_Transmit>

    /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
    write_register(0x422, 0x0000);


}
 80009e6:	b005      	add	sp, #20
 80009e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009ea:	bf00      	nop
 80009ec:	c0001006 	.word	0xc0001006
 80009f0:	c0001106 	.word	0xc0001106
 80009f4:	c0001206 	.word	0xc0001206
 80009f8:	c0001306 	.word	0xc0001306
 80009fc:	0b001800 	.word	0x0b001800
 8000a00:	0b001a00 	.word	0x0b001a00
 8000a04:	00181004 	.word	0x00181004
 8000a08:	5b001c00 	.word	0x5b001c00
 8000a0c:	5b001d00 	.word	0x5b001d00
 8000a10:	5b002600 	.word	0x5b002600
 8000a14:	5b002700 	.word	0x5b002700
 8000a18:	99000004 	.word	0x99000004
 8000a1c:	99000104 	.word	0x99000104
 8000a20:	99000404 	.word	0x99000404
 8000a24:	99000504 	.word	0x99000504

08000a28 <MX_ADC1_Init>:
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a28:	4829      	ldr	r0, [pc, #164]	@ (8000ad0 <MX_ADC1_Init+0xa8>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a2a:	2300      	movs	r3, #0
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a2c:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a30:	2201      	movs	r2, #1
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T5_TRGO;
 8000a32:	ed9f 7b23 	vldr	d7, [pc, #140]	@ 8000ac0 <MX_ADC1_Init+0x98>
{
 8000a36:	b510      	push	{r4, lr}
  hadc1.Instance = ADC1;
 8000a38:	4c26      	ldr	r4, [pc, #152]	@ (8000ad4 <MX_ADC1_Init+0xac>)
{
 8000a3a:	b084      	sub	sp, #16
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a3c:	6102      	str	r2, [r0, #16]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a3e:	9300      	str	r3, [sp, #0]
  hadc1.Instance = ADC1;
 8000a40:	6004      	str	r4, [r0, #0]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a42:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a46:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 3;
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000a48:	f880 2030 	strb.w	r2, [r0, #48]	@ 0x30
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a4c:	9303      	str	r3, [sp, #12]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a4e:	e9c0 1301 	strd	r1, r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 3;
 8000a52:	2103      	movs	r1, #3
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T5_TRGO;
 8000a54:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
  hadc1.Init.NbrOfConversion = 3;
 8000a58:	61c1      	str	r1, [r0, #28]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000a5a:	e9c0 3305 	strd	r3, r3, [r0, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a5e:	e9cd 3301 	strd	r3, r3, [sp, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a62:	f000 fff3 	bl	8001a4c <HAL_ADC_Init>
 8000a66:	b9f0      	cbnz	r0, 8000aa6 <MX_ADC1_Init+0x7e>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000a68:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a6a:	4669      	mov	r1, sp
 8000a6c:	4818      	ldr	r0, [pc, #96]	@ (8000ad0 <MX_ADC1_Init+0xa8>)
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000a6e:	9302      	str	r3, [sp, #8]
  sConfig.Channel = ADC_CHANNEL_6;
 8000a70:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 8000ac8 <MX_ADC1_Init+0xa0>
 8000a74:	ed8d 7b00 	vstr	d7, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a78:	f001 f986 	bl	8001d88 <HAL_ADC_ConfigChannel>
 8000a7c:	b9e8      	cbnz	r0, 8000aba <MX_ADC1_Init+0x92>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000a7e:	2204      	movs	r2, #4
 8000a80:	2302      	movs	r3, #2
  sConfig.Rank = ADC_REGULAR_RANK_2;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a82:	4669      	mov	r1, sp
 8000a84:	4812      	ldr	r0, [pc, #72]	@ (8000ad0 <MX_ADC1_Init+0xa8>)
  sConfig.Channel = ADC_CHANNEL_4;
 8000a86:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a8a:	f001 f97d 	bl	8001d88 <HAL_ADC_ConfigChannel>
 8000a8e:	b988      	cbnz	r0, 8000ab4 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000a90:	220c      	movs	r2, #12
 8000a92:	2303      	movs	r3, #3
  sConfig.Rank = ADC_REGULAR_RANK_3;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a94:	4669      	mov	r1, sp
 8000a96:	480e      	ldr	r0, [pc, #56]	@ (8000ad0 <MX_ADC1_Init+0xa8>)
  sConfig.Channel = ADC_CHANNEL_12;
 8000a98:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a9c:	f001 f974 	bl	8001d88 <HAL_ADC_ConfigChannel>
 8000aa0:	b920      	cbnz	r0, 8000aac <MX_ADC1_Init+0x84>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000aa2:	b004      	add	sp, #16
 8000aa4:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000aa6:	f000 fd81 	bl	80015ac <Error_Handler>
 8000aaa:	e7dd      	b.n	8000a68 <MX_ADC1_Init+0x40>
    Error_Handler();
 8000aac:	f000 fd7e 	bl	80015ac <Error_Handler>
}
 8000ab0:	b004      	add	sp, #16
 8000ab2:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000ab4:	f000 fd7a 	bl	80015ac <Error_Handler>
 8000ab8:	e7ea      	b.n	8000a90 <MX_ADC1_Init+0x68>
    Error_Handler();
 8000aba:	f000 fd77 	bl	80015ac <Error_Handler>
 8000abe:	e7de      	b.n	8000a7e <MX_ADC1_Init+0x56>
 8000ac0:	04000000 	.word	0x04000000
 8000ac4:	10000000 	.word	0x10000000
 8000ac8:	00000006 	.word	0x00000006
 8000acc:	00000001 	.word	0x00000001
 8000ad0:	200001c0 	.word	0x200001c0
 8000ad4:	40012000 	.word	0x40012000

08000ad8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(adcHandle->Instance==ADC1)
 8000ad8:	4b2e      	ldr	r3, [pc, #184]	@ (8000b94 <HAL_ADC_MspInit+0xbc>)
 8000ada:	6802      	ldr	r2, [r0, #0]
{
 8000adc:	b570      	push	{r4, r5, r6, lr}
  if(adcHandle->Instance==ADC1)
 8000ade:	429a      	cmp	r2, r3
{
 8000ae0:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae2:	f04f 0400 	mov.w	r4, #0
 8000ae6:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8000aea:	9406      	str	r4, [sp, #24]
 8000aec:	e9cd 4407 	strd	r4, r4, [sp, #28]
  if(adcHandle->Instance==ADC1)
 8000af0:	d001      	beq.n	8000af6 <HAL_ADC_MspInit+0x1e>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000af2:	b00a      	add	sp, #40	@ 0x28
 8000af4:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000af6:	f503 338c 	add.w	r3, r3, #71680	@ 0x11800
 8000afa:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000afc:	4826      	ldr	r0, [pc, #152]	@ (8000b98 <HAL_ADC_MspInit+0xc0>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000afe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    hdma_adc1.Instance = DMA2_Stream0;
 8000b00:	4e26      	ldr	r6, [pc, #152]	@ (8000b9c <HAL_ADC_MspInit+0xc4>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b02:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000b06:	645a      	str	r2, [r3, #68]	@ 0x44
 8000b08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000b0a:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8000b0e:	9201      	str	r2, [sp, #4]
 8000b10:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b14:	f042 0204 	orr.w	r2, r2, #4
 8000b18:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b1c:	f002 0204 	and.w	r2, r2, #4
 8000b20:	9202      	str	r2, [sp, #8]
 8000b22:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b26:	f042 0201 	orr.w	r2, r2, #1
 8000b2a:	631a      	str	r2, [r3, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b2c:	2204      	movs	r2, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b30:	f003 0301 	and.w	r3, r3, #1
 8000b34:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b36:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b38:	9903      	ldr	r1, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b3a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b3c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b40:	f001 fc02 	bl	8002348 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000b44:	2250      	movs	r2, #80	@ 0x50
 8000b46:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b48:	4815      	ldr	r0, [pc, #84]	@ (8000ba0 <HAL_ADC_MspInit+0xc8>)
 8000b4a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000b4e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b52:	f001 fbf9 	bl	8002348 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8000b56:	4a13      	ldr	r2, [pc, #76]	@ (8000ba4 <HAL_ADC_MspInit+0xcc>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b5c:	4630      	mov	r0, r6
    hdma_adc1.Instance = DMA2_Stream0;
 8000b5e:	e9c6 2400 	strd	r2, r4, [r6]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b62:	6133      	str	r3, [r6, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b64:	f44f 6200 	mov.w	r2, #2048	@ 0x800
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b68:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b6c:	e9c6 2305 	strd	r2, r3, [r6, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b70:	f44f 7380 	mov.w	r3, #256	@ 0x100
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b74:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b78:	e9c6 4408 	strd	r4, r4, [r6, #32]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b7c:	61f3      	str	r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b7e:	f001 fa33 	bl	8001fe8 <HAL_DMA_Init>
 8000b82:	b918      	cbnz	r0, 8000b8c <HAL_ADC_MspInit+0xb4>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000b84:	63ae      	str	r6, [r5, #56]	@ 0x38
 8000b86:	63b5      	str	r5, [r6, #56]	@ 0x38
}
 8000b88:	b00a      	add	sp, #40	@ 0x28
 8000b8a:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8000b8c:	f000 fd0e 	bl	80015ac <Error_Handler>
 8000b90:	e7f8      	b.n	8000b84 <HAL_ADC_MspInit+0xac>
 8000b92:	bf00      	nop
 8000b94:	40012000 	.word	0x40012000
 8000b98:	40020800 	.word	0x40020800
 8000b9c:	2000015c 	.word	0x2000015c
 8000ba0:	40020000 	.word	0x40020000
 8000ba4:	40026410 	.word	0x40026410

08000ba8 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ba8:	4b13      	ldr	r3, [pc, #76]	@ (8000bf8 <MX_DMA_Init+0x50>)

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2038      	movs	r0, #56	@ 0x38
 8000bae:	4611      	mov	r1, r2
{
 8000bb0:	b510      	push	{r4, lr}
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000bb2:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
{
 8000bb4:	b082      	sub	sp, #8
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000bb6:	f444 0480 	orr.w	r4, r4, #4194304	@ 0x400000
 8000bba:	631c      	str	r4, [r3, #48]	@ 0x30
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000bc2:	9301      	str	r3, [sp, #4]
 8000bc4:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000bc6:	f001 f9af 	bl	8001f28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000bca:	2038      	movs	r0, #56	@ 0x38
 8000bcc:	f001 f9e8 	bl	8001fa0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2039      	movs	r0, #57	@ 0x39
 8000bd4:	4611      	mov	r1, r2
 8000bd6:	f001 f9a7 	bl	8001f28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000bda:	2039      	movs	r0, #57	@ 0x39
 8000bdc:	f001 f9e0 	bl	8001fa0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8000be0:	2200      	movs	r2, #0
 8000be2:	203c      	movs	r0, #60	@ 0x3c
 8000be4:	4611      	mov	r1, r2
 8000be6:	f001 f99f 	bl	8001f28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000bea:	203c      	movs	r0, #60	@ 0x3c

}
 8000bec:	b002      	add	sp, #8
 8000bee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000bf2:	f001 b9d5 	b.w	8001fa0 <HAL_NVIC_EnableIRQ>
 8000bf6:	bf00      	nop
 8000bf8:	40023800 	.word	0x40023800

08000bfc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bfc:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bfe:	4b3c      	ldr	r3, [pc, #240]	@ (8000cf0 <MX_GPIO_Init+0xf4>)
{
 8000c00:	b08e      	sub	sp, #56	@ 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c02:	2400      	movs	r4, #0
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_13|GPIO_PIN_5, GPIO_PIN_RESET);
 8000c04:	4d3b      	ldr	r5, [pc, #236]	@ (8000cf4 <MX_GPIO_Init+0xf8>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000c06:	4e3c      	ldr	r6, [pc, #240]	@ (8000cf8 <MX_GPIO_Init+0xfc>)
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_13|GPIO_PIN_5, GPIO_PIN_RESET);
 8000c08:	f242 0120 	movw	r1, #8224	@ 0x2020
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	940c      	str	r4, [sp, #48]	@ 0x30
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_13|GPIO_PIN_5, GPIO_PIN_RESET);
 8000c0e:	4628      	mov	r0, r5
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c10:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8000c14:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c1a:	f042 0210 	orr.w	r2, r2, #16
 8000c1e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000c20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c22:	f002 0210 	and.w	r2, r2, #16
 8000c26:	9200      	str	r2, [sp, #0]
 8000c28:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c2c:	f042 0202 	orr.w	r2, r2, #2
 8000c30:	631a      	str	r2, [r3, #48]	@ 0x30
 8000c32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c34:	f002 0202 	and.w	r2, r2, #2
 8000c38:	9201      	str	r2, [sp, #4]
 8000c3a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000c3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000c42:	631a      	str	r2, [r3, #48]	@ 0x30
 8000c44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c46:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8000c4a:	9202      	str	r2, [sp, #8]
 8000c4c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c50:	f042 0201 	orr.w	r2, r2, #1
 8000c54:	631a      	str	r2, [r3, #48]	@ 0x30
 8000c56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c58:	f002 0201 	and.w	r2, r2, #1
 8000c5c:	9203      	str	r2, [sp, #12]
 8000c5e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c62:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000c66:	631a      	str	r2, [r3, #48]	@ 0x30
 8000c68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c6a:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000c6e:	9204      	str	r2, [sp, #16]
 8000c70:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000c78:	631a      	str	r2, [r3, #48]	@ 0x30
 8000c7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c7c:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8000c80:	9205      	str	r2, [sp, #20]
 8000c82:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c86:	f042 0204 	orr.w	r2, r2, #4
 8000c8a:	631a      	str	r2, [r3, #48]	@ 0x30
 8000c8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c8e:	f002 0204 	and.w	r2, r2, #4
 8000c92:	9206      	str	r2, [sp, #24]
 8000c94:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c98:	f042 0208 	orr.w	r2, r2, #8
 8000c9c:	631a      	str	r2, [r3, #48]	@ 0x30
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_13|GPIO_PIN_5, GPIO_PIN_RESET);
 8000c9e:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca2:	f003 0308 	and.w	r3, r3, #8
 8000ca6:	9307      	str	r3, [sp, #28]
 8000ca8:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_13|GPIO_PIN_5, GPIO_PIN_RESET);
 8000caa:	f001 fc87 	bl	80025bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000cae:	4622      	mov	r2, r4
 8000cb0:	4630      	mov	r0, r6
 8000cb2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000

  /*Configure GPIO pins : PJ13 PJ5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 8000cb6:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000cb8:	f001 fc80 	bl	80025bc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 8000cbc:	f242 0220 	movw	r2, #8224	@ 0x2020
 8000cc0:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000cc2:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 8000cc4:	2500      	movs	r5, #0
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000cc6:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 8000cc8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8000ccc:	e9cd 450a 	strd	r4, r5, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000cd0:	f001 fb3a 	bl	8002348 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000cd4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000cd8:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cda:	a908      	add	r1, sp, #32
 8000cdc:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000cde:	e9cd 450a 	strd	r4, r5, [sp, #40]	@ 0x28
 8000ce2:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce6:	f001 fb2f 	bl	8002348 <HAL_GPIO_Init>

}
 8000cea:	b00e      	add	sp, #56	@ 0x38
 8000cec:	bd70      	pop	{r4, r5, r6, pc}
 8000cee:	bf00      	nop
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	40022400 	.word	0x40022400
 8000cf8:	40020000 	.word	0x40020000

08000cfc <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8000cfc:	b510      	push	{r4, lr}
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000cfe:	4817      	ldr	r0, [pc, #92]	@ (8000d5c <MX_I2C4_Init+0x60>)
  hi2c4.Init.Timing = 0x20404768;
 8000d00:	2300      	movs	r3, #0
 8000d02:	4917      	ldr	r1, [pc, #92]	@ (8000d60 <MX_I2C4_Init+0x64>)
 8000d04:	2401      	movs	r4, #1
 8000d06:	4a17      	ldr	r2, [pc, #92]	@ (8000d64 <MX_I2C4_Init+0x68>)
 8000d08:	6203      	str	r3, [r0, #32]
 8000d0a:	e880 001e 	stmia.w	r0, {r1, r2, r3, r4}
 8000d0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000d12:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c4.Init.OwnAddress2 = 0;
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000d16:	f001 fd2d 	bl	8002774 <HAL_I2C_Init>
 8000d1a:	b950      	cbnz	r0, 8000d32 <MX_I2C4_Init+0x36>
  {
    Error_Handler();
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	480f      	ldr	r0, [pc, #60]	@ (8000d5c <MX_I2C4_Init+0x60>)
 8000d20:	f001 ff28 	bl	8002b74 <HAL_I2CEx_ConfigAnalogFilter>
 8000d24:	b968      	cbnz	r0, 8000d42 <MX_I2C4_Init+0x46>
  {
    Error_Handler();
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000d26:	2100      	movs	r1, #0
 8000d28:	480c      	ldr	r0, [pc, #48]	@ (8000d5c <MX_I2C4_Init+0x60>)
 8000d2a:	f001 ff4d 	bl	8002bc8 <HAL_I2CEx_ConfigDigitalFilter>
 8000d2e:	b980      	cbnz	r0, 8000d52 <MX_I2C4_Init+0x56>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000d30:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000d32:	f000 fc3b 	bl	80015ac <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d36:	2100      	movs	r1, #0
 8000d38:	4808      	ldr	r0, [pc, #32]	@ (8000d5c <MX_I2C4_Init+0x60>)
 8000d3a:	f001 ff1b 	bl	8002b74 <HAL_I2CEx_ConfigAnalogFilter>
 8000d3e:	2800      	cmp	r0, #0
 8000d40:	d0f1      	beq.n	8000d26 <MX_I2C4_Init+0x2a>
    Error_Handler();
 8000d42:	f000 fc33 	bl	80015ac <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000d46:	2100      	movs	r1, #0
 8000d48:	4804      	ldr	r0, [pc, #16]	@ (8000d5c <MX_I2C4_Init+0x60>)
 8000d4a:	f001 ff3d 	bl	8002bc8 <HAL_I2CEx_ConfigDigitalFilter>
 8000d4e:	2800      	cmp	r0, #0
 8000d50:	d0ee      	beq.n	8000d30 <MX_I2C4_Init+0x34>
}
 8000d52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8000d56:	f000 bc29 	b.w	80015ac <Error_Handler>
 8000d5a:	bf00      	nop
 8000d5c:	20000208 	.word	0x20000208
 8000d60:	40006000 	.word	0x40006000
 8000d64:	20404768 	.word	0x20404768

08000d68 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d68:	b5d0      	push	{r4, r6, r7, lr}
 8000d6a:	b0ae      	sub	sp, #184	@ 0xb8

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	2100      	movs	r1, #0
{
 8000d6e:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d70:	2290      	movs	r2, #144	@ 0x90
 8000d72:	a80a      	add	r0, sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d74:	9108      	str	r1, [sp, #32]
 8000d76:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8000d7a:	e9cd 1106 	strd	r1, r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d7e:	f003 fac1 	bl	8004304 <memset>
  if(i2cHandle->Instance==I2C4)
 8000d82:	4b25      	ldr	r3, [pc, #148]	@ (8000e18 <HAL_I2C_MspInit+0xb0>)
 8000d84:	6822      	ldr	r2, [r4, #0]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d001      	beq.n	8000d8e <HAL_I2C_MspInit+0x26>
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8000d8a:	b02e      	add	sp, #184	@ 0xb8
 8000d8c:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000d8e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d92:	a80a      	add	r0, sp, #40	@ 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000d94:	930a      	str	r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d96:	f002 fa47 	bl	8003228 <HAL_RCCEx_PeriphCLKConfig>
 8000d9a:	2800      	cmp	r0, #0
 8000d9c:	d138      	bne.n	8000e10 <HAL_I2C_MspInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9e:	4c1f      	ldr	r4, [pc, #124]	@ (8000e1c <HAL_I2C_MspInit+0xb4>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000da0:	2080      	movs	r0, #128	@ 0x80
 8000da2:	2112      	movs	r1, #18
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 8000da4:	220b      	movs	r2, #11
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000da8:	2600      	movs	r6, #0
 8000daa:	2703      	movs	r7, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dac:	f043 0302 	orr.w	r3, r3, #2
 8000db0:	6323      	str	r3, [r4, #48]	@ 0x30
 8000db2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000db4:	f003 0302 	and.w	r3, r3, #2
 8000db8:	9301      	str	r3, [sp, #4]
 8000dba:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dbc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000dbe:	f043 0308 	orr.w	r3, r3, #8
 8000dc2:	6323      	str	r3, [r4, #48]	@ 0x30
 8000dc4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 8000dc6:	9208      	str	r2, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dc8:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000dcc:	e9cd 0104 	strd	r0, r1, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dd0:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd2:	a904      	add	r1, sp, #16
 8000dd4:	4812      	ldr	r0, [pc, #72]	@ (8000e20 <HAL_I2C_MspInit+0xb8>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dd6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000dd8:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ddc:	f001 fab4 	bl	8002348 <HAL_GPIO_Init>
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000de0:	2304      	movs	r3, #4
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000de2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000de6:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000de8:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000dea:	2312      	movs	r3, #18
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dec:	480d      	ldr	r0, [pc, #52]	@ (8000e24 <HAL_I2C_MspInit+0xbc>)
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000dee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000df2:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000df6:	f001 faa7 	bl	8002348 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000dfa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000dfc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000e00:	6423      	str	r3, [r4, #64]	@ 0x40
 8000e02:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000e04:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000e08:	9303      	str	r3, [sp, #12]
 8000e0a:	9b03      	ldr	r3, [sp, #12]
}
 8000e0c:	b02e      	add	sp, #184	@ 0xb8
 8000e0e:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 8000e10:	f000 fbcc 	bl	80015ac <Error_Handler>
 8000e14:	e7c3      	b.n	8000d9e <HAL_I2C_MspInit+0x36>
 8000e16:	bf00      	nop
 8000e18:	40006000 	.word	0x40006000
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40020400 	.word	0x40020400
 8000e24:	40020c00 	.word	0x40020c00

08000e28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e28:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e2a:	2300      	movs	r3, #0
{
 8000e2c:	b097      	sub	sp, #92	@ 0x5c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e2e:	4928      	ldr	r1, [pc, #160]	@ (8000ed0 <SystemClock_Config+0xa8>)
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e30:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e32:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 432;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e34:	a808      	add	r0, sp, #32
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e36:	9303      	str	r3, [sp, #12]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e38:	930d      	str	r3, [sp, #52]	@ 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e3a:	4a26      	ldr	r2, [pc, #152]	@ (8000ed4 <SystemClock_Config+0xac>)
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e3c:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e40:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8000e44:	e9cd 3306 	strd	r3, r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e48:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000e4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e4e:	640b      	str	r3, [r1, #64]	@ 0x40
 8000e50:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000e52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e56:	9301      	str	r3, [sp, #4]
 8000e58:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e5a:	6813      	ldr	r3, [r2, #0]
 8000e5c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e60:	6013      	str	r3, [r2, #0]
 8000e62:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e64:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e66:	940e      	str	r4, [sp, #56]	@ 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e68:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e6c:	9414      	str	r4, [sp, #80]	@ 0x50
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e6e:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e70:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e74:	9902      	ldr	r1, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e76:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000e7a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000e7e:	2319      	movs	r3, #25
 8000e80:	e9cd 230f 	strd	r2, r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000e84:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e88:	2202      	movs	r2, #2
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000e8a:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e8c:	2304      	movs	r3, #4
 8000e8e:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e92:	f001 feff 	bl	8002c94 <HAL_RCC_OscConfig>
 8000e96:	b108      	cbz	r0, 8000e9c <SystemClock_Config+0x74>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e98:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e9a:	e7fe      	b.n	8000e9a <SystemClock_Config+0x72>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e9c:	f001 fec0 	bl	8002c20 <HAL_PWREx_EnableOverDrive>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	b108      	cbz	r0, 8000ea8 <SystemClock_Config+0x80>
 8000ea4:	b672      	cpsid	i
  while (1)
 8000ea6:	e7fe      	b.n	8000ea6 <SystemClock_Config+0x7e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ea8:	220f      	movs	r2, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000eaa:	f44f 55a0 	mov.w	r5, #5120	@ 0x1400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000eae:	a803      	add	r0, sp, #12
 8000eb0:	2107      	movs	r1, #7
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eb2:	e9cd 2403 	strd	r2, r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000eb6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000eba:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ebe:	9207      	str	r2, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000ec0:	f002 f8de 	bl	8003080 <HAL_RCC_ClockConfig>
 8000ec4:	b108      	cbz	r0, 8000eca <SystemClock_Config+0xa2>
 8000ec6:	b672      	cpsid	i
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <SystemClock_Config+0xa0>
}
 8000eca:	b017      	add	sp, #92	@ 0x5c
 8000ecc:	bd30      	pop	{r4, r5, pc}
 8000ece:	bf00      	nop
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40007000 	.word	0x40007000

08000ed8 <PeriphCommonClock_Config>:
{
 8000ed8:	b500      	push	{lr}
 8000eda:	b0a5      	sub	sp, #148	@ 0x94
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000edc:	227c      	movs	r2, #124	@ 0x7c
 8000ede:	2100      	movs	r1, #0
 8000ee0:	a805      	add	r0, sp, #20
 8000ee2:	f003 fa0f 	bl	8004304 <memset>
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8000ee6:	2302      	movs	r3, #2
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8000ee8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8000eec:	f44f 71ac 	mov.w	r1, #344	@ 0x158
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000ef0:	2201      	movs	r2, #1
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8000ef2:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLI2S;
 8000ef4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000ef8:	9209      	str	r2, [sp, #36]	@ 0x24
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLI2S;
 8000efa:	930f      	str	r3, [sp, #60]	@ 0x3c
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8000efc:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8000f20 <PeriphCommonClock_Config+0x48>
 8000f00:	e9cd 0100 	strd	r0, r1, [sp]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f04:	4668      	mov	r0, sp
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8000f06:	ed8d 7b02 	vstr	d7, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f0a:	f002 f98d 	bl	8003228 <HAL_RCCEx_PeriphCLKConfig>
 8000f0e:	b108      	cbz	r0, 8000f14 <PeriphCommonClock_Config+0x3c>
 8000f10:	b672      	cpsid	i
  while (1)
 8000f12:	e7fe      	b.n	8000f12 <PeriphCommonClock_Config+0x3a>
}
 8000f14:	b025      	add	sp, #148	@ 0x94
 8000f16:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f1a:	bf00      	nop
 8000f1c:	f3af 8000 	nop.w
 8000f20:	00000002 	.word	0x00000002
 8000f24:	00000007 	.word	0x00000007

08000f28 <HAL_SAI_RxHalfCpltCallback>:
	PlaybackBufferPtr = &PlaybackBuffer[0];
 8000f28:	4a06      	ldr	r2, [pc, #24]	@ (8000f44 <HAL_SAI_RxHalfCpltCallback+0x1c>)
 8000f2a:	4907      	ldr	r1, [pc, #28]	@ (8000f48 <HAL_SAI_RxHalfCpltCallback+0x20>)
	dataReadyFlag = 1;
 8000f2c:	4b07      	ldr	r3, [pc, #28]	@ (8000f4c <HAL_SAI_RxHalfCpltCallback+0x24>)
	RecordBufferPtr = &RecordBuffer[0];
 8000f2e:	4808      	ldr	r0, [pc, #32]	@ (8000f50 <HAL_SAI_RxHalfCpltCallback+0x28>)
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai){
 8000f30:	b410      	push	{r4}
	PlaybackBufferPtr = &PlaybackBuffer[0];
 8000f32:	6011      	str	r1, [r2, #0]
	dataReadyFlag = 1;
 8000f34:	2201      	movs	r2, #1
	RecordBufferPtr = &RecordBuffer[0];
 8000f36:	4c07      	ldr	r4, [pc, #28]	@ (8000f54 <HAL_SAI_RxHalfCpltCallback+0x2c>)
	dataReadyFlag = 1;
 8000f38:	701a      	strb	r2, [r3, #0]
	RecordBufferPtr = &RecordBuffer[0];
 8000f3a:	6004      	str	r4, [r0, #0]
}
 8000f3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	20000000 	.word	0x20000000
 8000f48:	20000278 	.word	0x20000278
 8000f4c:	20000276 	.word	0x20000276
 8000f50:	20000004 	.word	0x20000004
 8000f54:	20002278 	.word	0x20002278

08000f58 <HAL_SAI_RxCpltCallback>:
	PlaybackBufferPtr = &PlaybackBuffer[RECORD_BUFFER_SIZE/2];
 8000f58:	4a06      	ldr	r2, [pc, #24]	@ (8000f74 <HAL_SAI_RxCpltCallback+0x1c>)
 8000f5a:	4907      	ldr	r1, [pc, #28]	@ (8000f78 <HAL_SAI_RxCpltCallback+0x20>)
	dataReadyFlag = 1;
 8000f5c:	4b07      	ldr	r3, [pc, #28]	@ (8000f7c <HAL_SAI_RxCpltCallback+0x24>)
	RecordBufferPtr = &RecordBuffer[RECORD_BUFFER_SIZE/2];
 8000f5e:	4808      	ldr	r0, [pc, #32]	@ (8000f80 <HAL_SAI_RxCpltCallback+0x28>)
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai){
 8000f60:	b410      	push	{r4}
	PlaybackBufferPtr = &PlaybackBuffer[RECORD_BUFFER_SIZE/2];
 8000f62:	6011      	str	r1, [r2, #0]
	dataReadyFlag = 1;
 8000f64:	2201      	movs	r2, #1
	RecordBufferPtr = &RecordBuffer[RECORD_BUFFER_SIZE/2];
 8000f66:	4c07      	ldr	r4, [pc, #28]	@ (8000f84 <HAL_SAI_RxCpltCallback+0x2c>)
	dataReadyFlag = 1;
 8000f68:	701a      	strb	r2, [r3, #0]
	RecordBufferPtr = &RecordBuffer[RECORD_BUFFER_SIZE/2];
 8000f6a:	6004      	str	r4, [r0, #0]
}
 8000f6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	20000000 	.word	0x20000000
 8000f78:	20001278 	.word	0x20001278
 8000f7c:	20000276 	.word	0x20000276
 8000f80:	20000004 	.word	0x20000004
 8000f84:	20003278 	.word	0x20003278

08000f88 <HAL_ADC_ConvCpltCallback>:
	AdcChannel1 = AdcValues[0];
 8000f88:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000f8a:	4807      	ldr	r0, [pc, #28]	@ (8000fa8 <HAL_ADC_ConvCpltCallback+0x20>)
 8000f8c:	f8b3 c000 	ldrh.w	ip, [r3]
	AdcChannel2 = AdcValues[1];
 8000f90:	4906      	ldr	r1, [pc, #24]	@ (8000fac <HAL_ADC_ConvCpltCallback+0x24>)
	AdcChannel3 = AdcValues[2];
 8000f92:	4a07      	ldr	r2, [pc, #28]	@ (8000fb0 <HAL_ADC_ConvCpltCallback+0x28>)
	AdcChannel1 = AdcValues[0];
 8000f94:	f8a0 c000 	strh.w	ip, [r0]
	AdcChannel2 = AdcValues[1];
 8000f98:	8858      	ldrh	r0, [r3, #2]
	AdcChannel3 = AdcValues[2];
 8000f9a:	889b      	ldrh	r3, [r3, #4]
	AdcChannel2 = AdcValues[1];
 8000f9c:	8008      	strh	r0, [r1, #0]
	AdcChannel3 = AdcValues[2];
 8000f9e:	8013      	strh	r3, [r2, #0]
}
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	20000270 	.word	0x20000270
 8000fa8:	2000026c 	.word	0x2000026c
 8000fac:	2000026a 	.word	0x2000026a
 8000fb0:	20000268 	.word	0x20000268
 8000fb4:	00000000 	.word	0x00000000

08000fb8 <ProcessData>:
void ProcessData(){
 8000fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_5, GPIO_PIN_SET);	//LD2
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	2120      	movs	r1, #32
 8000fc0:	48d1      	ldr	r0, [pc, #836]	@ (8001308 <ProcessData+0x350>)
	 kick_value = 0;
 8000fc2:	f8df a398 	ldr.w	sl, [pc, #920]	@ 800135c <ProcessData+0x3a4>
	 break_value = 0;
 8000fc6:	f8df 9398 	ldr.w	r9, [pc, #920]	@ 8001360 <ProcessData+0x3a8>
 8000fca:	4ed0      	ldr	r6, [pc, #832]	@ (800130c <ProcessData+0x354>)
 8000fcc:	f8df 8394 	ldr.w	r8, [pc, #916]	@ 8001364 <ProcessData+0x3ac>
 8000fd0:	f8df b394 	ldr.w	fp, [pc, #916]	@ 8001368 <ProcessData+0x3b0>
void ProcessData(){
 8000fd4:	ed2d 8b06 	vpush	{d8-d10}
 8000fd8:	b083      	sub	sp, #12
	 		if (leftIn > 1.0f){
 8000fda:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
	HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_5, GPIO_PIN_SET);	//LD2
 8000fde:	f001 faed 	bl	80025bc <HAL_GPIO_WritePin>
	 kick_value = 0;
 8000fe2:	2300      	movs	r3, #0
		 	leftIn = (1.0f/32768.0f)* RecordBufferPtr[i];
 8000fe4:	eddf 9aca 	vldr	s19, [pc, #808]	@ 8001310 <ProcessData+0x358>
	 break_value = 0;
 8000fe8:	461c      	mov	r4, r3
	 		PlaybackBufferPtr[i] 	= (int16_t) (1000.0f * leftIn);  //(1000.0f * leftIn)
 8000fea:	ed9f aaca 	vldr	s20, [pc, #808]	@ 8001314 <ProcessData+0x35c>
	 kick_value = 0;
 8000fee:	f8ca 3000 	str.w	r3, [sl]
	 break_value = 0;
 8000ff2:	f8c9 3000 	str.w	r3, [r9]
	 		kick_value 	+= ((32768.0f * fabs(kickOut)) 	* 2);
 8000ff6:	ed9f 8bc0 	vldr	d8, [pc, #768]	@ 80012f8 <ProcessData+0x340>
		 	leftIn = (1.0f/32768.0f)* RecordBufferPtr[i];
 8000ffa:	49c7      	ldr	r1, [pc, #796]	@ (8001318 <ProcessData+0x360>)
	 			leftIn -= 2.0f;
 8000ffc:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
	 		arm_biquad_cascade_df2T_f32(&IIR_kick, &monoIn, &kickOut, 1);			//#################################
 8001000:	2301      	movs	r3, #1
 8001002:	4ac6      	ldr	r2, [pc, #792]	@ (800131c <ProcessData+0x364>)
		 	leftIn = (1.0f/32768.0f)* RecordBufferPtr[i];
 8001004:	680f      	ldr	r7, [r1, #0]
	 		rightIn = (1.0f/32768.0f)* RecordBufferPtr[i+1];
 8001006:	1ca1      	adds	r1, r4, #2
	 			rightIn -= 2.0f;
 8001008:	eeb0 7a66 	vmov.f32	s14, s13
	 		arm_biquad_cascade_df2T_f32(&IIR_kick, &monoIn, &kickOut, 1);			//#################################
 800100c:	48c4      	ldr	r0, [pc, #784]	@ (8001320 <ProcessData+0x368>)
		 	leftIn = (1.0f/32768.0f)* RecordBufferPtr[i];
 800100e:	f837 c004 	ldrh.w	ip, [r7, r4]
 8001012:	eb07 0e04 	add.w	lr, r7, r4
	 		rightIn = (1.0f/32768.0f)* RecordBufferPtr[i+1];
 8001016:	9101      	str	r1, [sp, #4]
	 		arm_biquad_cascade_df2T_f32(&IIR_kick, &monoIn, &kickOut, 1);			//#################################
 8001018:	4641      	mov	r1, r8
		 	leftIn = (1.0f/32768.0f)* RecordBufferPtr[i];
 800101a:	fa0f f58c 	sxth.w	r5, ip
 800101e:	ee07 5a90 	vmov	s15, r5
 8001022:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001026:	ee67 7aa9 	vmul.f32	s15, s15, s19
 800102a:	edc6 7a00 	vstr	s15, [r6]
	 		if (leftIn > 1.0f){
 800102e:	edd6 7a00 	vldr	s15, [r6]
 8001032:	eef4 7ac9 	vcmpe.f32	s15, s18
 8001036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800103a:	dd05      	ble.n	8001048 <ProcessData+0x90>
	 			leftIn -= 2.0f;
 800103c:	edd6 7a00 	vldr	s15, [r6]
 8001040:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001044:	edc6 7a00 	vstr	s15, [r6]
	 		rightIn = (1.0f/32768.0f)* RecordBufferPtr[i+1];
 8001048:	1ca5      	adds	r5, r4, #2
 800104a:	f837 c005 	ldrh.w	ip, [r7, r5]
 800104e:	fa0f f58c 	sxth.w	r5, ip
 8001052:	ee07 5a90 	vmov	s15, r5
 8001056:	4db3      	ldr	r5, [pc, #716]	@ (8001324 <ProcessData+0x36c>)
 8001058:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800105c:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8001060:	edc5 7a00 	vstr	s15, [r5]
	 		if (rightIn > 1.0f){
 8001064:	edd5 7a00 	vldr	s15, [r5]
 8001068:	eef4 7ac9 	vcmpe.f32	s15, s18
 800106c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001070:	dd05      	ble.n	800107e <ProcessData+0xc6>
	 			rightIn -= 2.0f;
 8001072:	edd5 7a00 	vldr	s15, [r5]
 8001076:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800107a:	edc5 7a00 	vstr	s15, [r5]
	 		monoIn = (1.0f/32768.0f) * ((RecordBufferPtr[i] + RecordBufferPtr[i+1]) / 2);
 800107e:	1ca5      	adds	r5, r4, #2
 8001080:	f8be c000 	ldrh.w	ip, [lr]
 8001084:	5b7f      	ldrh	r7, [r7, r5]
 8001086:	b23f      	sxth	r7, r7
 8001088:	fa07 f78c 	sxtah	r7, r7, ip
 800108c:	2f00      	cmp	r7, #0
 800108e:	bfb8      	it	lt
 8001090:	3701      	addlt	r7, #1
 8001092:	107d      	asrs	r5, r7, #1
 8001094:	ee07 5a90 	vmov	s15, r5
 8001098:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800109c:	ee67 7aa9 	vmul.f32	s15, s15, s19
 80010a0:	edc8 7a00 	vstr	s15, [r8]
	 		arm_biquad_cascade_df2T_f32(&IIR_kick, &monoIn, &kickOut, 1);			//#################################
 80010a4:	f000 fc32 	bl	800190c <arm_biquad_cascade_df2T_f32>
	 		arm_biquad_cascade_df2T_f32(&IIR_break, &monoIn, &breakOut, 1);
 80010a8:	2301      	movs	r3, #1
 80010aa:	4a9f      	ldr	r2, [pc, #636]	@ (8001328 <ProcessData+0x370>)
 80010ac:	4641      	mov	r1, r8
 80010ae:	489f      	ldr	r0, [pc, #636]	@ (800132c <ProcessData+0x374>)
 80010b0:	f000 fc2c 	bl	800190c <arm_biquad_cascade_df2T_f32>
	 		kick_value 	+= ((32768.0f * fabs(kickOut)) 	* 2);
 80010b4:	4b99      	ldr	r3, [pc, #612]	@ (800131c <ProcessData+0x364>)
 80010b6:	edda 7a00 	vldr	s15, [sl]
 80010ba:	ed93 3a00 	vldr	s6, [r3]
	 		break_value += ((32768.0f * fabs(breakOut)) * 2);
 80010be:	4b9a      	ldr	r3, [pc, #616]	@ (8001328 <ProcessData+0x370>)
	 		kick_value 	+= ((32768.0f * fabs(kickOut)) 	* 2);
 80010c0:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80010c4:	eeb0 3ac3 	vabs.f32	s6, s6
	 		break_value += ((32768.0f * fabs(breakOut)) * 2);
 80010c8:	edd9 7a00 	vldr	s15, [r9]
 80010cc:	ed93 4a00 	vldr	s8, [r3]
 80010d0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
	 		PlaybackBufferPtr[i] 	= (int16_t) (1000.0f * leftIn);  //(1000.0f * leftIn)
 80010d4:	edd6 5a00 	vldr	s11, [r6]
	 		break_value += ((32768.0f * fabs(breakOut)) * 2);
 80010d8:	eeb0 4ac4 	vabs.f32	s8, s8
	 		PlaybackBufferPtr[i] 	= (int16_t) (1000.0f * leftIn);  //(1000.0f * leftIn)
 80010dc:	f8db 2000 	ldr.w	r2, [fp]
	 		kick_value 	+= ((32768.0f * fabs(kickOut)) 	* 2);
 80010e0:	eeb7 3ac3 	vcvt.f64.f32	d3, s6
	 		PlaybackBufferPtr[i+1] 	= (int16_t) (1000.0f * rightIn); //(32768.0f * rightIn)
 80010e4:	9901      	ldr	r1, [sp, #4]
	 		PlaybackBufferPtr[i] 	= (int16_t) (1000.0f * leftIn);  //(1000.0f * leftIn)
 80010e6:	ee65 5a8a 	vmul.f32	s11, s11, s20
	 		break_value += ((32768.0f * fabs(breakOut)) * 2);
 80010ea:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
	 		kick_value 	+= ((32768.0f * fabs(kickOut)) 	* 2);
 80010ee:	eea3 6b08 	vfma.f64	d6, d3, d8
	 		break_value += ((32768.0f * fabs(breakOut)) * 2);
 80010f2:	eea4 7b08 	vfma.f64	d7, d4, d8
	 		PlaybackBufferPtr[i] 	= (int16_t) (1000.0f * leftIn);  //(1000.0f * leftIn)
 80010f6:	eefd 5ae5 	vcvt.s32.f32	s11, s11
	 		kick_value 	+= ((32768.0f * fabs(kickOut)) 	* 2);
 80010fa:	eebc 6bc6 	vcvt.u32.f64	s12, d6
	 		PlaybackBufferPtr[i] 	= (int16_t) (1000.0f * leftIn);  //(1000.0f * leftIn)
 80010fe:	ee15 3a90 	vmov	r3, s11
 8001102:	b21b      	sxth	r3, r3
	 		kick_value 	+= ((32768.0f * fabs(kickOut)) 	* 2);
 8001104:	ed8a 6a00 	vstr	s12, [sl]
	 		break_value += ((32768.0f * fabs(breakOut)) * 2);
 8001108:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 800110c:	ed89 7a00 	vstr	s14, [r9]
	 		PlaybackBufferPtr[i] 	= (int16_t) (1000.0f * leftIn);  //(1000.0f * leftIn)
 8001110:	5313      	strh	r3, [r2, r4]
	 for (uint16_t i =0; i<(RECORD_BUFFER_SIZE/2)-1 ; i+=2){
 8001112:	3404      	adds	r4, #4
	 		PlaybackBufferPtr[i+1] 	= (int16_t) (1000.0f * rightIn); //(32768.0f * rightIn)
 8001114:	4b83      	ldr	r3, [pc, #524]	@ (8001324 <ProcessData+0x36c>)
	 for (uint16_t i =0; i<(RECORD_BUFFER_SIZE/2)-1 ; i+=2){
 8001116:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
	 		PlaybackBufferPtr[i+1] 	= (int16_t) (1000.0f * rightIn); //(32768.0f * rightIn)
 800111a:	edd3 7a00 	vldr	s15, [r3]
 800111e:	ee67 7a8a 	vmul.f32	s15, s15, s20
 8001122:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001126:	ee17 3a90 	vmov	r3, s15
 800112a:	b21b      	sxth	r3, r3
 800112c:	5253      	strh	r3, [r2, r1]
	 for (uint16_t i =0; i<(RECORD_BUFFER_SIZE/2)-1 ; i+=2){
 800112e:	f47f af64 	bne.w	8000ffa <ProcessData+0x42>
	 kick_value = kick_value / (RECORD_BUFFER_SIZE/4);
 8001132:	ee16 3a10 	vmov	r3, s12
		kick_average += ((1.0f/NUM_SHORT_AVR) * short_avr_buffer[n]);
 8001136:	eef5 4a00 	vmov.f32	s9, #80	@ 0x3e800000  0.250
			short_avr_buffer[val - 1] = short_avr_buffer[val - 2]; //move value to next position
 800113a:	487d      	ldr	r0, [pc, #500]	@ (8001330 <ProcessData+0x378>)
	if(transformed_value > KICK_MAX){
 800113c:	f644 6120 	movw	r1, #20000	@ 0x4e20
	 kick_value = kick_value / (RECORD_BUFFER_SIZE/4);
 8001140:	0a9a      	lsrs	r2, r3, #10
	 break_value = break_value / (RECORD_BUFFER_SIZE/4);
 8001142:	ee17 3a10 	vmov	r3, s14
			short_avr_buffer[val - 1] = short_avr_buffer[val - 2]; //move value to next position
 8001146:	f8b0 c000 	ldrh.w	ip, [r0]
	 break_value = break_value / (RECORD_BUFFER_SIZE/4);
 800114a:	0a9b      	lsrs	r3, r3, #10
			short_avr_buffer[val - 1] = short_avr_buffer[val - 2]; //move value to next position
 800114c:	f8b0 e002 	ldrh.w	lr, [r0, #2]
		kick_average += ((1.0f/NUM_SHORT_AVR) * short_avr_buffer[n]);
 8001150:	ee07 ca10 	vmov	s14, ip
	 kick_ema          	= cal_ema(kick_transformed, 0.01, kick_ema);
 8001154:	4e77      	ldr	r6, [pc, #476]	@ (8001334 <ProcessData+0x37c>)
	 break_value = break_value / (RECORD_BUFFER_SIZE/4);
 8001156:	f8c9 3000 	str.w	r3, [r9]
		kick_average += ((1.0f/NUM_SHORT_AVR) * short_avr_buffer[n]);
 800115a:	b293      	uxth	r3, r2
 800115c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	uint16_t ema = alpha * new_value + (1 - alpha) * previous_ema;
 8001160:	8835      	ldrh	r5, [r6, #0]
		kick_average += ((1.0f/NUM_SHORT_AVR) * short_avr_buffer[n]);
 8001162:	ee07 3a90 	vmov	s15, r3
			short_avr_buffer[val - 1] = short_avr_buffer[val - 2]; //move value to next position
 8001166:	8887      	ldrh	r7, [r0, #4]
	 kick_value = kick_value / (RECORD_BUFFER_SIZE/4);
 8001168:	f8ca 2000 	str.w	r2, [sl]
		kick_average += ((1.0f/NUM_SHORT_AVR) * short_avr_buffer[n]);
 800116c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	uint16_t ema = alpha * new_value + (1 - alpha) * previous_ema;
 8001170:	ed9f 4a71 	vldr	s8, [pc, #452]	@ 8001338 <ProcessData+0x380>
 8001174:	ed9f 5a71 	vldr	s10, [pc, #452]	@ 800133c <ProcessData+0x384>
		kick_average += ((1.0f/NUM_SHORT_AVR) * short_avr_buffer[n]);
 8001178:	ee67 7aa4 	vmul.f32	s15, s15, s9
	uint16_t transformed_value = (pow(value, exp) / pow(max_value, (exp-1)));
 800117c:	ed9f 6b60 	vldr	d6, [pc, #384]	@ 8001300 <ProcessData+0x348>
		kick_average += ((1.0f/NUM_SHORT_AVR) * short_avr_buffer[n]);
 8001180:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001184:	ee17 3a90 	vmov	r3, s15
 8001188:	b29b      	uxth	r3, r3
 800118a:	ee07 3a90 	vmov	s15, r3
 800118e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001192:	eee7 7a24 	vfma.f32	s15, s14, s9
 8001196:	ee07 ea10 	vmov	s14, lr
 800119a:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 800119e:	ee07 7a10 	vmov	s14, r7
 80011a2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80011a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011aa:	ee17 3a90 	vmov	r3, s15
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	ee07 3a90 	vmov	s15, r3
	    	short_avr_buffer[val - 1] = energy; // add new value to first position
 80011b4:	2300      	movs	r3, #0
		kick_average += ((1.0f/NUM_SHORT_AVR) * short_avr_buffer[n]);
 80011b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011ba:	eee5 7aa4 	vfma.f32	s15, s11, s9
	uint16_t ema = alpha * new_value + (1 - alpha) * previous_ema;
 80011be:	ee05 5a90 	vmov	s11, r5
 80011c2:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80011c6:	ee65 5a84 	vmul.f32	s11, s11, s8
		kick_average += ((1.0f/NUM_SHORT_AVR) * short_avr_buffer[n]);
 80011ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011ce:	ee17 5a90 	vmov	r5, s15
 80011d2:	b2ad      	uxth	r5, r5
 80011d4:	ee07 5a90 	vmov	s15, r5
	    	short_avr_buffer[val - 1] = energy; // add new value to first position
 80011d8:	461d      	mov	r5, r3
 80011da:	f362 030f 	bfi	r3, r2, #0, #16
	 kick_avr  			= cal_short_avr(kick_value);
 80011de:	4a58      	ldr	r2, [pc, #352]	@ (8001340 <ProcessData+0x388>)
		kick_average += ((1.0f/NUM_SHORT_AVR) * short_avr_buffer[n]);
 80011e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	    	short_avr_buffer[val - 1] = energy; // add new value to first position
 80011e4:	f36e 050f 	bfi	r5, lr, #0, #16
 80011e8:	f36c 431f 	bfi	r3, ip, #16, #16
 80011ec:	f367 451f 	bfi	r5, r7, #16, #16
		kick_average += ((1.0f/NUM_SHORT_AVR) * short_avr_buffer[n]);
 80011f0:	eee7 7a24 	vfma.f32	s15, s14, s9
	    	short_avr_buffer[val - 1] = energy; // add new value to first position
 80011f4:	e9c0 3500 	strd	r3, r5, [r0]
	 if ((KICK_VAL < kick_transformed) && (kick_transformed > (kick_ema * KICK_THRESH))){ //and not (break_energy_value < break_threshold): # detect beat
 80011f8:	f641 3058 	movw	r0, #7000	@ 0x1b58
		kick_average += ((1.0f/NUM_SHORT_AVR) * short_avr_buffer[n]);
 80011fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001200:	ee17 3a90 	vmov	r3, s15
 8001204:	b29b      	uxth	r3, r3
	uint16_t transformed_value = (pow(value, exp) / pow(max_value, (exp-1)));
 8001206:	ee07 3a90 	vmov	s15, r3
	 kick_avr  			= cal_short_avr(kick_value);
 800120a:	8013      	strh	r3, [r2, #0]
	 kick_transformed  	= transform_exp(kick_avr,KICK_VAL,4); //with old max energy: transform_exp(kick_avr,9000,4)
 800120c:	4a4d      	ldr	r2, [pc, #308]	@ (8001344 <ProcessData+0x38c>)
	uint16_t transformed_value = (pow(value, exp) / pow(max_value, (exp-1)));
 800120e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001212:	ee27 7b07 	vmul.f64	d7, d7, d7
 8001216:	ee27 7b07 	vmul.f64	d7, d7, d7
 800121a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800121e:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 8001222:	ee17 3a10 	vmov	r3, s14
 8001226:	b29b      	uxth	r3, r3
	if(transformed_value > KICK_MAX){
 8001228:	4299      	cmp	r1, r3
 800122a:	bf28      	it	cs
 800122c:	4619      	movcs	r1, r3
	 if ((KICK_VAL < kick_transformed) && (kick_transformed > (kick_ema * KICK_THRESH))){ //and not (break_energy_value < break_threshold): # detect beat
 800122e:	4283      	cmp	r3, r0
            if (beat_hist_buffer[val - 2] != 0) {
 8001230:	4b45      	ldr	r3, [pc, #276]	@ (8001348 <ProcessData+0x390>)
	uint16_t ema = alpha * new_value + (1 - alpha) * previous_ema;
 8001232:	ee07 1a90 	vmov	s15, r1
	 kick_transformed  	= transform_exp(kick_avr,KICK_VAL,4); //with old max energy: transform_exp(kick_avr,9000,4)
 8001236:	8011      	strh	r1, [r2, #0]
	uint16_t ema = alpha * new_value + (1 - alpha) * previous_ema;
 8001238:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800123c:	eef0 7a65 	vmov.f32	s15, s11
 8001240:	eee7 7a05 	vfma.f32	s15, s14, s10
 8001244:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001248:	ee17 2a90 	vmov	r2, s15
 800124c:	b292      	uxth	r2, r2
	 kick_ema          	= cal_ema(kick_transformed, 0.01, kick_ema);
 800124e:	8032      	strh	r2, [r6, #0]
	 if ((KICK_VAL < kick_transformed) && (kick_transformed > (kick_ema * KICK_THRESH))){ //and not (break_energy_value < break_threshold): # detect beat
 8001250:	d911      	bls.n	8001276 <ProcessData+0x2be>
 8001252:	ee07 2a90 	vmov	s15, r2
 8001256:	eeb1 5b02 	vmov.f64	d5, #18	@ 0x40900000  4.5
 800125a:	ee06 1a90 	vmov	s13, r1
 800125e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001262:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8001266:	ee27 7b05 	vmul.f64	d7, d7, d5
 800126a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800126e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001272:	f300 80e2 	bgt.w	800143a <ProcessData+0x482>
            beat_hist_buffer[val - 1] = beat_hist_buffer[val - 2]; // Wert zur nächsten Position verschieben
 8001276:	7b19      	ldrb	r1, [r3, #12]
            beat_hist_buffer[val - 1] = is_beat; // Neuen Wert an erster Position hinzufügen
 8001278:	2200      	movs	r2, #0
            beat_hist_buffer[val - 1] = beat_hist_buffer[val - 2]; // Wert zur nächsten Position verschieben
 800127a:	7b5f      	ldrb	r7, [r3, #13]
 800127c:	7ade      	ldrb	r6, [r3, #11]
 800127e:	7a9d      	ldrb	r5, [r3, #10]
 8001280:	7a5c      	ldrb	r4, [r3, #9]
 8001282:	7a18      	ldrb	r0, [r3, #8]
 8001284:	7359      	strb	r1, [r3, #13]
 8001286:	7999      	ldrb	r1, [r3, #6]
 8001288:	f893 c007 	ldrb.w	ip, [r3, #7]
 800128c:	739f      	strb	r7, [r3, #14]
 800128e:	731e      	strb	r6, [r3, #12]
 8001290:	795f      	ldrb	r7, [r3, #5]
 8001292:	791e      	ldrb	r6, [r3, #4]
 8001294:	72dd      	strb	r5, [r3, #11]
 8001296:	729c      	strb	r4, [r3, #10]
 8001298:	78dd      	ldrb	r5, [r3, #3]
 800129a:	789c      	ldrb	r4, [r3, #2]
 800129c:	7258      	strb	r0, [r3, #9]
 800129e:	71d9      	strb	r1, [r3, #7]
 80012a0:	7858      	ldrb	r0, [r3, #1]
 80012a2:	7819      	ldrb	r1, [r3, #0]
 80012a4:	f883 c008 	strb.w	ip, [r3, #8]
 80012a8:	719f      	strb	r7, [r3, #6]
 80012aa:	715e      	strb	r6, [r3, #5]
 80012ac:	711d      	strb	r5, [r3, #4]
 80012ae:	70dc      	strb	r4, [r3, #3]
 80012b0:	7098      	strb	r0, [r3, #2]
 80012b2:	7059      	strb	r1, [r3, #1]
            beat_hist_buffer[val - 1] = is_beat; // Neuen Wert an erster Position hinzufügen
 80012b4:	701a      	strb	r2, [r3, #0]
			 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80012b6:	2200      	movs	r2, #0
 80012b8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012bc:	4823      	ldr	r0, [pc, #140]	@ (800134c <ProcessData+0x394>)
 80012be:	f001 f97d 	bl	80025bc <HAL_GPIO_WritePin>
	 break_avr         	= cal_break_avr(break_value);
 80012c2:	4a23      	ldr	r2, [pc, #140]	@ (8001350 <ProcessData+0x398>)
 80012c4:	f8b9 4000 	ldrh.w	r4, [r9]
	for (uint8_t val = NUM_BREAK_AVR; val > 0; val--) {
 80012c8:	f5a2 71c7 	sub.w	r1, r2, #398	@ 0x18e
			break_avr_buffer[val - 1] = break_avr_buffer[val - 2]; //move value to next position
 80012cc:	4613      	mov	r3, r2
		if (val > 1) {
 80012ce:	428a      	cmp	r2, r1
 80012d0:	d007      	beq.n	80012e2 <ProcessData+0x32a>
			break_avr_buffer[val - 1] = break_avr_buffer[val - 2]; //move value to next position
 80012d2:	f832 2c02 	ldrh.w	r2, [r2, #-2]
 80012d6:	f823 2902 	strh.w	r2, [r3], #-2
	for (uint8_t val = NUM_BREAK_AVR; val > 0; val--) {
 80012da:	461a      	mov	r2, r3
		if (val > 1) {
 80012dc:	428a      	cmp	r2, r1
			break_avr_buffer[val - 1] = break_avr_buffer[val - 2]; //move value to next position
 80012de:	4613      	mov	r3, r2
		if (val > 1) {
 80012e0:	d1f7      	bne.n	80012d2 <ProcessData+0x31a>
	uint16_t break_average = 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	491b      	ldr	r1, [pc, #108]	@ (8001354 <ProcessData+0x39c>)
 80012e6:	f502 70c7 	add.w	r0, r2, #398	@ 0x18e
		break_average += ((1.0f/NUM_BREAK_AVR) * break_avr_buffer[n]);
 80012ea:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 8001358 <ProcessData+0x3a0>
			break_avr_buffer[val - 1] = energy; // add new value to first position
 80012ee:	ee07 3a90 	vmov	s15, r3
 80012f2:	8014      	strh	r4, [r2, #0]
 80012f4:	e03a      	b.n	800136c <ProcessData+0x3b4>
 80012f6:	bf00      	nop
 80012f8:	00000000 	.word	0x00000000
 80012fc:	40f00000 	.word	0x40f00000
 8001300:	97bc9623 	.word	0x97bc9623
 8001304:	3d89a503 	.word	0x3d89a503
 8001308:	40022400 	.word	0x40022400
 800130c:	20000264 	.word	0x20000264
 8001310:	38000000 	.word	0x38000000
 8001314:	447a0000 	.word	0x447a0000
 8001318:	20000004 	.word	0x20000004
 800131c:	20000258 	.word	0x20000258
 8001320:	20004438 	.word	0x20004438
 8001324:	20000260 	.word	0x20000260
 8001328:	20000254 	.word	0x20000254
 800132c:	20004444 	.word	0x20004444
 8001330:	20004288 	.word	0x20004288
 8001334:	20004436 	.word	0x20004436
 8001338:	3f7d70a4 	.word	0x3f7d70a4
 800133c:	3c23d70a 	.word	0x3c23d70a
 8001340:	20004424 	.word	0x20004424
 8001344:	20004420 	.word	0x20004420
 8001348:	20004278 	.word	0x20004278
 800134c:	40020000 	.word	0x40020000
 8001350:	2000441e 	.word	0x2000441e
 8001354:	2000428e 	.word	0x2000428e
 8001358:	3ba3d70a 	.word	0x3ba3d70a
 800135c:	2000442c 	.word	0x2000442c
 8001360:	20004428 	.word	0x20004428
 8001364:	2000025c 	.word	0x2000025c
 8001368:	20000000 	.word	0x20000000
		break_average += ((1.0f/NUM_BREAK_AVR) * break_avr_buffer[n]);
 800136c:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 8001370:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001374:	ee07 3a10 	vmov	s14, r3
	for (uint8_t n = 0; n < NUM_BREAK_AVR; n++) {
 8001378:	4288      	cmp	r0, r1
		break_average += ((1.0f/NUM_BREAK_AVR) * break_avr_buffer[n]);
 800137a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800137e:	eee7 7a26 	vfma.f32	s15, s14, s13
 8001382:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001386:	ee17 3a90 	vmov	r3, s15
 800138a:	b29b      	uxth	r3, r3
 800138c:	ee07 3a90 	vmov	s15, r3
	for (uint8_t n = 0; n < NUM_BREAK_AVR; n++) {
 8001390:	d1ec      	bne.n	800136c <ProcessData+0x3b4>
	 break_ema         	= cal_ema(break_avr, 0.06, break_ema);
 8001392:	4952      	ldr	r1, [pc, #328]	@ (80014dc <ProcessData+0x524>)
	uint16_t ema = alpha * new_value + (1 - alpha) * previous_ema;
 8001394:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8001398:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 80014e0 <ProcessData+0x528>
 800139c:	880a      	ldrh	r2, [r1, #0]
 800139e:	eddf 6a51 	vldr	s13, [pc, #324]	@ 80014e4 <ProcessData+0x52c>
 80013a2:	ee07 2a90 	vmov	s15, r2
	 break_avr         	= cal_break_avr(break_value);
 80013a6:	4a50      	ldr	r2, [pc, #320]	@ (80014e8 <ProcessData+0x530>)
	uint16_t ema = alpha * new_value + (1 - alpha) * previous_ema;
 80013a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	 break_avr         	= cal_break_avr(break_value);
 80013ac:	8013      	strh	r3, [r2, #0]
	uint16_t ema = alpha * new_value + (1 - alpha) * previous_ema;
 80013ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013b2:	eee6 7a26 	vfma.f32	s15, s12, s13
 80013b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013ba:	ee17 2a90 	vmov	r2, s15
 80013be:	b292      	uxth	r2, r2
	 if ((((BREAK_DIF < (break_avr / break_ema)) && (BREAK_SLOPE < cal_slope(break_ema))) || (break_ema > BREAK_THRESH)) && (!(break_ema < MIN_ENERGY))){
 80013c0:	429a      	cmp	r2, r3
	 break_ema         	= cal_ema(break_avr, 0.06, break_ema);
 80013c2:	800a      	strh	r2, [r1, #0]
	 if ((((BREAK_DIF < (break_avr / break_ema)) && (BREAK_SLOPE < cal_slope(break_ema))) || (break_ema > BREAK_THRESH)) && (!(break_ema < MIN_ENERGY))){
 80013c4:	d82e      	bhi.n	8001424 <ProcessData+0x46c>
    slope_ema = cal_ema(slope, 0.06, slope_ema);
 80013c6:	4949      	ldr	r1, [pc, #292]	@ (80014ec <ProcessData+0x534>)
    int16_t slope = energy - slope_old_energy;
 80013c8:	4849      	ldr	r0, [pc, #292]	@ (80014f0 <ProcessData+0x538>)
	uint16_t ema = alpha * new_value + (1 - alpha) * previous_ema;
 80013ca:	880c      	ldrh	r4, [r1, #0]
    int16_t slope = energy - slope_old_energy;
 80013cc:	8803      	ldrh	r3, [r0, #0]
	uint16_t ema = alpha * new_value + (1 - alpha) * previous_ema;
 80013ce:	ee07 4a90 	vmov	s15, r4
    slope_old_energy = energy;
 80013d2:	8002      	strh	r2, [r0, #0]
    int16_t slope = energy - slope_old_energy;
 80013d4:	1ad3      	subs	r3, r2, r3
	uint16_t ema = alpha * new_value + (1 - alpha) * previous_ema;
 80013d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    int16_t slope = energy - slope_old_energy;
 80013da:	b29b      	uxth	r3, r3
	uint16_t ema = alpha * new_value + (1 - alpha) * previous_ema;
 80013dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013e0:	ee07 3a10 	vmov	s14, r3
 80013e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80013e8:	eee7 7a26 	vfma.f32	s15, s14, s13
 80013ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    slope_ema = cal_ema(slope, 0.06, slope_ema);
 80013f0:	ee17 3a90 	vmov	r3, s15
 80013f4:	b21b      	sxth	r3, r3
	 if ((((BREAK_DIF < (break_avr / break_ema)) && (BREAK_SLOPE < cal_slope(break_ema))) || (break_ema > BREAK_THRESH)) && (!(break_ema < MIN_ENERGY))){
 80013f6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
    slope_ema = cal_ema(slope, 0.06, slope_ema);
 80013fa:	800b      	strh	r3, [r1, #0]
	 if ((((BREAK_DIF < (break_avr / break_ema)) && (BREAK_SLOPE < cal_slope(break_ema))) || (break_ema > BREAK_THRESH)) && (!(break_ema < MIN_ENERGY))){
 80013fc:	dd12      	ble.n	8001424 <ProcessData+0x46c>
 80013fe:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 8001402:	d213      	bcs.n	800142c <ProcessData+0x474>
		 HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_13, GPIO_PIN_RESET);
 8001404:	2200      	movs	r2, #0
 8001406:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800140a:	483a      	ldr	r0, [pc, #232]	@ (80014f4 <ProcessData+0x53c>)
 800140c:	f001 f8d6 	bl	80025bc <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_5, GPIO_PIN_RESET);
 8001410:	2200      	movs	r2, #0
 8001412:	2120      	movs	r1, #32
 8001414:	4837      	ldr	r0, [pc, #220]	@ (80014f4 <ProcessData+0x53c>)
}
 8001416:	b003      	add	sp, #12
 8001418:	ecbd 8b06 	vpop	{d8-d10}
 800141c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	 HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_5, GPIO_PIN_RESET);
 8001420:	f001 b8cc 	b.w	80025bc <HAL_GPIO_WritePin>
	 if ((((BREAK_DIF < (break_avr / break_ema)) && (BREAK_SLOPE < cal_slope(break_ema))) || (break_ema > BREAK_THRESH)) && (!(break_ema < MIN_ENERGY))){
 8001424:	f641 3358 	movw	r3, #7000	@ 0x1b58
 8001428:	429a      	cmp	r2, r3
 800142a:	d9eb      	bls.n	8001404 <ProcessData+0x44c>
		 HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_13, GPIO_PIN_SET);
 800142c:	2201      	movs	r2, #1
 800142e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001432:	4830      	ldr	r0, [pc, #192]	@ (80014f4 <ProcessData+0x53c>)
 8001434:	f001 f8c2 	bl	80025bc <HAL_GPIO_WritePin>
 8001438:	e7ea      	b.n	8001410 <ProcessData+0x458>
            if (beat_hist_buffer[val - 2] != 0) {
 800143a:	7b59      	ldrb	r1, [r3, #13]
 800143c:	7858      	ldrb	r0, [r3, #1]
 800143e:	fab1 f281 	clz	r2, r1
            beat_hist_buffer[val - 1] = beat_hist_buffer[val - 2]; // Wert zur nächsten Position verschieben
 8001442:	7399      	strb	r1, [r3, #14]
            if (beat_hist_buffer[val - 2] != 0) {
 8001444:	7b19      	ldrb	r1, [r3, #12]
 8001446:	0952      	lsrs	r2, r2, #5
            	is_beat = 0;
 8001448:	2900      	cmp	r1, #0
            beat_hist_buffer[val - 1] = beat_hist_buffer[val - 2]; // Wert zur nächsten Position verschieben
 800144a:	7359      	strb	r1, [r3, #13]
            if (beat_hist_buffer[val - 2] != 0) {
 800144c:	7ad9      	ldrb	r1, [r3, #11]
            	is_beat = 0;
 800144e:	bf18      	it	ne
 8001450:	2200      	movne	r2, #0
            beat_hist_buffer[val - 1] = beat_hist_buffer[val - 2]; // Wert zur nächsten Position verschieben
 8001452:	7319      	strb	r1, [r3, #12]
            	is_beat = 0;
 8001454:	2900      	cmp	r1, #0
            if (beat_hist_buffer[val - 2] != 0) {
 8001456:	7a99      	ldrb	r1, [r3, #10]
            	is_beat = 0;
 8001458:	bf18      	it	ne
 800145a:	2200      	movne	r2, #0
            beat_hist_buffer[val - 1] = beat_hist_buffer[val - 2]; // Wert zur nächsten Position verschieben
 800145c:	72d9      	strb	r1, [r3, #11]
            	is_beat = 0;
 800145e:	2900      	cmp	r1, #0
            if (beat_hist_buffer[val - 2] != 0) {
 8001460:	7a59      	ldrb	r1, [r3, #9]
            	is_beat = 0;
 8001462:	bf18      	it	ne
 8001464:	2200      	movne	r2, #0
            beat_hist_buffer[val - 1] = beat_hist_buffer[val - 2]; // Wert zur nächsten Position verschieben
 8001466:	7299      	strb	r1, [r3, #10]
            	is_beat = 0;
 8001468:	2900      	cmp	r1, #0
            if (beat_hist_buffer[val - 2] != 0) {
 800146a:	7a19      	ldrb	r1, [r3, #8]
            	is_beat = 0;
 800146c:	bf18      	it	ne
 800146e:	2200      	movne	r2, #0
            beat_hist_buffer[val - 1] = beat_hist_buffer[val - 2]; // Wert zur nächsten Position verschieben
 8001470:	7259      	strb	r1, [r3, #9]
            	is_beat = 0;
 8001472:	2900      	cmp	r1, #0
            if (beat_hist_buffer[val - 2] != 0) {
 8001474:	79d9      	ldrb	r1, [r3, #7]
            	is_beat = 0;
 8001476:	bf18      	it	ne
 8001478:	2200      	movne	r2, #0
            beat_hist_buffer[val - 1] = beat_hist_buffer[val - 2]; // Wert zur nächsten Position verschieben
 800147a:	7219      	strb	r1, [r3, #8]
            	is_beat = 0;
 800147c:	2900      	cmp	r1, #0
            if (beat_hist_buffer[val - 2] != 0) {
 800147e:	7999      	ldrb	r1, [r3, #6]
            	is_beat = 0;
 8001480:	bf18      	it	ne
 8001482:	2200      	movne	r2, #0
            beat_hist_buffer[val - 1] = beat_hist_buffer[val - 2]; // Wert zur nächsten Position verschieben
 8001484:	71d9      	strb	r1, [r3, #7]
            	is_beat = 0;
 8001486:	2900      	cmp	r1, #0
            if (beat_hist_buffer[val - 2] != 0) {
 8001488:	7959      	ldrb	r1, [r3, #5]
            	is_beat = 0;
 800148a:	bf18      	it	ne
 800148c:	2200      	movne	r2, #0
            beat_hist_buffer[val - 1] = beat_hist_buffer[val - 2]; // Wert zur nächsten Position verschieben
 800148e:	7199      	strb	r1, [r3, #6]
            	is_beat = 0;
 8001490:	2900      	cmp	r1, #0
            if (beat_hist_buffer[val - 2] != 0) {
 8001492:	7919      	ldrb	r1, [r3, #4]
            	is_beat = 0;
 8001494:	bf18      	it	ne
 8001496:	2200      	movne	r2, #0
            beat_hist_buffer[val - 1] = beat_hist_buffer[val - 2]; // Wert zur nächsten Position verschieben
 8001498:	7159      	strb	r1, [r3, #5]
            	is_beat = 0;
 800149a:	2900      	cmp	r1, #0
            if (beat_hist_buffer[val - 2] != 0) {
 800149c:	78d9      	ldrb	r1, [r3, #3]
            	is_beat = 0;
 800149e:	bf18      	it	ne
 80014a0:	2200      	movne	r2, #0
            beat_hist_buffer[val - 1] = beat_hist_buffer[val - 2]; // Wert zur nächsten Position verschieben
 80014a2:	7119      	strb	r1, [r3, #4]
            	is_beat = 0;
 80014a4:	2900      	cmp	r1, #0
            if (beat_hist_buffer[val - 2] != 0) {
 80014a6:	7899      	ldrb	r1, [r3, #2]
            	is_beat = 0;
 80014a8:	bf18      	it	ne
 80014aa:	2200      	movne	r2, #0
 80014ac:	2900      	cmp	r1, #0
            beat_hist_buffer[val - 1] = beat_hist_buffer[val - 2]; // Wert zur nächsten Position verschieben
 80014ae:	70d9      	strb	r1, [r3, #3]
            	is_beat = 0;
 80014b0:	bf18      	it	ne
 80014b2:	2200      	movne	r2, #0
            if (beat_hist_buffer[val - 2] != 0) {
 80014b4:	b120      	cbz	r0, 80014c0 <ProcessData+0x508>
 80014b6:	7819      	ldrb	r1, [r3, #0]
            beat_hist_buffer[val - 1] = beat_hist_buffer[val - 2]; // Wert zur nächsten Position verschieben
 80014b8:	7098      	strb	r0, [r3, #2]
            if (beat_hist_buffer[val - 2] != 0) {
 80014ba:	b921      	cbnz	r1, 80014c6 <ProcessData+0x50e>
            beat_hist_buffer[val - 1] = is_beat; // Neuen Wert an erster Position hinzufügen
 80014bc:	8019      	strh	r1, [r3, #0]
    return is_beat; // Rückgabe des aktuellen beat_hist
 80014be:	e6fa      	b.n	80012b6 <ProcessData+0x2fe>
            if (beat_hist_buffer[val - 2] != 0) {
 80014c0:	7819      	ldrb	r1, [r3, #0]
            beat_hist_buffer[val - 1] = beat_hist_buffer[val - 2]; // Wert zur nächsten Position verschieben
 80014c2:	7098      	strb	r0, [r3, #2]
            if (beat_hist_buffer[val - 2] != 0) {
 80014c4:	b119      	cbz	r1, 80014ce <ProcessData+0x516>
            beat_hist_buffer[val - 1] = is_beat; // Neuen Wert an erster Position hinzufügen
 80014c6:	2200      	movs	r2, #0
            beat_hist_buffer[val - 1] = beat_hist_buffer[val - 2]; // Wert zur nächsten Position verschieben
 80014c8:	7059      	strb	r1, [r3, #1]
            beat_hist_buffer[val - 1] = is_beat; // Neuen Wert an erster Position hinzufügen
 80014ca:	701a      	strb	r2, [r3, #0]
    return is_beat; // Rückgabe des aktuellen beat_hist
 80014cc:	e6f3      	b.n	80012b6 <ProcessData+0x2fe>
            beat_hist_buffer[val - 1] = beat_hist_buffer[val - 2]; // Wert zur nächsten Position verschieben
 80014ce:	7059      	strb	r1, [r3, #1]
            beat_hist_buffer[val - 1] = is_beat; // Neuen Wert an erster Position hinzufügen
 80014d0:	701a      	strb	r2, [r3, #0]
		 if(beat_history(1) == 1){
 80014d2:	2a00      	cmp	r2, #0
 80014d4:	f43f aeef 	beq.w	80012b6 <ProcessData+0x2fe>
 80014d8:	e6ee      	b.n	80012b8 <ProcessData+0x300>
 80014da:	bf00      	nop
 80014dc:	20004434 	.word	0x20004434
 80014e0:	3f70a3d7 	.word	0x3f70a3d7
 80014e4:	3d75c28f 	.word	0x3d75c28f
 80014e8:	20004422 	.word	0x20004422
 80014ec:	20004432 	.word	0x20004432
 80014f0:	20004430 	.word	0x20004430
 80014f4:	40022400 	.word	0x40022400

080014f8 <main>:
{
 80014f8:	b508      	push	{r3, lr}
	arm_biquad_cascade_df2T_init_f32(&IIR_break, STAGES,   ba_coeff_break, state_break);
 80014fa:	4a1e      	ldr	r2, [pc, #120]	@ (8001574 <main+0x7c>)
 80014fc:	2105      	movs	r1, #5
 80014fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001578 <main+0x80>)
	  		  dataReadyFlag = 0;
 8001500:	2500      	movs	r5, #0
	arm_biquad_cascade_df2T_init_f32(&IIR_break, STAGES,   ba_coeff_break, state_break);
 8001502:	481e      	ldr	r0, [pc, #120]	@ (800157c <main+0x84>)
 8001504:	f000 fa40 	bl	8001988 <arm_biquad_cascade_df2T_init_f32>
	arm_biquad_cascade_df2T_init_f32(&IIR_kick,  2*STAGES, ba_coeff_kick,  state_kick);
 8001508:	4b1d      	ldr	r3, [pc, #116]	@ (8001580 <main+0x88>)
 800150a:	4a1e      	ldr	r2, [pc, #120]	@ (8001584 <main+0x8c>)
 800150c:	210a      	movs	r1, #10
 800150e:	481e      	ldr	r0, [pc, #120]	@ (8001588 <main+0x90>)
 8001510:	f000 fa3a 	bl	8001988 <arm_biquad_cascade_df2T_init_f32>
  HAL_Init();
 8001514:	4c1d      	ldr	r4, [pc, #116]	@ (800158c <main+0x94>)
 8001516:	f000 fa69 	bl	80019ec <HAL_Init>
  SystemClock_Config();
 800151a:	f7ff fc85 	bl	8000e28 <SystemClock_Config>
  PeriphCommonClock_Config();
 800151e:	f7ff fcdb 	bl	8000ed8 <PeriphCommonClock_Config>
  MX_GPIO_Init();
 8001522:	f7ff fb6b 	bl	8000bfc <MX_GPIO_Init>
  MX_DMA_Init();
 8001526:	f7ff fb3f 	bl	8000ba8 <MX_DMA_Init>
  MX_I2C4_Init();
 800152a:	f7ff fbe7 	bl	8000cfc <MX_I2C4_Init>
  MX_SAI1_Init();
 800152e:	f000 f83f 	bl	80015b0 <MX_SAI1_Init>
  MX_ADC1_Init();
 8001532:	f7ff fa79 	bl	8000a28 <MX_ADC1_Init>
  MX_TIM5_Init();
 8001536:	f000 f96f 	bl	8001818 <MX_TIM5_Init>
  HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t*) PlaybackBuffer, RECORD_BUFFER_SIZE);
 800153a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800153e:	4914      	ldr	r1, [pc, #80]	@ (8001590 <main+0x98>)
 8001540:	4814      	ldr	r0, [pc, #80]	@ (8001594 <main+0x9c>)
 8001542:	f002 fb53 	bl	8003bec <HAL_SAI_Transmit_DMA>
  HAL_SAI_Receive_DMA(&hsai_BlockB1, (uint8_t*) RecordBuffer, RECORD_BUFFER_SIZE);
 8001546:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800154a:	4913      	ldr	r1, [pc, #76]	@ (8001598 <main+0xa0>)
 800154c:	4813      	ldr	r0, [pc, #76]	@ (800159c <main+0xa4>)
 800154e:	f002 fbd7 	bl	8003d00 <HAL_SAI_Receive_DMA>
  HAL_TIM_Base_Start_IT(&htim5);
 8001552:	4813      	ldr	r0, [pc, #76]	@ (80015a0 <main+0xa8>)
 8001554:	f002 fd80 	bl	8004058 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) AdcValues, 3);
 8001558:	2203      	movs	r2, #3
 800155a:	4912      	ldr	r1, [pc, #72]	@ (80015a4 <main+0xac>)
 800155c:	4812      	ldr	r0, [pc, #72]	@ (80015a8 <main+0xb0>)
 800155e:	f000 fb23 	bl	8001ba8 <HAL_ADC_Start_DMA>
  Codec();
 8001562:	f7fe ffe1 	bl	8000528 <Codec>
	  if(dataReadyFlag){
 8001566:	7823      	ldrb	r3, [r4, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d0fc      	beq.n	8001566 <main+0x6e>
	  		  ProcessData();
 800156c:	f7ff fd24 	bl	8000fb8 <ProcessData>
	  		  dataReadyFlag = 0;
 8001570:	7025      	strb	r5, [r4, #0]
 8001572:	e7f8      	b.n	8001566 <main+0x6e>
 8001574:	200000d0 	.word	0x200000d0
 8001578:	200044a0 	.word	0x200044a0
 800157c:	20004444 	.word	0x20004444
 8001580:	20004450 	.word	0x20004450
 8001584:	20000008 	.word	0x20000008
 8001588:	20004438 	.word	0x20004438
 800158c:	20000276 	.word	0x20000276
 8001590:	20000278 	.word	0x20000278
 8001594:	20004618 	.word	0x20004618
 8001598:	20002278 	.word	0x20002278
 800159c:	20004590 	.word	0x20004590
 80015a0:	200046a0 	.word	0x200046a0
 80015a4:	20000270 	.word	0x20000270
 80015a8:	200001c0 	.word	0x200001c0

080015ac <Error_Handler>:
 80015ac:	b672      	cpsid	i
  while (1)
 80015ae:	e7fe      	b.n	80015ae <Error_Handler+0x2>

080015b0 <MX_SAI1_Init>:

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 80015b0:	481a      	ldr	r0, [pc, #104]	@ (800161c <MX_SAI1_Init+0x6c>)
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80015b2:	2200      	movs	r2, #0
  hsai_BlockA1.Instance = SAI1_Block_A;
 80015b4:	491a      	ldr	r1, [pc, #104]	@ (8001620 <MX_SAI1_Init+0x70>)
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 80015b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
{
 80015ba:	b510      	push	{r4, lr}
  hsai_BlockA1.Instance = SAI1_Block_A;
 80015bc:	e9c0 1200 	strd	r1, r2, [r0]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 80015c0:	f64b 3180 	movw	r1, #48000	@ 0xbb80
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80015c4:	2401      	movs	r4, #1
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 80015c6:	6103      	str	r3, [r0, #16]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 4) != HAL_OK)
 80015c8:	2304      	movs	r3, #4
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 80015ca:	61c1      	str	r1, [r0, #28]
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 4) != HAL_OK)
 80015cc:	4611      	mov	r1, r2
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80015ce:	6082      	str	r2, [r0, #8]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80015d0:	60c2      	str	r2, [r0, #12]
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80015d2:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80015d4:	e9c0 2405 	strd	r2, r4, [r0, #20]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 80015d8:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 4) != HAL_OK)
 80015dc:	f002 fa6a 	bl	8003ab4 <HAL_SAI_InitProtocol>
 80015e0:	b9a8      	cbnz	r0, 800160e <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 80015e2:	4810      	ldr	r0, [pc, #64]	@ (8001624 <MX_SAI1_Init+0x74>)
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80015e4:	2200      	movs	r2, #0
  hsai_BlockB1.Instance = SAI1_Block_B;
 80015e6:	4c10      	ldr	r4, [pc, #64]	@ (8001628 <MX_SAI1_Init+0x78>)
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 80015e8:	2101      	movs	r1, #1
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 80015ea:	2303      	movs	r3, #3
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80015ec:	60c2      	str	r2, [r0, #12]
  hsai_BlockB1.Instance = SAI1_Block_B;
 80015ee:	6004      	str	r4, [r0, #0]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 80015f0:	f44f 5400 	mov.w	r4, #8192	@ 0x2000
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80015f4:	6181      	str	r1, [r0, #24]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 80015f6:	6104      	str	r4, [r0, #16]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80015f8:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 80015fa:	e9c0 3101 	strd	r3, r1, [r0, #4]
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 4) != HAL_OK)
 80015fe:	2304      	movs	r3, #4
 8001600:	4611      	mov	r1, r2
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001602:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 4) != HAL_OK)
 8001606:	f002 fa55 	bl	8003ab4 <HAL_SAI_InitProtocol>
 800160a:	b918      	cbnz	r0, 8001614 <MX_SAI1_Init+0x64>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800160c:	bd10      	pop	{r4, pc}
    Error_Handler();
 800160e:	f7ff ffcd 	bl	80015ac <Error_Handler>
 8001612:	e7e6      	b.n	80015e2 <MX_SAI1_Init+0x32>
}
 8001614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001618:	f7ff bfc8 	b.w	80015ac <Error_Handler>
 800161c:	20004618 	.word	0x20004618
 8001620:	40015804 	.word	0x40015804
 8001624:	20004590 	.word	0x20004590
 8001628:	40015824 	.word	0x40015824

0800162c <HAL_SAI_MspInit>:
void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 800162c:	4a4d      	ldr	r2, [pc, #308]	@ (8001764 <HAL_SAI_MspInit+0x138>)
 800162e:	6803      	ldr	r3, [r0, #0]
 8001630:	4293      	cmp	r3, r2
{
 8001632:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001634:	4604      	mov	r4, r0
 8001636:	b089      	sub	sp, #36	@ 0x24
    if(saiHandle->Instance==SAI1_Block_A)
 8001638:	d004      	beq.n	8001644 <HAL_SAI_MspInit+0x18>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
    }
    if(saiHandle->Instance==SAI1_Block_B)
 800163a:	4a4b      	ldr	r2, [pc, #300]	@ (8001768 <HAL_SAI_MspInit+0x13c>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d041      	beq.n	80016c4 <HAL_SAI_MspInit+0x98>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
    }
}
 8001640:	b009      	add	sp, #36	@ 0x24
 8001642:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (SAI1_client == 0)
 8001644:	4b49      	ldr	r3, [pc, #292]	@ (800176c <HAL_SAI_MspInit+0x140>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	2a00      	cmp	r2, #0
 800164a:	d079      	beq.n	8001740 <HAL_SAI_MspInit+0x114>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800164c:	2170      	movs	r1, #112	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2600      	movs	r6, #0
    SAI1_client ++;
 8001650:	3201      	adds	r2, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001652:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001654:	2706      	movs	r7, #6
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001656:	4846      	ldr	r0, [pc, #280]	@ (8001770 <HAL_SAI_MspInit+0x144>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001658:	9103      	str	r1, [sp, #12]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800165a:	a903      	add	r1, sp, #12
    SAI1_client ++;
 800165c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165e:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001660:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	e9cd 5604 	strd	r5, r6, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001666:	f000 fe6f 	bl	8002348 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800166a:	2380      	movs	r3, #128	@ 0x80
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800166c:	4841      	ldr	r0, [pc, #260]	@ (8001774 <HAL_SAI_MspInit+0x148>)
 800166e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001670:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001672:	9303      	str	r3, [sp, #12]
    hdma_sai1_a.Instance = DMA2_Stream1;
 8001674:	4d40      	ldr	r5, [pc, #256]	@ (8001778 <HAL_SAI_MspInit+0x14c>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001676:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001678:	e9cd 6605 	strd	r6, r6, [sp, #20]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800167c:	f000 fe64 	bl	8002348 <HAL_GPIO_Init>
    hdma_sai1_a.Instance = DMA2_Stream1;
 8001680:	4a3e      	ldr	r2, [pc, #248]	@ (800177c <HAL_SAI_MspInit+0x150>)
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001682:	2340      	movs	r3, #64	@ 0x40
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8001684:	4628      	mov	r0, r5
    hdma_sai1_a.Instance = DMA2_Stream1;
 8001686:	602a      	str	r2, [r5, #0]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8001688:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800168c:	60ab      	str	r3, [r5, #8]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800168e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    hdma_sai1_a.Init.Channel = DMA_CHANNEL_0;
 8001692:	606e      	str	r6, [r5, #4]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8001694:	60ee      	str	r6, [r5, #12]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001696:	626e      	str	r6, [r5, #36]	@ 0x24
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001698:	e9c5 2304 	strd	r2, r3, [r5, #16]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 800169c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016a4:	e9c5 2306 	strd	r2, r3, [r5, #24]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80016a8:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80016ac:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 80016ae:	f000 fc9b 	bl	8001fe8 <HAL_DMA_Init>
 80016b2:	2800      	cmp	r0, #0
 80016b4:	d14f      	bne.n	8001756 <HAL_SAI_MspInit+0x12a>
    if(saiHandle->Instance==SAI1_Block_B)
 80016b6:	6823      	ldr	r3, [r4, #0]
 80016b8:	4a2b      	ldr	r2, [pc, #172]	@ (8001768 <HAL_SAI_MspInit+0x13c>)
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 80016ba:	63ac      	str	r4, [r5, #56]	@ 0x38
    if(saiHandle->Instance==SAI1_Block_B)
 80016bc:	4293      	cmp	r3, r2
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 80016be:	e9c4 551b 	strd	r5, r5, [r4, #108]	@ 0x6c
    if(saiHandle->Instance==SAI1_Block_B)
 80016c2:	d1bd      	bne.n	8001640 <HAL_SAI_MspInit+0x14>
      if (SAI1_client == 0)
 80016c4:	4b29      	ldr	r3, [pc, #164]	@ (800176c <HAL_SAI_MspInit+0x140>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	b37a      	cbz	r2, 800172a <HAL_SAI_MspInit+0xfe>
    SAI1_client ++;
 80016ca:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016cc:	2108      	movs	r1, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016d0:	4827      	ldr	r0, [pc, #156]	@ (8001770 <HAL_SAI_MspInit+0x144>)
    SAI1_client ++;
 80016d2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d4:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80016d6:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016d8:	9103      	str	r1, [sp, #12]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016da:	a903      	add	r1, sp, #12
    hdma_sai1_b.Instance = DMA2_Stream4;
 80016dc:	4d28      	ldr	r5, [pc, #160]	@ (8001780 <HAL_SAI_MspInit+0x154>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016de:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80016e2:	e9cd 6306 	strd	r6, r3, [sp, #24]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016e6:	f000 fe2f 	bl	8002348 <HAL_GPIO_Init>
    hdma_sai1_b.Instance = DMA2_Stream4;
 80016ea:	4a26      	ldr	r2, [pc, #152]	@ (8001784 <HAL_SAI_MspInit+0x158>)
    hdma_sai1_b.Init.Channel = DMA_CHANNEL_1;
 80016ec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 80016f0:	4628      	mov	r0, r5
    hdma_sai1_b.Instance = DMA2_Stream4;
 80016f2:	602a      	str	r2, [r5, #0]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 80016f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    hdma_sai1_b.Init.Channel = DMA_CHANNEL_1;
 80016f8:	606b      	str	r3, [r5, #4]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016fa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016fe:	60ae      	str	r6, [r5, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8001700:	60ee      	str	r6, [r5, #12]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001702:	626e      	str	r6, [r5, #36]	@ 0x24
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001704:	e9c5 2304 	strd	r2, r3, [r5, #16]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8001708:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800170c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001710:	e9c5 2306 	strd	r2, r3, [r5, #24]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001714:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8001718:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 800171a:	f000 fc65 	bl	8001fe8 <HAL_DMA_Init>
 800171e:	b9e8      	cbnz	r0, 800175c <HAL_SAI_MspInit+0x130>
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
 8001720:	63ac      	str	r4, [r5, #56]	@ 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
 8001722:	e9c4 551b 	strd	r5, r5, [r4, #108]	@ 0x6c
}
 8001726:	b009      	add	sp, #36	@ 0x24
 8001728:	bdf0      	pop	{r4, r5, r6, r7, pc}
       __HAL_RCC_SAI1_CLK_ENABLE();
 800172a:	4917      	ldr	r1, [pc, #92]	@ (8001788 <HAL_SAI_MspInit+0x15c>)
 800172c:	6c48      	ldr	r0, [r1, #68]	@ 0x44
 800172e:	f440 0080 	orr.w	r0, r0, #4194304	@ 0x400000
 8001732:	6448      	str	r0, [r1, #68]	@ 0x44
 8001734:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8001736:	f401 0180 	and.w	r1, r1, #4194304	@ 0x400000
 800173a:	9102      	str	r1, [sp, #8]
 800173c:	9902      	ldr	r1, [sp, #8]
 800173e:	e7c4      	b.n	80016ca <HAL_SAI_MspInit+0x9e>
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001740:	4911      	ldr	r1, [pc, #68]	@ (8001788 <HAL_SAI_MspInit+0x15c>)
 8001742:	6c48      	ldr	r0, [r1, #68]	@ 0x44
 8001744:	f440 0080 	orr.w	r0, r0, #4194304	@ 0x400000
 8001748:	6448      	str	r0, [r1, #68]	@ 0x44
 800174a:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 800174c:	f401 0180 	and.w	r1, r1, #4194304	@ 0x400000
 8001750:	9101      	str	r1, [sp, #4]
 8001752:	9901      	ldr	r1, [sp, #4]
 8001754:	e77a      	b.n	800164c <HAL_SAI_MspInit+0x20>
      Error_Handler();
 8001756:	f7ff ff29 	bl	80015ac <Error_Handler>
 800175a:	e7ac      	b.n	80016b6 <HAL_SAI_MspInit+0x8a>
      Error_Handler();
 800175c:	f7ff ff26 	bl	80015ac <Error_Handler>
 8001760:	e7de      	b.n	8001720 <HAL_SAI_MspInit+0xf4>
 8001762:	bf00      	nop
 8001764:	40015804 	.word	0x40015804
 8001768:	40015824 	.word	0x40015824
 800176c:	200044c8 	.word	0x200044c8
 8001770:	40021000 	.word	0x40021000
 8001774:	40021800 	.word	0x40021800
 8001778:	2000452c 	.word	0x2000452c
 800177c:	40026428 	.word	0x40026428
 8001780:	200044cc 	.word	0x200044cc
 8001784:	40026470 	.word	0x40026470
 8001788:	40023800 	.word	0x40023800

0800178c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800178c:	4b0a      	ldr	r3, [pc, #40]	@ (80017b8 <HAL_MspInit+0x2c>)
{
 800178e:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8001790:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001792:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001796:	641a      	str	r2, [r3, #64]	@ 0x40
 8001798:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800179a:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 800179e:	9200      	str	r2, [sp, #0]
 80017a0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80017a4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80017a8:	645a      	str	r2, [r3, #68]	@ 0x44
 80017aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017b0:	9301      	str	r3, [sp, #4]
 80017b2:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017b4:	b002      	add	sp, #8
 80017b6:	4770      	bx	lr
 80017b8:	40023800 	.word	0x40023800

080017bc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017bc:	e7fe      	b.n	80017bc <NMI_Handler>
 80017be:	bf00      	nop

080017c0 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017c0:	e7fe      	b.n	80017c0 <HardFault_Handler>
 80017c2:	bf00      	nop

080017c4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c4:	e7fe      	b.n	80017c4 <MemManage_Handler>
 80017c6:	bf00      	nop

080017c8 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017c8:	e7fe      	b.n	80017c8 <BusFault_Handler>
 80017ca:	bf00      	nop

080017cc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017cc:	e7fe      	b.n	80017cc <UsageFault_Handler>
 80017ce:	bf00      	nop

080017d0 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop

080017d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop

080017d8 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop

080017dc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017dc:	f000 b912 	b.w	8001a04 <HAL_IncTick>

080017e0 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80017e0:	4801      	ldr	r0, [pc, #4]	@ (80017e8 <DMA2_Stream0_IRQHandler+0x8>)
 80017e2:	f000 bcdd 	b.w	80021a0 <HAL_DMA_IRQHandler>
 80017e6:	bf00      	nop
 80017e8:	2000015c 	.word	0x2000015c

080017ec <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 80017ec:	4801      	ldr	r0, [pc, #4]	@ (80017f4 <DMA2_Stream1_IRQHandler+0x8>)
 80017ee:	f000 bcd7 	b.w	80021a0 <HAL_DMA_IRQHandler>
 80017f2:	bf00      	nop
 80017f4:	2000452c 	.word	0x2000452c

080017f8 <DMA2_Stream4_IRQHandler>:
void DMA2_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 80017f8:	4801      	ldr	r0, [pc, #4]	@ (8001800 <DMA2_Stream4_IRQHandler+0x8>)
 80017fa:	f000 bcd1 	b.w	80021a0 <HAL_DMA_IRQHandler>
 80017fe:	bf00      	nop
 8001800:	200044cc 	.word	0x200044cc

08001804 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001804:	4a03      	ldr	r2, [pc, #12]	@ (8001814 <SystemInit+0x10>)
 8001806:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800180a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800180e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001812:	4770      	bx	lr
 8001814:	e000ed00 	.word	0xe000ed00

08001818 <MX_TIM5_Init>:

TIM_HandleTypeDef htim5;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001818:	b510      	push	{r4, lr}

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800181a:	2300      	movs	r3, #0
{
 800181c:	b088      	sub	sp, #32
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800181e:	4819      	ldr	r0, [pc, #100]	@ (8001884 <MX_TIM5_Init+0x6c>)
  htim5.Init.Prescaler = 108-1;
 8001820:	216b      	movs	r1, #107	@ 0x6b
  htim5.Instance = TIM5;
 8001822:	4c19      	ldr	r4, [pc, #100]	@ (8001888 <MX_TIM5_Init+0x70>)
  htim5.Init.Prescaler = 108-1;
 8001824:	f240 5234 	movw	r2, #1332	@ 0x534
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001828:	9304      	str	r3, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800182a:	9301      	str	r3, [sp, #4]
  htim5.Init.Prescaler = 108-1;
 800182c:	6103      	str	r3, [r0, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim5.Init.Period = 1332;
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800182e:	6183      	str	r3, [r0, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001830:	9307      	str	r3, [sp, #28]
  htim5.Init.Prescaler = 108-1;
 8001832:	e9c0 4100 	strd	r4, r1, [r0]
 8001836:	e9c0 3202 	strd	r3, r2, [r0, #8]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800183a:	e9cd 3305 	strd	r3, r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800183e:	e9cd 3302 	strd	r3, r3, [sp, #8]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001842:	f002 fb73 	bl	8003f2c <HAL_TIM_Base_Init>
 8001846:	b990      	cbnz	r0, 800186e <MX_TIM5_Init+0x56>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001848:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800184c:	a904      	add	r1, sp, #16
 800184e:	480d      	ldr	r0, [pc, #52]	@ (8001884 <MX_TIM5_Init+0x6c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001850:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001852:	f002 fc53 	bl	80040fc <HAL_TIM_ConfigClockSource>
 8001856:	b988      	cbnz	r0, 800187c <MX_TIM5_Init+0x64>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001858:	2220      	movs	r2, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800185a:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800185c:	a901      	add	r1, sp, #4
 800185e:	4809      	ldr	r0, [pc, #36]	@ (8001884 <MX_TIM5_Init+0x6c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001860:	9201      	str	r2, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001862:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001864:	f002 fcf4 	bl	8004250 <HAL_TIMEx_MasterConfigSynchronization>
 8001868:	b920      	cbnz	r0, 8001874 <MX_TIM5_Init+0x5c>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800186a:	b008      	add	sp, #32
 800186c:	bd10      	pop	{r4, pc}
    Error_Handler();
 800186e:	f7ff fe9d 	bl	80015ac <Error_Handler>
 8001872:	e7e9      	b.n	8001848 <MX_TIM5_Init+0x30>
    Error_Handler();
 8001874:	f7ff fe9a 	bl	80015ac <Error_Handler>
}
 8001878:	b008      	add	sp, #32
 800187a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800187c:	f7ff fe96 	bl	80015ac <Error_Handler>
 8001880:	e7ea      	b.n	8001858 <MX_TIM5_Init+0x40>
 8001882:	bf00      	nop
 8001884:	200046a0 	.word	0x200046a0
 8001888:	40000c00 	.word	0x40000c00

0800188c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM5)
 800188c:	4b09      	ldr	r3, [pc, #36]	@ (80018b4 <HAL_TIM_Base_MspInit+0x28>)
 800188e:	6802      	ldr	r2, [r0, #0]
 8001890:	429a      	cmp	r2, r3
 8001892:	d000      	beq.n	8001896 <HAL_TIM_Base_MspInit+0xa>
 8001894:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001896:	f503 330b 	add.w	r3, r3, #142336	@ 0x22c00
{
 800189a:	b082      	sub	sp, #8
    __HAL_RCC_TIM5_CLK_ENABLE();
 800189c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800189e:	f042 0208 	orr.w	r2, r2, #8
 80018a2:	641a      	str	r2, [r3, #64]	@ 0x40
 80018a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a6:	f003 0308 	and.w	r3, r3, #8
 80018aa:	9301      	str	r3, [sp, #4]
 80018ac:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80018ae:	b002      	add	sp, #8
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	40000c00 	.word	0x40000c00

080018b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018bc:	480d      	ldr	r0, [pc, #52]	@ (80018f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018be:	490e      	ldr	r1, [pc, #56]	@ (80018f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018c0:	4a0e      	ldr	r2, [pc, #56]	@ (80018fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018c4:	e002      	b.n	80018cc <LoopCopyDataInit>

080018c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ca:	3304      	adds	r3, #4

080018cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018d0:	d3f9      	bcc.n	80018c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018d2:	4a0b      	ldr	r2, [pc, #44]	@ (8001900 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018d4:	4c0b      	ldr	r4, [pc, #44]	@ (8001904 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018d8:	e001      	b.n	80018de <LoopFillZerobss>

080018da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018dc:	3204      	adds	r2, #4

080018de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018e0:	d3fb      	bcc.n	80018da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018e2:	f7ff ff8f 	bl	8001804 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018e6:	f002 fd15 	bl	8004314 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ea:	f7ff fe05 	bl	80014f8 <main>
  bx  lr    
 80018ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018f0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80018f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018f8:	20000140 	.word	0x20000140
  ldr r2, =_sidata
 80018fc:	0800439c 	.word	0x0800439c
  ldr r2, =_sbss
 8001900:	20000140 	.word	0x20000140
  ldr r4, =_ebss
 8001904:	200046f0 	.word	0x200046f0

08001908 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001908:	e7fe      	b.n	8001908 <ADC_IRQHandler>
	...

0800190c <arm_biquad_cascade_df2T_f32>:
void arm_biquad_cascade_df2T_f32(
  const arm_biquad_cascade_df2T_instance_f32 * S,
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t blockSize)
{
 800190c:	b530      	push	{r4, r5, lr}
 800190e:	4615      	mov	r5, r2
 8001910:	461c      	mov	r4, r3
  const float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
        float32_t acc1;                                /* Accumulator */
        float32_t b0, b1, b2, a1, a2;                  /* Filter coefficients */
        float32_t Xn1;                                 /* Temporary input */
        float32_t d1, d2;                              /* State variables */
        uint32_t sample, stage = S->numStages;         /* Loop counters */
 8001912:	7802      	ldrb	r2, [r0, #0]
 8001914:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8001918:	f103 0e14 	add.w	lr, r3, #20
 800191c:	f100 0308 	add.w	r3, r0, #8

  do
  {
     /* Reading the coefficients */
     b0 = pCoeffs[0];
 8001920:	ed1e 5a05 	vldr	s10, [lr, #-20]	@ 0xffffffec
     b1 = pCoeffs[1];
 8001924:	ed5e 4a04 	vldr	s9, [lr, #-16]
     b2 = pCoeffs[2];
 8001928:	ed1e 4a03 	vldr	s8, [lr, #-12]
     a1 = pCoeffs[3];
 800192c:	ed5e 3a02 	vldr	s7, [lr, #-8]
     a2 = pCoeffs[4];
 8001930:	ed1e 3a01 	vldr	s6, [lr, #-4]

     /* Reading the state values */
     d1 = pState[0];
 8001934:	ed53 7a02 	vldr	s15, [r3, #-8]
     d2 = pState[1];
 8001938:	ed13 6a01 	vldr	s12, [r3, #-4]
      /* Initialize blkCnt with number of samples */
      sample = blockSize;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (sample > 0U) {
 800193c:	b1bc      	cbz	r4, 800196e <arm_biquad_cascade_df2T_f32+0x62>
      sample = blockSize;
 800193e:	4620      	mov	r0, r4
      while (sample > 0U) {
 8001940:	46ac      	mov	ip, r5
        Xn1 = *pIn++;
 8001942:	ecb1 7a01 	vldmia	r1!, {s14}
      while (sample > 0U) {
 8001946:	3801      	subs	r0, #1

        acc1 = b0 * Xn1 + d1;
 8001948:	eee5 7a07 	vfma.f32	s15, s10, s14

        d1 = b1 * Xn1 + d2;
        d1 += a1 * acc1;
 800194c:	ee63 6aa7 	vmul.f32	s13, s7, s15

        d2 = b2 * Xn1;
        d2 += a2 * acc1;

        *pOut++ = acc1;
 8001950:	ecec 7a01 	vstmia	ip!, {s15}
        d2 += a2 * acc1;
 8001954:	ee63 5a27 	vmul.f32	s11, s6, s15
 8001958:	eef0 7a66 	vmov.f32	s15, s13
 800195c:	eee4 7a87 	vfma.f32	s15, s9, s14
        d1 += a1 * acc1;
 8001960:	ee76 7a27 	vadd.f32	s15, s12, s15
        d2 += a2 * acc1;
 8001964:	eeb0 6a65 	vmov.f32	s12, s11
 8001968:	eea4 6a07 	vfma.f32	s12, s8, s14
      while (sample > 0U) {
 800196c:	d1e9      	bne.n	8001942 <arm_biquad_cascade_df2T_f32+0x36>
      pOut = pDst;

      /* decrement loop counter */
      stage--;

   } while (stage > 0U);
 800196e:	3a01      	subs	r2, #1
      pState[0] = d1;
 8001970:	ed43 7a02 	vstr	s15, [r3, #-8]
      pState[1] = d2;
 8001974:	ed03 6a01 	vstr	s12, [r3, #-4]
   } while (stage > 0U);
 8001978:	f10e 0e14 	add.w	lr, lr, #20
 800197c:	f103 0308 	add.w	r3, r3, #8
 8001980:	d001      	beq.n	8001986 <arm_biquad_cascade_df2T_f32+0x7a>
      pIn = pDst;
 8001982:	4629      	mov	r1, r5
 8001984:	e7cc      	b.n	8001920 <arm_biquad_cascade_df2T_f32+0x14>

}
 8001986:	bd30      	pop	{r4, r5, pc}

08001988 <arm_biquad_cascade_df2T_init_f32>:
void arm_biquad_cascade_df2T_init_f32(
        arm_biquad_cascade_df2T_instance_f32 * S,
        uint8_t numStages,
  const float32_t * pCoeffs,
        float32_t * pState)
{
 8001988:	b538      	push	{r3, r4, r5, lr}
 800198a:	4604      	mov	r4, r0
 800198c:	4615      	mov	r5, r2
 800198e:	4608      	mov	r0, r1

  /* Assign coefficient pointer */
  S->pCoeffs = pCoeffs;

  /* Clear state buffer and size is always 2 * numStages */
  memset(pState, 0, (2U * (uint32_t) numStages) * sizeof(float32_t));
 8001990:	2100      	movs	r1, #0
  S->pCoeffs = pCoeffs;
 8001992:	60a5      	str	r5, [r4, #8]
  memset(pState, 0, (2U * (uint32_t) numStages) * sizeof(float32_t));
 8001994:	00c2      	lsls	r2, r0, #3
  S->numStages = numStages;
 8001996:	7020      	strb	r0, [r4, #0]
  memset(pState, 0, (2U * (uint32_t) numStages) * sizeof(float32_t));
 8001998:	4618      	mov	r0, r3
 800199a:	f002 fcb3 	bl	8004304 <memset>

  /* Assign state pointer */
  S->pState = pState;
 800199e:	6060      	str	r0, [r4, #4]
}
 80019a0:	bd38      	pop	{r3, r4, r5, pc}
 80019a2:	bf00      	nop

080019a4 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019a4:	490e      	ldr	r1, [pc, #56]	@ (80019e0 <HAL_InitTick+0x3c>)
 80019a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019aa:	4a0e      	ldr	r2, [pc, #56]	@ (80019e4 <HAL_InitTick+0x40>)
{
 80019ac:	b510      	push	{r4, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019ae:	7809      	ldrb	r1, [r1, #0]
{
 80019b0:	4604      	mov	r4, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019b2:	6812      	ldr	r2, [r2, #0]
 80019b4:	fbb3 f3f1 	udiv	r3, r3, r1
 80019b8:	fbb2 f0f3 	udiv	r0, r2, r3
 80019bc:	f000 fafe 	bl	8001fbc <HAL_SYSTICK_Config>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019c0:	b908      	cbnz	r0, 80019c6 <HAL_InitTick+0x22>
 80019c2:	2c0f      	cmp	r4, #15
 80019c4:	d901      	bls.n	80019ca <HAL_InitTick+0x26>
    return HAL_ERROR;
 80019c6:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80019c8:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019ca:	2200      	movs	r2, #0
 80019cc:	4621      	mov	r1, r4
 80019ce:	f04f 30ff 	mov.w	r0, #4294967295
 80019d2:	f000 faa9 	bl	8001f28 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019d6:	4b04      	ldr	r3, [pc, #16]	@ (80019e8 <HAL_InitTick+0x44>)
 80019d8:	2000      	movs	r0, #0
 80019da:	601c      	str	r4, [r3, #0]
}
 80019dc:	bd10      	pop	{r4, pc}
 80019de:	bf00      	nop
 80019e0:	20000138 	.word	0x20000138
 80019e4:	20000134 	.word	0x20000134
 80019e8:	2000013c 	.word	0x2000013c

080019ec <HAL_Init>:
{
 80019ec:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019ee:	2003      	movs	r0, #3
 80019f0:	f000 fa88 	bl	8001f04 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80019f4:	2000      	movs	r0, #0
 80019f6:	f7ff ffd5 	bl	80019a4 <HAL_InitTick>
  HAL_MspInit();
 80019fa:	f7ff fec7 	bl	800178c <HAL_MspInit>
}
 80019fe:	2000      	movs	r0, #0
 8001a00:	bd08      	pop	{r3, pc}
 8001a02:	bf00      	nop

08001a04 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001a04:	4a03      	ldr	r2, [pc, #12]	@ (8001a14 <HAL_IncTick+0x10>)
 8001a06:	4b04      	ldr	r3, [pc, #16]	@ (8001a18 <HAL_IncTick+0x14>)
 8001a08:	6811      	ldr	r1, [r2, #0]
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	440b      	add	r3, r1
 8001a0e:	6013      	str	r3, [r2, #0]
}
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	200046ec 	.word	0x200046ec
 8001a18:	20000138 	.word	0x20000138

08001a1c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001a1c:	4b01      	ldr	r3, [pc, #4]	@ (8001a24 <HAL_GetTick+0x8>)
 8001a1e:	6818      	ldr	r0, [r3, #0]
}
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	200046ec 	.word	0x200046ec

08001a28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a28:	b538      	push	{r3, r4, r5, lr}
 8001a2a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001a2c:	f7ff fff6 	bl	8001a1c <HAL_GetTick>
 8001a30:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a32:	1c63      	adds	r3, r4, #1
 8001a34:	d002      	beq.n	8001a3c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a36:	4b04      	ldr	r3, [pc, #16]	@ (8001a48 <HAL_Delay+0x20>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a3c:	f7ff ffee 	bl	8001a1c <HAL_GetTick>
 8001a40:	1b40      	subs	r0, r0, r5
 8001a42:	42a0      	cmp	r0, r4
 8001a44:	d3fa      	bcc.n	8001a3c <HAL_Delay+0x14>
  {
  }
}
 8001a46:	bd38      	pop	{r3, r4, r5, pc}
 8001a48:	20000138 	.word	0x20000138

08001a4c <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a4c:	2800      	cmp	r0, #0
 8001a4e:	f000 809d 	beq.w	8001b8c <HAL_ADC_Init+0x140>
{
 8001a52:	b538      	push	{r3, r4, r5, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a54:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8001a56:	4604      	mov	r4, r0
 8001a58:	b13d      	cbz	r5, 8001a6a <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a5a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001a5c:	06db      	lsls	r3, r3, #27
 8001a5e:	d50c      	bpl.n	8001a7a <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a60:	2300      	movs	r3, #0
    tmp_hal_status = HAL_ERROR;
 8001a62:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8001a64:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
}
 8001a68:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8001a6a:	f7ff f835 	bl	8000ad8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001a6e:	6465      	str	r5, [r4, #68]	@ 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a70:	6c23      	ldr	r3, [r4, #64]	@ 0x40
    hadc->Lock = HAL_UNLOCKED;
 8001a72:	f884 503c 	strb.w	r5, [r4, #60]	@ 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a76:	06db      	lsls	r3, r3, #27
 8001a78:	d4f2      	bmi.n	8001a60 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 8001a7a:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8001a7c:	4b47      	ldr	r3, [pc, #284]	@ (8001b9c <HAL_ADC_Init+0x150>)
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001a7e:	4a48      	ldr	r2, [pc, #288]	@ (8001ba0 <HAL_ADC_Init+0x154>)
    ADC_STATE_CLR_SET(hadc->State,
 8001a80:	400b      	ands	r3, r1
 8001a82:	f043 0302 	orr.w	r3, r3, #2
 8001a86:	6423      	str	r3, [r4, #64]	@ 0x40
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001a88:	6851      	ldr	r1, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a8a:	6823      	ldr	r3, [r4, #0]
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001a8c:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 8001a90:	6051      	str	r1, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001a92:	6850      	ldr	r0, [r2, #4]
 8001a94:	6861      	ldr	r1, [r4, #4]
 8001a96:	4308      	orrs	r0, r1
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a98:	4942      	ldr	r1, [pc, #264]	@ (8001ba4 <HAL_ADC_Init+0x158>)
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001a9a:	6050      	str	r0, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a9c:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a9e:	6920      	ldr	r0, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001aa0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001aa4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001aa6:	685a      	ldr	r2, [r3, #4]
 8001aa8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001aac:	68a0      	ldr	r0, [r4, #8]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001aae:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ab0:	685a      	ldr	r2, [r3, #4]
 8001ab2:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001ab6:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ab8:	685a      	ldr	r2, [r3, #4]
 8001aba:	4302      	orrs	r2, r0
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001abc:	68e0      	ldr	r0, [r4, #12]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001abe:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ac0:	689a      	ldr	r2, [r3, #8]
 8001ac2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ac6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ac8:	689a      	ldr	r2, [r3, #8]
 8001aca:	4302      	orrs	r2, r0
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001acc:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8001ace:	4288      	cmp	r0, r1
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ad0:	609a      	str	r2, [r3, #8]
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ad2:	689a      	ldr	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ad4:	d052      	beq.n	8001b7c <HAL_ADC_Init+0x130>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ad6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ada:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001adc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	4310      	orrs	r0, r2
 8001ae2:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ae4:	689a      	ldr	r2, [r3, #8]
 8001ae6:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001aea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001aec:	689a      	ldr	r2, [r3, #8]
 8001aee:	430a      	orrs	r2, r1
 8001af0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001af2:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001af4:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001af6:	f022 0202 	bic.w	r2, r2, #2
 8001afa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001afc:	689a      	ldr	r2, [r3, #8]
 8001afe:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8001b02:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b04:	f894 2020 	ldrb.w	r2, [r4, #32]
 8001b08:	2a00      	cmp	r2, #0
 8001b0a:	d041      	beq.n	8001b90 <HAL_ADC_Init+0x144>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b0c:	6858      	ldr	r0, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b0e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b10:	f440 6000 	orr.w	r0, r0, #2048	@ 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b14:	1e51      	subs	r1, r2, #1
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b16:	6058      	str	r0, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b18:	685a      	ldr	r2, [r3, #4]
 8001b1a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001b1e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b20:	685a      	ldr	r2, [r3, #4]
 8001b22:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001b26:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b28:	6add      	ldr	r5, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b2a:	69e2      	ldr	r2, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b2c:	f425 0570 	bic.w	r5, r5, #15728640	@ 0xf00000
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b30:	6960      	ldr	r0, [r4, #20]
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b32:	1e51      	subs	r1, r2, #1
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b34:	62dd      	str	r5, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b38:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8001b3c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001b44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	f894 1030 	ldrb.w	r1, [r4, #48]	@ 0x30
 8001b4c:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
    ADC_CLEAR_ERRORCODE(hadc);
 8001b50:	2100      	movs	r1, #0
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b54:	689a      	ldr	r2, [r3, #8]
 8001b56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b5c:	689a      	ldr	r2, [r3, #8]
 8001b5e:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b62:	4608      	mov	r0, r1
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b64:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001b66:	6461      	str	r1, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001b68:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001b6a:	f023 0303 	bic.w	r3, r3, #3
 8001b6e:	f043 0301 	orr.w	r3, r3, #1
 8001b72:	6423      	str	r3, [r4, #64]	@ 0x40
  __HAL_UNLOCK(hadc);
 8001b74:	2300      	movs	r3, #0
 8001b76:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8001b7a:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b7c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001b88:	609a      	str	r2, [r3, #8]
 8001b8a:	e7b2      	b.n	8001af2 <HAL_ADC_Init+0xa6>
    return HAL_ERROR;
 8001b8c:	2001      	movs	r0, #1
}
 8001b8e:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b96:	605a      	str	r2, [r3, #4]
 8001b98:	e7c6      	b.n	8001b28 <HAL_ADC_Init+0xdc>
 8001b9a:	bf00      	nop
 8001b9c:	ffffeefd 	.word	0xffffeefd
 8001ba0:	40012300 	.word	0x40012300
 8001ba4:	0f000001 	.word	0x0f000001

08001ba8 <HAL_ADC_Start_DMA>:
{
 8001ba8:	b570      	push	{r4, r5, r6, lr}
 8001baa:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 8001bac:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
{
 8001bb0:	b082      	sub	sp, #8
  __IO uint32_t counter = 0;
 8001bb2:	2300      	movs	r3, #0
  __HAL_LOCK(hadc);
 8001bb4:	2801      	cmp	r0, #1
  __IO uint32_t counter = 0;
 8001bb6:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001bb8:	f000 8085 	beq.w	8001cc6 <HAL_ADC_Start_DMA+0x11e>
 8001bbc:	2301      	movs	r3, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001bbe:	682e      	ldr	r6, [r5, #0]
  __HAL_LOCK(hadc);
 8001bc0:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001bc4:	68b3      	ldr	r3, [r6, #8]
 8001bc6:	07dc      	lsls	r4, r3, #31
 8001bc8:	d414      	bmi.n	8001bf4 <HAL_ADC_Start_DMA+0x4c>
    __HAL_ADC_ENABLE(hadc);
 8001bca:	68b3      	ldr	r3, [r6, #8]
 8001bcc:	f043 0301 	orr.w	r3, r3, #1
 8001bd0:	60b3      	str	r3, [r6, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001bd2:	4b3e      	ldr	r3, [pc, #248]	@ (8001ccc <HAL_ADC_Start_DMA+0x124>)
 8001bd4:	6818      	ldr	r0, [r3, #0]
 8001bd6:	4b3e      	ldr	r3, [pc, #248]	@ (8001cd0 <HAL_ADC_Start_DMA+0x128>)
 8001bd8:	fba3 3000 	umull	r3, r0, r3, r0
 8001bdc:	0c80      	lsrs	r0, r0, #18
 8001bde:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001be2:	9001      	str	r0, [sp, #4]
    while(counter != 0)
 8001be4:	9b01      	ldr	r3, [sp, #4]
 8001be6:	b12b      	cbz	r3, 8001bf4 <HAL_ADC_Start_DMA+0x4c>
      counter--;
 8001be8:	9c01      	ldr	r4, [sp, #4]
 8001bea:	3c01      	subs	r4, #1
 8001bec:	9401      	str	r4, [sp, #4]
    while(counter != 0)
 8001bee:	9801      	ldr	r0, [sp, #4]
 8001bf0:	2800      	cmp	r0, #0
 8001bf2:	d1f9      	bne.n	8001be8 <HAL_ADC_Start_DMA+0x40>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001bf4:	68b3      	ldr	r3, [r6, #8]
 8001bf6:	f013 0f01 	tst.w	r3, #1
    ADC_STATE_CLR_SET(hadc->State,
 8001bfa:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001bfc:	d03e      	beq.n	8001c7c <HAL_ADC_Start_DMA+0xd4>
    ADC_STATE_CLR_SET(hadc->State,
 8001bfe:	4835      	ldr	r0, [pc, #212]	@ (8001cd4 <HAL_ADC_Start_DMA+0x12c>)
 8001c00:	4018      	ands	r0, r3
 8001c02:	f440 7080 	orr.w	r0, r0, #256	@ 0x100
 8001c06:	6428      	str	r0, [r5, #64]	@ 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c08:	6873      	ldr	r3, [r6, #4]
 8001c0a:	0558      	lsls	r0, r3, #21
 8001c0c:	d505      	bpl.n	8001c1a <HAL_ADC_Start_DMA+0x72>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c0e:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8001c10:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001c14:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c18:	642b      	str	r3, [r5, #64]	@ 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c1a:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8001c1c:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
 8001c20:	d045      	beq.n	8001cae <HAL_ADC_Start_DMA+0x106>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c22:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8001c24:	f023 0306 	bic.w	r3, r3, #6
 8001c28:	646b      	str	r3, [r5, #68]	@ 0x44
    __HAL_UNLOCK(hadc);   
 8001c2a:	2000      	movs	r0, #0
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	460a      	mov	r2, r1
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c30:	4929      	ldr	r1, [pc, #164]	@ (8001cd8 <HAL_ADC_Start_DMA+0x130>)
    __HAL_UNLOCK(hadc);   
 8001c32:	f885 003c 	strb.w	r0, [r5, #60]	@ 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c36:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8001c38:	63c1      	str	r1, [r0, #60]	@ 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c3a:	4928      	ldr	r1, [pc, #160]	@ (8001cdc <HAL_ADC_Start_DMA+0x134>)
 8001c3c:	6401      	str	r1, [r0, #64]	@ 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c3e:	4928      	ldr	r1, [pc, #160]	@ (8001ce0 <HAL_ADC_Start_DMA+0x138>)
 8001c40:	64c1      	str	r1, [r0, #76]	@ 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c42:	f06f 0122 	mvn.w	r1, #34	@ 0x22
 8001c46:	6031      	str	r1, [r6, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001c48:	6871      	ldr	r1, [r6, #4]
 8001c4a:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 8001c4e:	6071      	str	r1, [r6, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001c50:	68b1      	ldr	r1, [r6, #8]
 8001c52:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8001c56:	60b1      	str	r1, [r6, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c58:	f106 014c 	add.w	r1, r6, #76	@ 0x4c
 8001c5c:	f000 fa60 	bl	8002120 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001c60:	4b20      	ldr	r3, [pc, #128]	@ (8001ce4 <HAL_ADC_Start_DMA+0x13c>)
 8001c62:	685a      	ldr	r2, [r3, #4]
 8001c64:	06d2      	lsls	r2, r2, #27
 8001c66:	d113      	bne.n	8001c90 <HAL_ADC_Start_DMA+0xe8>
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001c68:	682b      	ldr	r3, [r5, #0]
 8001c6a:	689a      	ldr	r2, [r3, #8]
 8001c6c:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8001c70:	d10b      	bne.n	8001c8a <HAL_ADC_Start_DMA+0xe2>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001c78:	609a      	str	r2, [r3, #8]
 8001c7a:	e006      	b.n	8001c8a <HAL_ADC_Start_DMA+0xe2>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c7c:	f043 0310 	orr.w	r3, r3, #16
 8001c80:	642b      	str	r3, [r5, #64]	@ 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c82:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	646b      	str	r3, [r5, #68]	@ 0x44
  return HAL_OK;
 8001c8a:	2000      	movs	r0, #0
}
 8001c8c:	b002      	add	sp, #8
 8001c8e:	bd70      	pop	{r4, r5, r6, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c90:	682a      	ldr	r2, [r5, #0]
 8001c92:	4915      	ldr	r1, [pc, #84]	@ (8001ce8 <HAL_ADC_Start_DMA+0x140>)
 8001c94:	428a      	cmp	r2, r1
 8001c96:	d00c      	beq.n	8001cb2 <HAL_ADC_Start_DMA+0x10a>
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001c98:	685b      	ldr	r3, [r3, #4]
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c9a:	06db      	lsls	r3, r3, #27
 8001c9c:	d4f5      	bmi.n	8001c8a <HAL_ADC_Start_DMA+0xe2>
 8001c9e:	4b13      	ldr	r3, [pc, #76]	@ (8001cec <HAL_ADC_Start_DMA+0x144>)
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d1f2      	bne.n	8001c8a <HAL_ADC_Start_DMA+0xe2>
 8001ca4:	689a      	ldr	r2, [r3, #8]
 8001ca6:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8001caa:	d1ee      	bne.n	8001c8a <HAL_ADC_Start_DMA+0xe2>
 8001cac:	e7e1      	b.n	8001c72 <HAL_ADC_Start_DMA+0xca>
      ADC_CLEAR_ERRORCODE(hadc);
 8001cae:	646b      	str	r3, [r5, #68]	@ 0x44
 8001cb0:	e7bb      	b.n	8001c2a <HAL_ADC_Start_DMA+0x82>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001cb2:	6891      	ldr	r1, [r2, #8]
 8001cb4:	f011 5f40 	tst.w	r1, #805306368	@ 0x30000000
 8001cb8:	d103      	bne.n	8001cc2 <HAL_ADC_Start_DMA+0x11a>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cba:	6891      	ldr	r1, [r2, #8]
 8001cbc:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8001cc0:	6091      	str	r1, [r2, #8]
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	e7e1      	b.n	8001c8a <HAL_ADC_Start_DMA+0xe2>
  __HAL_LOCK(hadc);
 8001cc6:	2002      	movs	r0, #2
}
 8001cc8:	b002      	add	sp, #8
 8001cca:	bd70      	pop	{r4, r5, r6, pc}
 8001ccc:	20000134 	.word	0x20000134
 8001cd0:	431bde83 	.word	0x431bde83
 8001cd4:	fffff8fe 	.word	0xfffff8fe
 8001cd8:	08001d1d 	.word	0x08001d1d
 8001cdc:	08001cf5 	.word	0x08001cf5
 8001ce0:	08001d05 	.word	0x08001d05
 8001ce4:	40012300 	.word	0x40012300
 8001ce8:	40012000 	.word	0x40012000
 8001cec:	40012200 	.word	0x40012200

08001cf0 <HAL_ADC_ConvHalfCpltCallback>:
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop

08001cf4 <ADC_DMAHalfConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001cf4:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 8001cf6:	b508      	push	{r3, lr}
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001cf8:	f7ff fffa 	bl	8001cf0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001cfc:	bd08      	pop	{r3, pc}
 8001cfe:	bf00      	nop

08001d00 <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop

08001d04 <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d04:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 8001d06:	b508      	push	{r3, lr}
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001d08:	2340      	movs	r3, #64	@ 0x40
 8001d0a:	6403      	str	r3, [r0, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001d0c:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8001d0e:	f043 0304 	orr.w	r3, r3, #4
 8001d12:	6443      	str	r3, [r0, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001d14:	f7ff fff4 	bl	8001d00 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d18:	bd08      	pop	{r3, pc}
 8001d1a:	bf00      	nop

08001d1c <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d1c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001d1e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d20:	f012 0f50 	tst.w	r2, #80	@ 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 8001d26:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001d28:	d123      	bne.n	8001d72 <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d2e:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d30:	641a      	str	r2, [r3, #64]	@ 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d32:	688a      	ldr	r2, [r1, #8]
 8001d34:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8001d38:	d117      	bne.n	8001d6a <ADC_DMAConvCplt+0x4e>
 8001d3a:	699a      	ldr	r2, [r3, #24]
 8001d3c:	b9aa      	cbnz	r2, 8001d6a <ADC_DMAConvCplt+0x4e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001d3e:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d40:	f412 0f70 	tst.w	r2, #15728640	@ 0xf00000
 8001d44:	d002      	beq.n	8001d4c <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001d46:	688a      	ldr	r2, [r1, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001d48:	0550      	lsls	r0, r2, #21
 8001d4a:	d40e      	bmi.n	8001d6a <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001d4c:	684a      	ldr	r2, [r1, #4]
 8001d4e:	f022 0220 	bic.w	r2, r2, #32
 8001d52:	604a      	str	r2, [r1, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d56:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d5a:	641a      	str	r2, [r3, #64]	@ 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d5c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d5e:	04d1      	lsls	r1, r2, #19
 8001d60:	d403      	bmi.n	8001d6a <ADC_DMAConvCplt+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d64:	f042 0201 	orr.w	r2, r2, #1
 8001d68:	641a      	str	r2, [r3, #64]	@ 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff f90c 	bl	8000f88 <HAL_ADC_ConvCpltCallback>
}
 8001d70:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001d72:	06d2      	lsls	r2, r2, #27
 8001d74:	d404      	bmi.n	8001d80 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 8001d78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d7e:	4718      	bx	r3
      HAL_ADC_ErrorCallback(hadc);
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff ffbd 	bl	8001d00 <HAL_ADC_ErrorCallback>
}
 8001d86:	bd10      	pop	{r4, pc}

08001d88 <HAL_ADC_ConfigChannel>:
{
 8001d88:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t counter = 0;
 8001d8a:	2300      	movs	r3, #0
{
 8001d8c:	b082      	sub	sp, #8
  __IO uint32_t counter = 0;
 8001d8e:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001d90:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	f000 80a7 	beq.w	8001ee8 <HAL_ADC_ConfigChannel+0x160>
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	4684      	mov	ip, r0
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d9e:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hadc);
 8001da0:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001da4:	6808      	ldr	r0, [r1, #0]
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001da6:	688c      	ldr	r4, [r1, #8]
 8001da8:	b282      	uxth	r2, r0
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001daa:	2809      	cmp	r0, #9
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001dac:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001db0:	d92d      	bls.n	8001e0e <HAL_ADC_ConfigChannel+0x86>
 8001db2:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8001db6:	d02a      	beq.n	8001e0e <HAL_ADC_ConfigChannel+0x86>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001db8:	f1ae 0e1e 	sub.w	lr, lr, #30
 8001dbc:	2607      	movs	r6, #7
 8001dbe:	68dd      	ldr	r5, [r3, #12]
 8001dc0:	fa06 f60e 	lsl.w	r6, r6, lr
 8001dc4:	ea25 0506 	bic.w	r5, r5, r6
 8001dc8:	60dd      	str	r5, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dca:	4d49      	ldr	r5, [pc, #292]	@ (8001ef0 <HAL_ADC_ConfigChannel+0x168>)
 8001dcc:	42a8      	cmp	r0, r5
 8001dce:	f000 8086 	beq.w	8001ede <HAL_ADC_ConfigChannel+0x156>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001dd2:	68dd      	ldr	r5, [r3, #12]
 8001dd4:	fa04 f40e 	lsl.w	r4, r4, lr
 8001dd8:	432c      	orrs	r4, r5
 8001dda:	60dc      	str	r4, [r3, #12]
  if (sConfig->Rank < 7)
 8001ddc:	684c      	ldr	r4, [r1, #4]
 8001dde:	2c06      	cmp	r4, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001de0:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  if (sConfig->Rank < 7)
 8001de4:	d824      	bhi.n	8001e30 <HAL_ADC_ConfigChannel+0xa8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001de6:	3905      	subs	r1, #5
 8001de8:	241f      	movs	r4, #31
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001dea:	408a      	lsls	r2, r1
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001dec:	408c      	lsls	r4, r1
 8001dee:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001df0:	ea21 0104 	bic.w	r1, r1, r4
 8001df4:	6359      	str	r1, [r3, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001df6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	635a      	str	r2, [r3, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001dfc:	4a3d      	ldr	r2, [pc, #244]	@ (8001ef4 <HAL_ADC_ConfigChannel+0x16c>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d026      	beq.n	8001e50 <HAL_ADC_ConfigChannel+0xc8>
  __HAL_UNLOCK(hadc);
 8001e02:	2300      	movs	r3, #0
  return HAL_OK;
 8001e04:	4618      	mov	r0, r3
  __HAL_UNLOCK(hadc);
 8001e06:	f88c 303c 	strb.w	r3, [ip, #60]	@ 0x3c
}
 8001e0a:	b002      	add	sp, #8
 8001e0c:	bd70      	pop	{r4, r5, r6, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e0e:	2507      	movs	r5, #7
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e10:	fa04 f40e 	lsl.w	r4, r4, lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e14:	fa05 fe0e 	lsl.w	lr, r5, lr
 8001e18:	691d      	ldr	r5, [r3, #16]
 8001e1a:	ea25 050e 	bic.w	r5, r5, lr
 8001e1e:	611d      	str	r5, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e20:	691d      	ldr	r5, [r3, #16]
 8001e22:	432c      	orrs	r4, r5
 8001e24:	611c      	str	r4, [r3, #16]
  if (sConfig->Rank < 7)
 8001e26:	684c      	ldr	r4, [r1, #4]
 8001e28:	2c06      	cmp	r4, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e2a:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  if (sConfig->Rank < 7)
 8001e2e:	d9da      	bls.n	8001de6 <HAL_ADC_ConfigChannel+0x5e>
  else if (sConfig->Rank < 13)
 8001e30:	2c0c      	cmp	r4, #12
 8001e32:	d837      	bhi.n	8001ea4 <HAL_ADC_ConfigChannel+0x11c>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e34:	3923      	subs	r1, #35	@ 0x23
 8001e36:	241f      	movs	r4, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e38:	408a      	lsls	r2, r1
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e3a:	408c      	lsls	r4, r1
 8001e3c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e3e:	ea21 0104 	bic.w	r1, r1, r4
 8001e42:	6319      	str	r1, [r3, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e44:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e46:	430a      	orrs	r2, r1
 8001e48:	631a      	str	r2, [r3, #48]	@ 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001e4a:	4a2a      	ldr	r2, [pc, #168]	@ (8001ef4 <HAL_ADC_ConfigChannel+0x16c>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d1d8      	bne.n	8001e02 <HAL_ADC_ConfigChannel+0x7a>
 8001e50:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8001e54:	d03c      	beq.n	8001ed0 <HAL_ADC_ConfigChannel+0x148>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e56:	2812      	cmp	r0, #18
 8001e58:	d030      	beq.n	8001ebc <HAL_ADC_ConfigChannel+0x134>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e5a:	4b25      	ldr	r3, [pc, #148]	@ (8001ef0 <HAL_ADC_ConfigChannel+0x168>)
 8001e5c:	4298      	cmp	r0, r3
 8001e5e:	d001      	beq.n	8001e64 <HAL_ADC_ConfigChannel+0xdc>
 8001e60:	2811      	cmp	r0, #17
 8001e62:	d1ce      	bne.n	8001e02 <HAL_ADC_ConfigChannel+0x7a>
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001e64:	4b24      	ldr	r3, [pc, #144]	@ (8001ef8 <HAL_ADC_ConfigChannel+0x170>)
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e66:	4922      	ldr	r1, [pc, #136]	@ (8001ef0 <HAL_ADC_ConfigChannel+0x168>)
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001e68:	685a      	ldr	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e6a:	4288      	cmp	r0, r1
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001e6c:	f422 0280 	bic.w	r2, r2, #4194304	@ 0x400000
 8001e70:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001e72:	685a      	ldr	r2, [r3, #4]
 8001e74:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001e78:	605a      	str	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e7a:	d1c2      	bne.n	8001e02 <HAL_ADC_ConfigChannel+0x7a>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001e7c:	4b1f      	ldr	r3, [pc, #124]	@ (8001efc <HAL_ADC_ConfigChannel+0x174>)
 8001e7e:	4a20      	ldr	r2, [pc, #128]	@ (8001f00 <HAL_ADC_ConfigChannel+0x178>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	fba2 2303 	umull	r2, r3, r2, r3
 8001e86:	0c9b      	lsrs	r3, r3, #18
 8001e88:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8001e90:	9b01      	ldr	r3, [sp, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d0b5      	beq.n	8001e02 <HAL_ADC_ConfigChannel+0x7a>
        counter--;
 8001e96:	9b01      	ldr	r3, [sp, #4]
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8001e9c:	9b01      	ldr	r3, [sp, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1f9      	bne.n	8001e96 <HAL_ADC_ConfigChannel+0x10e>
 8001ea2:	e7ae      	b.n	8001e02 <HAL_ADC_ConfigChannel+0x7a>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ea4:	3941      	subs	r1, #65	@ 0x41
 8001ea6:	241f      	movs	r4, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ea8:	408a      	lsls	r2, r1
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001eaa:	408c      	lsls	r4, r1
 8001eac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001eae:	ea21 0104 	bic.w	r1, r1, r4
 8001eb2:	62d9      	str	r1, [r3, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001eb4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001eba:	e79f      	b.n	8001dfc <HAL_ADC_ConfigChannel+0x74>
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001ebc:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef8 <HAL_ADC_ConfigChannel+0x170>)
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 8001ec4:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_VBATE;
 8001ec6:	685a      	ldr	r2, [r3, #4]
 8001ec8:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8001ecc:	605a      	str	r2, [r3, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ece:	e798      	b.n	8001e02 <HAL_ADC_ConfigChannel+0x7a>
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001ed0:	f8d2 3304 	ldr.w	r3, [r2, #772]	@ 0x304
 8001ed4:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001ed8:	f8c2 3304 	str.w	r3, [r2, #772]	@ 0x304
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001edc:	e791      	b.n	8001e02 <HAL_ADC_ConfigChannel+0x7a>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001ede:	68dd      	ldr	r5, [r3, #12]
 8001ee0:	ea45 6404 	orr.w	r4, r5, r4, lsl #24
 8001ee4:	60dc      	str	r4, [r3, #12]
 8001ee6:	e779      	b.n	8001ddc <HAL_ADC_ConfigChannel+0x54>
  __HAL_LOCK(hadc);
 8001ee8:	2002      	movs	r0, #2
}
 8001eea:	b002      	add	sp, #8
 8001eec:	bd70      	pop	{r4, r5, r6, pc}
 8001eee:	bf00      	nop
 8001ef0:	10000012 	.word	0x10000012
 8001ef4:	40012000 	.word	0x40012000
 8001ef8:	40012300 	.word	0x40012300
 8001efc:	20000134 	.word	0x20000134
 8001f00:	431bde83 	.word	0x431bde83

08001f04 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f04:	4906      	ldr	r1, [pc, #24]	@ (8001f20 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f06:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f0a:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8001f0c:	4b05      	ldr	r3, [pc, #20]	@ (8001f24 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f0e:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f10:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f14:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f18:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8001f1a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001f1c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001f1e:	4770      	bx	lr
 8001f20:	e000ed00 	.word	0xe000ed00
 8001f24:	05fa0000 	.word	0x05fa0000

08001f28 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f28:	4b1a      	ldr	r3, [pc, #104]	@ (8001f94 <HAL_NVIC_SetPriority+0x6c>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f30:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f32:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f36:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f3a:	f1be 0f04 	cmp.w	lr, #4
 8001f3e:	bf28      	it	cs
 8001f40:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f44:	f1bc 0f06 	cmp.w	ip, #6
 8001f48:	d91a      	bls.n	8001f80 <HAL_NVIC_SetPriority+0x58>
 8001f4a:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f52:	fa03 f30c 	lsl.w	r3, r3, ip
 8001f56:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f5a:	f04f 33ff 	mov.w	r3, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8001f5e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f60:	fa03 f30e 	lsl.w	r3, r3, lr
 8001f64:	ea21 0303 	bic.w	r3, r1, r3
 8001f68:	fa03 f30c 	lsl.w	r3, r3, ip
 8001f6c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f70:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001f74:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8001f76:	db06      	blt.n	8001f86 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f78:	4a07      	ldr	r2, [pc, #28]	@ (8001f98 <HAL_NVIC_SetPriority+0x70>)
 8001f7a:	5413      	strb	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001f7c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f80:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f82:	4694      	mov	ip, r2
 8001f84:	e7e9      	b.n	8001f5a <HAL_NVIC_SetPriority+0x32>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f86:	f000 000f 	and.w	r0, r0, #15
 8001f8a:	4a04      	ldr	r2, [pc, #16]	@ (8001f9c <HAL_NVIC_SetPriority+0x74>)
 8001f8c:	5413      	strb	r3, [r2, r0]
 8001f8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f92:	bf00      	nop
 8001f94:	e000ed00 	.word	0xe000ed00
 8001f98:	e000e400 	.word	0xe000e400
 8001f9c:	e000ed14 	.word	0xe000ed14

08001fa0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001fa0:	2800      	cmp	r0, #0
 8001fa2:	db07      	blt.n	8001fb4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fa4:	f000 011f 	and.w	r1, r0, #31
 8001fa8:	2301      	movs	r3, #1
 8001faa:	0940      	lsrs	r0, r0, #5
 8001fac:	4a02      	ldr	r2, [pc, #8]	@ (8001fb8 <HAL_NVIC_EnableIRQ+0x18>)
 8001fae:	408b      	lsls	r3, r1
 8001fb0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	e000e100 	.word	0xe000e100

08001fbc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fbc:	1e43      	subs	r3, r0, #1
 8001fbe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fc2:	d301      	bcc.n	8001fc8 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fc4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001fc6:	4770      	bx	lr
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fc8:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fcc:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fce:	4905      	ldr	r1, [pc, #20]	@ (8001fe4 <HAL_SYSTICK_Config+0x28>)
 8001fd0:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fd4:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fd6:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd8:	f881 c023 	strb.w	ip, [r1, #35]	@ 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fdc:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fde:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fe8:	b538      	push	{r3, r4, r5, lr}
 8001fea:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8001fec:	f7ff fd16 	bl	8001a1c <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ff0:	2c00      	cmp	r4, #0
 8001ff2:	d074      	beq.n	80020de <HAL_DMA_Init+0xf6>
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ff4:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 8001ff6:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ff8:	2102      	movs	r1, #2
 8001ffa:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 8001ffc:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8002000:	f884 1035 	strb.w	r1, [r4, #53]	@ 0x35
  __HAL_DMA_DISABLE(hdma);
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	f022 0201 	bic.w	r2, r2, #1
 800200a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800200c:	e005      	b.n	800201a <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800200e:	f7ff fd05 	bl	8001a1c <HAL_GetTick>
 8002012:	1b43      	subs	r3, r0, r5
 8002014:	2b05      	cmp	r3, #5
 8002016:	d83e      	bhi.n	8002096 <HAL_DMA_Init+0xae>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002018:	6823      	ldr	r3, [r4, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	07d1      	lsls	r1, r2, #31
 800201e:	d4f6      	bmi.n	800200e <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002020:	e9d4 2501 	ldrd	r2, r5, [r4, #4]
 8002024:	68e1      	ldr	r1, [r4, #12]
 8002026:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002028:	69a0      	ldr	r0, [r4, #24]
  tmp = hdma->Instance->CR;
 800202a:	681d      	ldr	r5, [r3, #0]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800202c:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800202e:	6921      	ldr	r1, [r4, #16]
 8002030:	430a      	orrs	r2, r1
 8002032:	6961      	ldr	r1, [r4, #20]
 8002034:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002036:	69e1      	ldr	r1, [r4, #28]
 8002038:	4302      	orrs	r2, r0
 800203a:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800203c:	4934      	ldr	r1, [pc, #208]	@ (8002110 <HAL_DMA_Init+0x128>)
 800203e:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8002040:	6a25      	ldr	r5, [r4, #32]
 8002042:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002044:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002046:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002048:	2904      	cmp	r1, #4
 800204a:	d02b      	beq.n	80020a4 <HAL_DMA_Init+0xbc>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800204c:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800204e:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002050:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002054:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002056:	b2da      	uxtb	r2, r3
  hdma->Instance->FCR = tmp;
 8002058:	6159      	str	r1, [r3, #20]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800205a:	482e      	ldr	r0, [pc, #184]	@ (8002114 <HAL_DMA_Init+0x12c>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800205c:	f1a2 0110 	sub.w	r1, r2, #16
 8002060:	4a2d      	ldr	r2, [pc, #180]	@ (8002118 <HAL_DMA_Init+0x130>)
 8002062:	fba2 5201 	umull	r5, r2, r2, r1
  
  if (stream_number > 3U)
 8002066:	295f      	cmp	r1, #95	@ 0x5f
  hdma->State = HAL_DMA_STATE_READY;
 8002068:	f04f 0501 	mov.w	r5, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800206c:	f04f 0100 	mov.w	r1, #0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002070:	ea4f 1212 	mov.w	r2, r2, lsr #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002074:	5c80      	ldrb	r0, [r0, r2]
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002076:	4a29      	ldr	r2, [pc, #164]	@ (800211c <HAL_DMA_Init+0x134>)
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002078:	65e0      	str	r0, [r4, #92]	@ 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800207a:	ea02 0203 	and.w	r2, r2, r3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800207e:	f04f 033f 	mov.w	r3, #63	@ 0x3f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002082:	bf88      	it	hi
 8002084:	3204      	addhi	r2, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002086:	4083      	lsls	r3, r0
  return HAL_OK;
 8002088:	4608      	mov	r0, r1
 800208a:	65a2      	str	r2, [r4, #88]	@ 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800208c:	6093      	str	r3, [r2, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800208e:	6561      	str	r1, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002090:	f884 5035 	strb.w	r5, [r4, #53]	@ 0x35
}
 8002094:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002096:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002098:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 800209a:	4618      	mov	r0, r3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800209c:	6562      	str	r2, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800209e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
}
 80020a2:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020a4:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	@ 0x2c
 80020a8:	4329      	orrs	r1, r5
 80020aa:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 80020ac:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
  hdma->Instance->CR = tmp;  
 80020ae:	6019      	str	r1, [r3, #0]
  tmp = hdma->Instance->FCR;
 80020b0:	6959      	ldr	r1, [r3, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80020b2:	f021 0107 	bic.w	r1, r1, #7
 80020b6:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 80020b8:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020bc:	2d00      	cmp	r5, #0
 80020be:	d0ca      	beq.n	8002056 <HAL_DMA_Init+0x6e>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80020c0:	b178      	cbz	r0, 80020e2 <HAL_DMA_Init+0xfa>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80020c2:	f5b0 5f00 	cmp.w	r0, #8192	@ 0x2000
 80020c6:	d016      	beq.n	80020f6 <HAL_DMA_Init+0x10e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80020c8:	2a02      	cmp	r2, #2
 80020ca:	d903      	bls.n	80020d4 <HAL_DMA_Init+0xec>
 80020cc:	2a03      	cmp	r2, #3
 80020ce:	d1c2      	bne.n	8002056 <HAL_DMA_Init+0x6e>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020d0:	01ea      	lsls	r2, r5, #7
 80020d2:	d5c0      	bpl.n	8002056 <HAL_DMA_Init+0x6e>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020d4:	2240      	movs	r2, #64	@ 0x40
        hdma->State = HAL_DMA_STATE_READY;
 80020d6:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020d8:	6562      	str	r2, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80020da:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 80020de:	2001      	movs	r0, #1
}
 80020e0:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 80020e2:	2a01      	cmp	r2, #1
 80020e4:	d003      	beq.n	80020ee <HAL_DMA_Init+0x106>
 80020e6:	f032 0202 	bics.w	r2, r2, #2
 80020ea:	d1b4      	bne.n	8002056 <HAL_DMA_Init+0x6e>
 80020ec:	e7f0      	b.n	80020d0 <HAL_DMA_Init+0xe8>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020ee:	f1b5 7fc0 	cmp.w	r5, #25165824	@ 0x1800000
 80020f2:	d1b0      	bne.n	8002056 <HAL_DMA_Init+0x6e>
 80020f4:	e7ee      	b.n	80020d4 <HAL_DMA_Init+0xec>
    switch (tmp)
 80020f6:	2a03      	cmp	r2, #3
 80020f8:	d8ad      	bhi.n	8002056 <HAL_DMA_Init+0x6e>
 80020fa:	a001      	add	r0, pc, #4	@ (adr r0, 8002100 <HAL_DMA_Init+0x118>)
 80020fc:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8002100:	080020d5 	.word	0x080020d5
 8002104:	080020d1 	.word	0x080020d1
 8002108:	080020d5 	.word	0x080020d5
 800210c:	080020ef 	.word	0x080020ef
 8002110:	e010803f 	.word	0xe010803f
 8002114:	08004384 	.word	0x08004384
 8002118:	aaaaaaab 	.word	0xaaaaaaab
 800211c:	fffffc00 	.word	0xfffffc00

08002120 <HAL_DMA_Start_IT>:
{
 8002120:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma);
 8002122:	f890 c034 	ldrb.w	ip, [r0, #52]	@ 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002126:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 8002128:	f1bc 0f01 	cmp.w	ip, #1
 800212c:	d009      	beq.n	8002142 <HAL_DMA_Start_IT+0x22>
 800212e:	2401      	movs	r4, #1
 8002130:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8002134:	f890 4035 	ldrb.w	r4, [r0, #53]	@ 0x35
 8002138:	2c01      	cmp	r4, #1
 800213a:	d005      	beq.n	8002148 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 800213c:	2300      	movs	r3, #0
 800213e:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
  __HAL_LOCK(hdma);
 8002142:	2002      	movs	r0, #2
}
 8002144:	bc70      	pop	{r4, r5, r6}
 8002146:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8002148:	2502      	movs	r5, #2
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800214a:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 800214c:	f880 5035 	strb.w	r5, [r0, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002150:	2500      	movs	r5, #0
 8002152:	6545      	str	r5, [r0, #84]	@ 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002154:	6825      	ldr	r5, [r4, #0]
 8002156:	f425 2580 	bic.w	r5, r5, #262144	@ 0x40000
 800215a:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 800215c:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800215e:	6883      	ldr	r3, [r0, #8]
 8002160:	2b40      	cmp	r3, #64	@ 0x40
 8002162:	d01a      	beq.n	800219a <HAL_DMA_Start_IT+0x7a>
    hdma->Instance->PAR = SrcAddress;
 8002164:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8002166:	60e2      	str	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002168:	6dc1      	ldr	r1, [r0, #92]	@ 0x5c
 800216a:	233f      	movs	r3, #63	@ 0x3f
    if(hdma->XferHalfCpltCallback != NULL)
 800216c:	6c02      	ldr	r2, [r0, #64]	@ 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800216e:	408b      	lsls	r3, r1
 8002170:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002172:	6823      	ldr	r3, [r4, #0]
 8002174:	f043 0316 	orr.w	r3, r3, #22
 8002178:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800217a:	6963      	ldr	r3, [r4, #20]
 800217c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002180:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8002182:	b11a      	cbz	r2, 800218c <HAL_DMA_Start_IT+0x6c>
      hdma->Instance->CR  |= DMA_IT_HT;
 8002184:	6823      	ldr	r3, [r4, #0]
 8002186:	f043 0308 	orr.w	r3, r3, #8
 800218a:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800218c:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800218e:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8002190:	f043 0301 	orr.w	r3, r3, #1
 8002194:	6023      	str	r3, [r4, #0]
}
 8002196:	bc70      	pop	{r4, r5, r6}
 8002198:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 800219a:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 800219c:	60e1      	str	r1, [r4, #12]
 800219e:	e7e3      	b.n	8002168 <HAL_DMA_Start_IT+0x48>

080021a0 <HAL_DMA_IRQHandler>:
{
 80021a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 80021a2:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600;
 80021a4:	4b66      	ldr	r3, [pc, #408]	@ (8002340 <HAL_DMA_IRQHandler+0x1a0>)
{
 80021a6:	b083      	sub	sp, #12
 80021a8:	4604      	mov	r4, r0
  uint32_t timeout = SystemCoreClock / 9600;
 80021aa:	681e      	ldr	r6, [r3, #0]
  __IO uint32_t count = 0;
 80021ac:	9201      	str	r2, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021ae:	2208      	movs	r2, #8
 80021b0:	e9d0 7316 	ldrd	r7, r3, [r0, #88]	@ 0x58
  tmpisr = regs->ISR;
 80021b4:	683d      	ldr	r5, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021b6:	409a      	lsls	r2, r3
 80021b8:	422a      	tst	r2, r5
 80021ba:	d004      	beq.n	80021c6 <HAL_DMA_IRQHandler+0x26>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80021bc:	6801      	ldr	r1, [r0, #0]
 80021be:	6808      	ldr	r0, [r1, #0]
 80021c0:	0740      	lsls	r0, r0, #29
 80021c2:	f100 8097 	bmi.w	80022f4 <HAL_DMA_IRQHandler+0x154>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80021c6:	2201      	movs	r2, #1
 80021c8:	409a      	lsls	r2, r3
 80021ca:	422a      	tst	r2, r5
 80021cc:	d004      	beq.n	80021d8 <HAL_DMA_IRQHandler+0x38>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80021ce:	6821      	ldr	r1, [r4, #0]
 80021d0:	6949      	ldr	r1, [r1, #20]
 80021d2:	0608      	lsls	r0, r1, #24
 80021d4:	f100 8088 	bmi.w	80022e8 <HAL_DMA_IRQHandler+0x148>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80021d8:	2204      	movs	r2, #4
 80021da:	409a      	lsls	r2, r3
 80021dc:	422a      	tst	r2, r5
 80021de:	d003      	beq.n	80021e8 <HAL_DMA_IRQHandler+0x48>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80021e0:	6821      	ldr	r1, [r4, #0]
 80021e2:	6809      	ldr	r1, [r1, #0]
 80021e4:	0789      	lsls	r1, r1, #30
 80021e6:	d479      	bmi.n	80022dc <HAL_DMA_IRQHandler+0x13c>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80021e8:	2210      	movs	r2, #16
 80021ea:	409a      	lsls	r2, r3
 80021ec:	422a      	tst	r2, r5
 80021ee:	d003      	beq.n	80021f8 <HAL_DMA_IRQHandler+0x58>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80021f0:	6821      	ldr	r1, [r4, #0]
 80021f2:	6808      	ldr	r0, [r1, #0]
 80021f4:	0700      	lsls	r0, r0, #28
 80021f6:	d45e      	bmi.n	80022b6 <HAL_DMA_IRQHandler+0x116>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021f8:	2220      	movs	r2, #32
 80021fa:	409a      	lsls	r2, r3
 80021fc:	422a      	tst	r2, r5
 80021fe:	d014      	beq.n	800222a <HAL_DMA_IRQHandler+0x8a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002200:	6821      	ldr	r1, [r4, #0]
 8002202:	6808      	ldr	r0, [r1, #0]
 8002204:	06c0      	lsls	r0, r0, #27
 8002206:	d510      	bpl.n	800222a <HAL_DMA_IRQHandler+0x8a>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002208:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800220a:	f894 2035 	ldrb.w	r2, [r4, #53]	@ 0x35
 800220e:	2a05      	cmp	r2, #5
 8002210:	d033      	beq.n	800227a <HAL_DMA_IRQHandler+0xda>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002212:	680b      	ldr	r3, [r1, #0]
 8002214:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002218:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800221a:	d07b      	beq.n	8002314 <HAL_DMA_IRQHandler+0x174>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800221c:	0319      	lsls	r1, r3, #12
 800221e:	f140 8086 	bpl.w	800232e <HAL_DMA_IRQHandler+0x18e>
        if(hdma->XferCpltCallback != NULL)
 8002222:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002224:	b10b      	cbz	r3, 800222a <HAL_DMA_IRQHandler+0x8a>
          hdma->XferCpltCallback(hdma);
 8002226:	4620      	mov	r0, r4
 8002228:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800222a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800222c:	2b00      	cmp	r3, #0
 800222e:	d040      	beq.n	80022b2 <HAL_DMA_IRQHandler+0x112>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002230:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002232:	07da      	lsls	r2, r3, #31
 8002234:	d51a      	bpl.n	800226c <HAL_DMA_IRQHandler+0xcc>
      __HAL_DMA_DISABLE(hdma);
 8002236:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8002238:	2105      	movs	r1, #5
  uint32_t timeout = SystemCoreClock / 9600;
 800223a:	4b42      	ldr	r3, [pc, #264]	@ (8002344 <HAL_DMA_IRQHandler+0x1a4>)
      hdma->State = HAL_DMA_STATE_ABORT;
 800223c:	f884 1035 	strb.w	r1, [r4, #53]	@ 0x35
  uint32_t timeout = SystemCoreClock / 9600;
 8002240:	fba3 3606 	umull	r3, r6, r3, r6
      __HAL_DMA_DISABLE(hdma);
 8002244:	6813      	ldr	r3, [r2, #0]
 8002246:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600;
 800224a:	0ab6      	lsrs	r6, r6, #10
      __HAL_DMA_DISABLE(hdma);
 800224c:	6013      	str	r3, [r2, #0]
 800224e:	e002      	b.n	8002256 <HAL_DMA_IRQHandler+0xb6>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002250:	6813      	ldr	r3, [r2, #0]
 8002252:	07db      	lsls	r3, r3, #31
 8002254:	d504      	bpl.n	8002260 <HAL_DMA_IRQHandler+0xc0>
        if (++count > timeout)
 8002256:	9b01      	ldr	r3, [sp, #4]
 8002258:	3301      	adds	r3, #1
 800225a:	42b3      	cmp	r3, r6
 800225c:	9301      	str	r3, [sp, #4]
 800225e:	d9f7      	bls.n	8002250 <HAL_DMA_IRQHandler+0xb0>
      hdma->State = HAL_DMA_STATE_READY;
 8002260:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 8002262:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 8002264:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8002268:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 800226c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800226e:	b303      	cbz	r3, 80022b2 <HAL_DMA_IRQHandler+0x112>
      hdma->XferErrorCallback(hdma);
 8002270:	4620      	mov	r0, r4
}
 8002272:	b003      	add	sp, #12
 8002274:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8002278:	4718      	bx	r3
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800227a:	680a      	ldr	r2, [r1, #0]
 800227c:	f022 0216 	bic.w	r2, r2, #22
 8002280:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002282:	694a      	ldr	r2, [r1, #20]
 8002284:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002288:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800228a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800228c:	2a00      	cmp	r2, #0
 800228e:	d053      	beq.n	8002338 <HAL_DMA_IRQHandler+0x198>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002290:	680a      	ldr	r2, [r1, #0]
 8002292:	f022 0208 	bic.w	r2, r2, #8
 8002296:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002298:	223f      	movs	r2, #63	@ 0x3f
        hdma->State = HAL_DMA_STATE_READY;
 800229a:	2101      	movs	r1, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
        __HAL_UNLOCK(hdma);
 80022a0:	2200      	movs	r2, #0
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022a2:	60bb      	str	r3, [r7, #8]
        if(hdma->XferAbortCallback != NULL)
 80022a4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
        hdma->State = HAL_DMA_STATE_READY;
 80022a6:	f884 1035 	strb.w	r1, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 80022aa:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1de      	bne.n	8002270 <HAL_DMA_IRQHandler+0xd0>
}
 80022b2:	b003      	add	sp, #12
 80022b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80022b6:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022b8:	680a      	ldr	r2, [r1, #0]
 80022ba:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022be:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022c0:	d122      	bne.n	8002308 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022c2:	05d2      	lsls	r2, r2, #23
 80022c4:	d403      	bmi.n	80022ce <HAL_DMA_IRQHandler+0x12e>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022c6:	680a      	ldr	r2, [r1, #0]
 80022c8:	f022 0208 	bic.w	r2, r2, #8
 80022cc:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80022ce:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80022d0:	2a00      	cmp	r2, #0
 80022d2:	d091      	beq.n	80021f8 <HAL_DMA_IRQHandler+0x58>
          hdma->XferHalfCpltCallback(hdma);
 80022d4:	4620      	mov	r0, r4
 80022d6:	4790      	blx	r2
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80022d8:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80022da:	e78d      	b.n	80021f8 <HAL_DMA_IRQHandler+0x58>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80022dc:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80022de:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80022e0:	f042 0204 	orr.w	r2, r2, #4
 80022e4:	6562      	str	r2, [r4, #84]	@ 0x54
 80022e6:	e77f      	b.n	80021e8 <HAL_DMA_IRQHandler+0x48>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80022e8:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80022ea:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80022ec:	f042 0202 	orr.w	r2, r2, #2
 80022f0:	6562      	str	r2, [r4, #84]	@ 0x54
 80022f2:	e771      	b.n	80021d8 <HAL_DMA_IRQHandler+0x38>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80022f4:	6808      	ldr	r0, [r1, #0]
 80022f6:	f020 0004 	bic.w	r0, r0, #4
 80022fa:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80022fc:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80022fe:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002300:	f042 0201 	orr.w	r2, r2, #1
 8002304:	6562      	str	r2, [r4, #84]	@ 0x54
 8002306:	e75e      	b.n	80021c6 <HAL_DMA_IRQHandler+0x26>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002308:	0311      	lsls	r1, r2, #12
 800230a:	d5e0      	bpl.n	80022ce <HAL_DMA_IRQHandler+0x12e>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800230c:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800230e:	2a00      	cmp	r2, #0
 8002310:	d1e0      	bne.n	80022d4 <HAL_DMA_IRQHandler+0x134>
 8002312:	e771      	b.n	80021f8 <HAL_DMA_IRQHandler+0x58>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002314:	f413 7380 	ands.w	r3, r3, #256	@ 0x100
 8002318:	d183      	bne.n	8002222 <HAL_DMA_IRQHandler+0x82>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800231a:	680a      	ldr	r2, [r1, #0]
 800231c:	f022 0210 	bic.w	r2, r2, #16
 8002320:	600a      	str	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002322:	2201      	movs	r2, #1
          __HAL_UNLOCK(hdma);
 8002324:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8002328:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 800232c:	e779      	b.n	8002222 <HAL_DMA_IRQHandler+0x82>
          if(hdma->XferM1CpltCallback != NULL)
 800232e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002330:	2b00      	cmp	r3, #0
 8002332:	f47f af78 	bne.w	8002226 <HAL_DMA_IRQHandler+0x86>
 8002336:	e778      	b.n	800222a <HAL_DMA_IRQHandler+0x8a>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002338:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800233a:	2a00      	cmp	r2, #0
 800233c:	d1a8      	bne.n	8002290 <HAL_DMA_IRQHandler+0xf0>
 800233e:	e7ab      	b.n	8002298 <HAL_DMA_IRQHandler+0xf8>
 8002340:	20000134 	.word	0x20000134
 8002344:	1b4e81b5 	.word	0x1b4e81b5

08002348 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800234c:	2300      	movs	r3, #0
{
 800234e:	b085      	sub	sp, #20
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002350:	f04f 0b01 	mov.w	fp, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002354:	680c      	ldr	r4, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002356:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800259c <HAL_GPIO_Init+0x254>

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800235a:	4689      	mov	r9, r1
 800235c:	e003      	b.n	8002366 <HAL_GPIO_Init+0x1e>
  for(position = 0; position < GPIO_NUMBER; position++)
 800235e:	3301      	adds	r3, #1
 8002360:	2b10      	cmp	r3, #16
 8002362:	f000 809b 	beq.w	800249c <HAL_GPIO_Init+0x154>
    ioposition = ((uint32_t)0x01) << position;
 8002366:	fa0b f203 	lsl.w	r2, fp, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800236a:	ea02 0804 	and.w	r8, r2, r4
    if(iocurrent == ioposition)
 800236e:	43a2      	bics	r2, r4
 8002370:	d1f5      	bne.n	800235e <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002372:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8002376:	ea4f 0c43 	mov.w	ip, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800237a:	2503      	movs	r5, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800237c:	f001 0203 	and.w	r2, r1, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002380:	fa05 f50c 	lsl.w	r5, r5, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002384:	1e57      	subs	r7, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002386:	43ed      	mvns	r5, r5
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002388:	2f01      	cmp	r7, #1
 800238a:	f240 808a 	bls.w	80024a2 <HAL_GPIO_Init+0x15a>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800238e:	2a03      	cmp	r2, #3
 8002390:	f040 80c3 	bne.w	800251a <HAL_GPIO_Init+0x1d2>
      temp = GPIOx->MODER;
 8002394:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002396:	fa02 f20c 	lsl.w	r2, r2, ip
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800239a:	f411 3f40 	tst.w	r1, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800239e:	ea05 0507 	and.w	r5, r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80023a2:	ea42 0205 	orr.w	r2, r2, r5
      GPIOx->MODER = temp;
 80023a6:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023a8:	d0d9      	beq.n	800235e <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023aa:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 80023ae:	f023 0503 	bic.w	r5, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80023b2:	f003 0703 	and.w	r7, r3, #3
 80023b6:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023b8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80023bc:	f105 4580 	add.w	r5, r5, #1073741824	@ 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80023c0:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023c2:	f8ca 2044 	str.w	r2, [sl, #68]	@ 0x44
 80023c6:	f505 359c 	add.w	r5, r5, #79872	@ 0x13800
 80023ca:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80023ce:	fa06 fc07 	lsl.w	ip, r6, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80023d2:	4e6f      	ldr	r6, [pc, #444]	@ (8002590 <HAL_GPIO_Init+0x248>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023d4:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80023d8:	42b0      	cmp	r0, r6
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023da:	9203      	str	r2, [sp, #12]
 80023dc:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 80023de:	68aa      	ldr	r2, [r5, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80023e0:	ea22 020c 	bic.w	r2, r2, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80023e4:	d031      	beq.n	800244a <HAL_GPIO_Init+0x102>
 80023e6:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80023ea:	42b0      	cmp	r0, r6
 80023ec:	f000 80a0 	beq.w	8002530 <HAL_GPIO_Init+0x1e8>
 80023f0:	4e68      	ldr	r6, [pc, #416]	@ (8002594 <HAL_GPIO_Init+0x24c>)
 80023f2:	42b0      	cmp	r0, r6
 80023f4:	f000 80a2 	beq.w	800253c <HAL_GPIO_Init+0x1f4>
 80023f8:	f8df c1a4 	ldr.w	ip, [pc, #420]	@ 80025a0 <HAL_GPIO_Init+0x258>
 80023fc:	4560      	cmp	r0, ip
 80023fe:	f000 80a3 	beq.w	8002548 <HAL_GPIO_Init+0x200>
 8002402:	f8df c1a0 	ldr.w	ip, [pc, #416]	@ 80025a4 <HAL_GPIO_Init+0x25c>
 8002406:	4560      	cmp	r0, ip
 8002408:	f000 80a4 	beq.w	8002554 <HAL_GPIO_Init+0x20c>
 800240c:	f8df c198 	ldr.w	ip, [pc, #408]	@ 80025a8 <HAL_GPIO_Init+0x260>
 8002410:	4560      	cmp	r0, ip
 8002412:	f000 80ab 	beq.w	800256c <HAL_GPIO_Init+0x224>
 8002416:	f8df c194 	ldr.w	ip, [pc, #404]	@ 80025ac <HAL_GPIO_Init+0x264>
 800241a:	4560      	cmp	r0, ip
 800241c:	f000 80ac 	beq.w	8002578 <HAL_GPIO_Init+0x230>
 8002420:	f8df c18c 	ldr.w	ip, [pc, #396]	@ 80025b0 <HAL_GPIO_Init+0x268>
 8002424:	4560      	cmp	r0, ip
 8002426:	f000 809b 	beq.w	8002560 <HAL_GPIO_Init+0x218>
 800242a:	f8df c188 	ldr.w	ip, [pc, #392]	@ 80025b4 <HAL_GPIO_Init+0x26c>
 800242e:	4560      	cmp	r0, ip
 8002430:	f000 80a8 	beq.w	8002584 <HAL_GPIO_Init+0x23c>
 8002434:	f8df c180 	ldr.w	ip, [pc, #384]	@ 80025b8 <HAL_GPIO_Init+0x270>
 8002438:	4560      	cmp	r0, ip
 800243a:	bf0c      	ite	eq
 800243c:	f04f 0c09 	moveq.w	ip, #9
 8002440:	f04f 0c0a 	movne.w	ip, #10
 8002444:	fa0c f707 	lsl.w	r7, ip, r7
 8002448:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 800244a:	60aa      	str	r2, [r5, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800244c:	02ce      	lsls	r6, r1, #11
        temp = EXTI->RTSR;
 800244e:	4a52      	ldr	r2, [pc, #328]	@ (8002598 <HAL_GPIO_Init+0x250>)
        temp &= ~((uint32_t)iocurrent);
 8002450:	ea6f 0508 	mvn.w	r5, r8
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8002454:	4e50      	ldr	r6, [pc, #320]	@ (8002598 <HAL_GPIO_Init+0x250>)
  for(position = 0; position < GPIO_NUMBER; position++)
 8002456:	f103 0301 	add.w	r3, r3, #1
        temp = EXTI->RTSR;
 800245a:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800245c:	bf54      	ite	pl
 800245e:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8002460:	ea48 0202 	orrmi.w	r2, r8, r2

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002464:	028f      	lsls	r7, r1, #10
        EXTI->RTSR = temp;
 8002466:	60b2      	str	r2, [r6, #8]
        temp = EXTI->FTSR;
 8002468:	68f2      	ldr	r2, [r6, #12]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 800246a:	4e4b      	ldr	r6, [pc, #300]	@ (8002598 <HAL_GPIO_Init+0x250>)
        temp &= ~((uint32_t)iocurrent);
 800246c:	bf54      	ite	pl
 800246e:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8002470:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR = temp;
 8002474:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR;
 8002476:	6872      	ldr	r2, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002478:	038e      	lsls	r6, r1, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 800247a:	4e47      	ldr	r6, [pc, #284]	@ (8002598 <HAL_GPIO_Init+0x250>)
        temp &= ~((uint32_t)iocurrent);
 800247c:	bf54      	ite	pl
 800247e:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8002480:	ea48 0202 	orrmi.w	r2, r8, r2

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002484:	03c9      	lsls	r1, r1, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8002486:	4944      	ldr	r1, [pc, #272]	@ (8002598 <HAL_GPIO_Init+0x250>)
        EXTI->EMR = temp;
 8002488:	6072      	str	r2, [r6, #4]
        temp = EXTI->IMR;
 800248a:	6832      	ldr	r2, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
 800248c:	bf54      	ite	pl
 800248e:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8002490:	ea48 0202 	orrmi.w	r2, r8, r2
  for(position = 0; position < GPIO_NUMBER; position++)
 8002494:	2b10      	cmp	r3, #16
        EXTI->IMR = temp;
 8002496:	600a      	str	r2, [r1, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002498:	f47f af65 	bne.w	8002366 <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 800249c:	b005      	add	sp, #20
 800249e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 80024a2:	6887      	ldr	r7, [r0, #8]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024a4:	2a02      	cmp	r2, #2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80024a6:	ea07 0e05 	and.w	lr, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 80024aa:	f8d9 700c 	ldr.w	r7, [r9, #12]
 80024ae:	fa07 f70c 	lsl.w	r7, r7, ip
 80024b2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 80024b6:	6087      	str	r7, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024b8:	f3c1 1700 	ubfx	r7, r1, #4, #1
        temp = GPIOx->OTYPER;
 80024bc:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024c0:	fa07 f703 	lsl.w	r7, r7, r3
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024c4:	ea2e 0e08 	bic.w	lr, lr, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024c8:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80024cc:	6047      	str	r7, [r0, #4]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80024ce:	f8d9 7008 	ldr.w	r7, [r9, #8]
        temp = GPIOx->PUPDR;
 80024d2:	f8d0 e00c 	ldr.w	lr, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80024d6:	fa07 f70c 	lsl.w	r7, r7, ip
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80024da:	ea0e 0e05 	and.w	lr, lr, r5
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80024de:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 80024e2:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024e4:	f47f af56 	bne.w	8002394 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->AFR[position >> 3];
 80024e8:	08df      	lsrs	r7, r3, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80024ea:	f003 0e07 	and.w	lr, r3, #7
 80024ee:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 80024f2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp = GPIOx->AFR[position >> 3];
 80024f6:	6a3e      	ldr	r6, [r7, #32]
 80024f8:	9701      	str	r7, [sp, #4]
 80024fa:	9600      	str	r6, [sp, #0]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80024fc:	260f      	movs	r6, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80024fe:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8002502:	fa07 f70e 	lsl.w	r7, r7, lr
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002506:	fa06 fe0e 	lsl.w	lr, r6, lr
 800250a:	9e00      	ldr	r6, [sp, #0]
 800250c:	ea26 0e0e 	bic.w	lr, r6, lr
        GPIOx->AFR[position >> 3] = temp;
 8002510:	9e01      	ldr	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002512:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3] = temp;
 8002516:	6237      	str	r7, [r6, #32]
 8002518:	e73c      	b.n	8002394 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->PUPDR;
 800251a:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800251c:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002520:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8002524:	fa07 f70c 	lsl.w	r7, r7, ip
 8002528:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 800252c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800252e:	e731      	b.n	8002394 <HAL_GPIO_Init+0x4c>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002530:	f04f 0c01 	mov.w	ip, #1
 8002534:	fa0c f707 	lsl.w	r7, ip, r7
 8002538:	433a      	orrs	r2, r7
 800253a:	e786      	b.n	800244a <HAL_GPIO_Init+0x102>
 800253c:	f04f 0c02 	mov.w	ip, #2
 8002540:	fa0c f707 	lsl.w	r7, ip, r7
 8002544:	433a      	orrs	r2, r7
 8002546:	e780      	b.n	800244a <HAL_GPIO_Init+0x102>
 8002548:	f04f 0c03 	mov.w	ip, #3
 800254c:	fa0c f707 	lsl.w	r7, ip, r7
 8002550:	433a      	orrs	r2, r7
 8002552:	e77a      	b.n	800244a <HAL_GPIO_Init+0x102>
 8002554:	f04f 0c04 	mov.w	ip, #4
 8002558:	fa0c f707 	lsl.w	r7, ip, r7
 800255c:	433a      	orrs	r2, r7
 800255e:	e774      	b.n	800244a <HAL_GPIO_Init+0x102>
 8002560:	f04f 0c07 	mov.w	ip, #7
 8002564:	fa0c f707 	lsl.w	r7, ip, r7
 8002568:	433a      	orrs	r2, r7
 800256a:	e76e      	b.n	800244a <HAL_GPIO_Init+0x102>
 800256c:	f04f 0c05 	mov.w	ip, #5
 8002570:	fa0c f707 	lsl.w	r7, ip, r7
 8002574:	433a      	orrs	r2, r7
 8002576:	e768      	b.n	800244a <HAL_GPIO_Init+0x102>
 8002578:	f04f 0c06 	mov.w	ip, #6
 800257c:	fa0c f707 	lsl.w	r7, ip, r7
 8002580:	433a      	orrs	r2, r7
 8002582:	e762      	b.n	800244a <HAL_GPIO_Init+0x102>
 8002584:	f04f 0c08 	mov.w	ip, #8
 8002588:	fa0c f707 	lsl.w	r7, ip, r7
 800258c:	433a      	orrs	r2, r7
 800258e:	e75c      	b.n	800244a <HAL_GPIO_Init+0x102>
 8002590:	40020000 	.word	0x40020000
 8002594:	40020800 	.word	0x40020800
 8002598:	40013c00 	.word	0x40013c00
 800259c:	40023800 	.word	0x40023800
 80025a0:	40020c00 	.word	0x40020c00
 80025a4:	40021000 	.word	0x40021000
 80025a8:	40021400 	.word	0x40021400
 80025ac:	40021800 	.word	0x40021800
 80025b0:	40021c00 	.word	0x40021c00
 80025b4:	40022000 	.word	0x40022000
 80025b8:	40022400 	.word	0x40022400

080025bc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025bc:	b902      	cbnz	r2, 80025c0 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80025be:	0409      	lsls	r1, r1, #16
 80025c0:	6181      	str	r1, [r0, #24]
  }
}
 80025c2:	4770      	bx	lr

080025c4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80025c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80025c8:	4681      	mov	r9, r0
 80025ca:	460d      	mov	r5, r1
 80025cc:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025ce:	f8d9 3000 	ldr.w	r3, [r9]
 80025d2:	699c      	ldr	r4, [r3, #24]
 80025d4:	f014 0420 	ands.w	r4, r4, #32
 80025d8:	f040 80c4 	bne.w	8002764 <I2C_WaitOnSTOPFlagUntilTimeout+0x1a0>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t itflag   = hi2c->Instance->ISR;
 80025dc:	699a      	ldr	r2, [r3, #24]
  uint32_t error_code = 0;
  uint32_t tickstart = Tickstart;
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80025de:	f012 0210 	ands.w	r2, r2, #16
 80025e2:	f000 8087 	beq.w	80026f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x130>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025e6:	2210      	movs	r2, #16
  uint32_t tickstart = Tickstart;
 80025e8:	46b0      	mov	r8, r6
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025ea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80025ec:	1c68      	adds	r0, r5, #1
 80025ee:	d001      	beq.n	80025f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x30>
 80025f0:	e040      	b.n	8002674 <I2C_WaitOnSTOPFlagUntilTimeout+0xb0>
 80025f2:	b92c      	cbnz	r4, 8002600 <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>
 80025f4:	699a      	ldr	r2, [r3, #24]
 80025f6:	0691      	lsls	r1, r2, #26
 80025f8:	d5fb      	bpl.n	80025f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80025fa:	b90c      	cbnz	r4, 8002600 <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025fc:	2220      	movs	r2, #32
 80025fe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002600:	6999      	ldr	r1, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002602:	f04f 0c06 	mov.w	ip, #6
 8002606:	200c      	movs	r0, #12
 8002608:	240d      	movs	r4, #13

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800260a:	f411 7f80 	tst.w	r1, #256	@ 0x100
  HAL_StatusTypeDef status = HAL_OK;
 800260e:	f04f 0707 	mov.w	r7, #7
 8002612:	f04f 0e05 	mov.w	lr, #5
    error_code |= HAL_I2C_ERROR_AF;
 8002616:	f04f 0204 	mov.w	r2, #4
    status = HAL_ERROR;
 800261a:	f04f 0801 	mov.w	r8, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800261e:	d076      	beq.n	800270e <I2C_WaitOnSTOPFlagUntilTimeout+0x14a>
  {
    error_code |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002620:	f44f 7280 	mov.w	r2, #256	@ 0x100

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002624:	0548      	lsls	r0, r1, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002626:	61da      	str	r2, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002628:	d47a      	bmi.n	8002720 <I2C_WaitOnSTOPFlagUntilTimeout+0x15c>

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800262a:	058a      	lsls	r2, r1, #22
 800262c:	f100 8098 	bmi.w	8002760 <I2C_WaitOnSTOPFlagUntilTimeout+0x19c>
 8002630:	4670      	mov	r0, lr
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002632:	699a      	ldr	r2, [r3, #24]
 8002634:	0791      	lsls	r1, r2, #30
 8002636:	d501      	bpl.n	800263c <I2C_WaitOnSTOPFlagUntilTimeout+0x78>
    hi2c->Instance->TXDR = 0x00U;
 8002638:	2200      	movs	r2, #0
 800263a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800263c:	699a      	ldr	r2, [r3, #24]
 800263e:	07d2      	lsls	r2, r2, #31
 8002640:	d403      	bmi.n	800264a <I2C_WaitOnSTOPFlagUntilTimeout+0x86>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002642:	699a      	ldr	r2, [r3, #24]
 8002644:	f042 0201 	orr.w	r2, r2, #1
 8002648:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800264a:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
    hi2c->State = HAL_I2C_STATE_READY;
 800264c:	2420      	movs	r4, #32
    I2C_RESET_CR2(hi2c);
 800264e:	4d48      	ldr	r5, [pc, #288]	@ (8002770 <I2C_WaitOnSTOPFlagUntilTimeout+0x1ac>)
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002650:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 8002652:	402a      	ands	r2, r5
 8002654:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 8002656:	f8d9 3044 	ldr.w	r3, [r9, #68]	@ 0x44
 800265a:	4303      	orrs	r3, r0
 800265c:	f8c9 3044 	str.w	r3, [r9, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002660:	f889 4041 	strb.w	r4, [r9, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002664:	f889 1042 	strb.w	r1, [r9, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002668:	2300      	movs	r3, #0
      return HAL_ERROR;
 800266a:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 800266c:	f889 3040 	strb.w	r3, [r9, #64]	@ 0x40
}
 8002670:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002674:	699a      	ldr	r2, [r3, #24]
 8002676:	0692      	lsls	r2, r2, #26
 8002678:	d4bf      	bmi.n	80025fa <I2C_WaitOnSTOPFlagUntilTimeout+0x36>
 800267a:	2c00      	cmp	r4, #0
 800267c:	d1c0      	bne.n	8002600 <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800267e:	f7ff f9cd 	bl	8001a1c <HAL_GetTick>
 8002682:	eba0 0008 	sub.w	r0, r0, r8
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002686:	f8d9 3000 	ldr.w	r3, [r9]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800268a:	4285      	cmp	r5, r0
 800268c:	d301      	bcc.n	8002692 <I2C_WaitOnSTOPFlagUntilTimeout+0xce>
 800268e:	2d00      	cmp	r5, #0
 8002690:	d1f0      	bne.n	8002674 <I2C_WaitOnSTOPFlagUntilTimeout+0xb0>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002692:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8002694:	f899 2042 	ldrb.w	r2, [r9, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002698:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 800269a:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800269c:	0409      	lsls	r1, r1, #16
 800269e:	d50f      	bpl.n	80026c0 <I2C_WaitOnSTOPFlagUntilTimeout+0xfc>
              (tmp1 != I2C_CR2_STOP) && \
 80026a0:	0447      	lsls	r7, r0, #17
 80026a2:	d40d      	bmi.n	80026c0 <I2C_WaitOnSTOPFlagUntilTimeout+0xfc>
 80026a4:	2a20      	cmp	r2, #32
 80026a6:	d00b      	beq.n	80026c0 <I2C_WaitOnSTOPFlagUntilTimeout+0xfc>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80026ae:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 80026b0:	f7ff f9b4 	bl	8001a1c <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026b4:	f8d9 3000 	ldr.w	r3, [r9]
            tickstart = HAL_GetTick();
 80026b8:	4680      	mov	r8, r0
 80026ba:	e001      	b.n	80026c0 <I2C_WaitOnSTOPFlagUntilTimeout+0xfc>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026bc:	f8d9 3000 	ldr.w	r3, [r9]
 80026c0:	699f      	ldr	r7, [r3, #24]
 80026c2:	f017 0720 	ands.w	r7, r7, #32
 80026c6:	d191      	bne.n	80025ec <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80026c8:	f7ff f9a8 	bl	8001a1c <HAL_GetTick>
 80026cc:	eba0 0008 	sub.w	r0, r0, r8
 80026d0:	2819      	cmp	r0, #25
 80026d2:	d9f3      	bls.n	80026bc <I2C_WaitOnSTOPFlagUntilTimeout+0xf8>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026d4:	f8d9 3044 	ldr.w	r3, [r9, #68]	@ 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80026d8:	2220      	movs	r2, #32
              status = HAL_ERROR;
 80026da:	2401      	movs	r4, #1
              __HAL_UNLOCK(hi2c);
 80026dc:	f889 7040 	strb.w	r7, [r9, #64]	@ 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026e0:	4313      	orrs	r3, r2
 80026e2:	f8c9 3044 	str.w	r3, [r9, #68]	@ 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80026e6:	f889 2041 	strb.w	r2, [r9, #65]	@ 0x41
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026ea:	f8d9 3000 	ldr.w	r3, [r9]
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ee:	f889 7042 	strb.w	r7, [r9, #66]	@ 0x42
              status = HAL_ERROR;
 80026f2:	e7e5      	b.n	80026c0 <I2C_WaitOnSTOPFlagUntilTimeout+0xfc>
  itflag = hi2c->Instance->ISR;
 80026f4:	6999      	ldr	r1, [r3, #24]
 80026f6:	f04f 0c02 	mov.w	ip, #2
 80026fa:	2008      	movs	r0, #8
 80026fc:	2409      	movs	r4, #9
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80026fe:	f411 7f80 	tst.w	r1, #256	@ 0x100
 8002702:	f04f 0703 	mov.w	r7, #3
 8002706:	f04f 0e01 	mov.w	lr, #1
  HAL_StatusTypeDef status = HAL_OK;
 800270a:	4690      	mov	r8, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800270c:	d188      	bne.n	8002620 <I2C_WaitOnSTOPFlagUntilTimeout+0x5c>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800270e:	054f      	lsls	r7, r1, #21
 8002710:	d407      	bmi.n	8002722 <I2C_WaitOnSTOPFlagUntilTimeout+0x15e>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002712:	0588      	lsls	r0, r1, #22
 8002714:	d50d      	bpl.n	8002732 <I2C_WaitOnSTOPFlagUntilTimeout+0x16e>
 8002716:	4660      	mov	r0, ip
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002718:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800271c:	61da      	str	r2, [r3, #28]
  if (status != HAL_OK)
 800271e:	e788      	b.n	8002632 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002720:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002722:	f44f 6280 	mov.w	r2, #1024	@ 0x400
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002726:	058c      	lsls	r4, r1, #22
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002728:	61da      	str	r2, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800272a:	d582      	bpl.n	8002632 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    error_code |= HAL_I2C_ERROR_ARLO;
 800272c:	f040 0002 	orr.w	r0, r0, #2
 8002730:	e7f2      	b.n	8002718 <I2C_WaitOnSTOPFlagUntilTimeout+0x154>
  if (status != HAL_OK)
 8002732:	f1b8 0f00 	cmp.w	r8, #0
 8002736:	d118      	bne.n	800276a <I2C_WaitOnSTOPFlagUntilTimeout+0x1a6>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002738:	f7ff f970 	bl	8001a1c <HAL_GetTick>
 800273c:	1b80      	subs	r0, r0, r6
 800273e:	42a8      	cmp	r0, r5
 8002740:	d802      	bhi.n	8002748 <I2C_WaitOnSTOPFlagUntilTimeout+0x184>
 8002742:	2d00      	cmp	r5, #0
 8002744:	f47f af43 	bne.w	80025ce <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002748:	f8d9 3044 	ldr.w	r3, [r9, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800274c:	2120      	movs	r1, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800274e:	2200      	movs	r2, #0
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002750:	430b      	orrs	r3, r1
 8002752:	f8c9 3044 	str.w	r3, [r9, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002756:	f889 1041 	strb.w	r1, [r9, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800275a:	f889 2042 	strb.w	r2, [r9, #66]	@ 0x42
      return HAL_ERROR;
 800275e:	e783      	b.n	8002668 <I2C_WaitOnSTOPFlagUntilTimeout+0xa4>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002760:	4638      	mov	r0, r7
 8002762:	e7d9      	b.n	8002718 <I2C_WaitOnSTOPFlagUntilTimeout+0x154>
  return HAL_OK;
 8002764:	2000      	movs	r0, #0
}
 8002766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800276a:	4610      	mov	r0, r2
 800276c:	e761      	b.n	8002632 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
 800276e:	bf00      	nop
 8002770:	fe00e800 	.word	0xfe00e800

08002774 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002774:	2800      	cmp	r0, #0
 8002776:	d04e      	beq.n	8002816 <HAL_I2C_Init+0xa2>
{
 8002778:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800277a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800277e:	4604      	mov	r4, r0
 8002780:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002784:	2b00      	cmp	r3, #0
 8002786:	d041      	beq.n	800280c <HAL_I2C_Init+0x98>
  __HAL_I2C_DISABLE(hi2c);
 8002788:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800278a:	2124      	movs	r1, #36	@ 0x24
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800278c:	6862      	ldr	r2, [r4, #4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800278e:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8002792:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002794:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002798:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 800279a:	f021 0101 	bic.w	r1, r1, #1
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800279e:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
 80027a0:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80027a2:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80027a4:	689a      	ldr	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80027a6:	68a1      	ldr	r1, [r4, #8]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80027a8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80027ac:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027ae:	d029      	beq.n	8002804 <HAL_I2C_Init+0x90>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80027b0:	f441 4104 	orr.w	r1, r1, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80027b4:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80027b6:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80027b8:	d102      	bne.n	80027c0 <HAL_I2C_Init+0x4c>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80027ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80027be:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80027c0:	6858      	ldr	r0, [r3, #4]
  hi2c->State = HAL_I2C_STATE_READY;
 80027c2:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80027c6:	4915      	ldr	r1, [pc, #84]	@ (800281c <HAL_I2C_Init+0xa8>)
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027c8:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80027ca:	4301      	orrs	r1, r0
 80027cc:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80027ce:	68d9      	ldr	r1, [r3, #12]
 80027d0:	f421 4100 	bic.w	r1, r1, #32768	@ 0x8000
 80027d4:	60d9      	str	r1, [r3, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
 80027d6:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027da:	4302      	orrs	r2, r0
 80027dc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80027e0:	e9d4 1007 	ldrd	r1, r0, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027e4:	60da      	str	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027e6:	2200      	movs	r2, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80027e8:	4301      	orrs	r1, r0
  return HAL_OK;
 80027ea:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80027ec:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80027ee:	6819      	ldr	r1, [r3, #0]
 80027f0:	f041 0101 	orr.w	r1, r1, #1
 80027f4:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027f6:	6462      	str	r2, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80027f8:	f884 c041 	strb.w	ip, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80027fc:	6322      	str	r2, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027fe:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
}
 8002802:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002804:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8002808:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800280a:	e7d9      	b.n	80027c0 <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
 800280c:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8002810:	f7fe faaa 	bl	8000d68 <HAL_I2C_MspInit>
 8002814:	e7b8      	b.n	8002788 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 8002816:	2001      	movs	r0, #1
}
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	02008000 	.word	0x02008000

08002820 <HAL_I2C_Master_Transmit>:
{
 8002820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002824:	461c      	mov	r4, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002826:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 800282a:	9d08      	ldr	r5, [sp, #32]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800282c:	2b20      	cmp	r3, #32
 800282e:	f040 8095 	bne.w	800295c <HAL_I2C_Master_Transmit+0x13c>
    __HAL_LOCK(hi2c);
 8002832:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8002836:	4680      	mov	r8, r0
 8002838:	2b01      	cmp	r3, #1
 800283a:	f000 808f 	beq.w	800295c <HAL_I2C_Master_Transmit+0x13c>
 800283e:	2301      	movs	r3, #1
 8002840:	460f      	mov	r7, r1
 8002842:	4691      	mov	r9, r2
 8002844:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8002848:	f7ff f8e8 	bl	8001a1c <HAL_GetTick>
 800284c:	4606      	mov	r6, r0
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
 800284e:	e005      	b.n	800285c <HAL_I2C_Master_Transmit+0x3c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002850:	f7ff f8e4 	bl	8001a1c <HAL_GetTick>
 8002854:	1b83      	subs	r3, r0, r6
 8002856:	2b19      	cmp	r3, #25
 8002858:	f200 8083 	bhi.w	8002962 <HAL_I2C_Master_Transmit+0x142>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800285c:	f8d8 3000 	ldr.w	r3, [r8]
 8002860:	6998      	ldr	r0, [r3, #24]
 8002862:	f410 4000 	ands.w	r0, r0, #32768	@ 0x8000
 8002866:	d1f3      	bne.n	8002850 <HAL_I2C_Master_Transmit+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002868:	2221      	movs	r2, #33	@ 0x21
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800286a:	f3c7 0709 	ubfx	r7, r7, #0, #10
    hi2c->pBuffPtr  = pData;
 800286e:	f8c8 9024 	str.w	r9, [r8, #36]	@ 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002872:	f888 2041 	strb.w	r2, [r8, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002876:	2210      	movs	r2, #16
    hi2c->XferISR   = NULL;
 8002878:	f8c8 0034 	str.w	r0, [r8, #52]	@ 0x34
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800287c:	f888 2042 	strb.w	r2, [r8, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002880:	f8c8 0044 	str.w	r0, [r8, #68]	@ 0x44
    hi2c->XferCount = Size;
 8002884:	f8a8 402a 	strh.w	r4, [r8, #42]	@ 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002888:	f8b8 202a 	ldrh.w	r2, [r8, #42]	@ 0x2a
 800288c:	b292      	uxth	r2, r2
 800288e:	2aff      	cmp	r2, #255	@ 0xff
 8002890:	f200 80b7 	bhi.w	8002a02 <HAL_I2C_Master_Transmit+0x1e2>
      hi2c->XferSize = hi2c->XferCount;
 8002894:	f8b8 202a 	ldrh.w	r2, [r8, #42]	@ 0x2a
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002898:	48b0      	ldr	r0, [pc, #704]	@ (8002b5c <HAL_I2C_Master_Transmit+0x33c>)
      hi2c->XferSize = hi2c->XferCount;
 800289a:	b292      	uxth	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, \
 800289c:	6859      	ldr	r1, [r3, #4]
      hi2c->XferSize = hi2c->XferCount;
 800289e:	f8a8 2028 	strh.w	r2, [r8, #40]	@ 0x28
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80028a2:	b2d2      	uxtb	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, \
 80028a4:	4001      	ands	r1, r0
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028a6:	ea47 4202 	orr.w	r2, r7, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 80028aa:	430a      	orrs	r2, r1
 80028ac:	49ac      	ldr	r1, [pc, #688]	@ (8002b60 <HAL_I2C_Master_Transmit+0x340>)
 80028ae:	4311      	orrs	r1, r2
 80028b0:	6059      	str	r1, [r3, #4]
    while (hi2c->XferCount > 0U)
 80028b2:	f8b8 202a 	ldrh.w	r2, [r8, #42]	@ 0x2a
 80028b6:	b292      	uxth	r2, r2
 80028b8:	2a00      	cmp	r2, #0
 80028ba:	f000 80b2 	beq.w	8002a22 <HAL_I2C_Master_Transmit+0x202>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80028be:	699c      	ldr	r4, [r3, #24]
 80028c0:	f014 0402 	ands.w	r4, r4, #2
 80028c4:	f040 80f6 	bne.w	8002ab4 <HAL_I2C_Master_Transmit+0x294>
  uint32_t itflag   = hi2c->Instance->ISR;
 80028c8:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80028ca:	f012 0210 	ands.w	r2, r2, #16
 80028ce:	f000 80c7 	beq.w	8002a60 <HAL_I2C_Master_Transmit+0x240>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028d2:	2210      	movs	r2, #16
  uint32_t tickstart = Tickstart;
 80028d4:	46b1      	mov	r9, r6
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028d6:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80028d8:	1c68      	adds	r0, r5, #1
 80028da:	d001      	beq.n	80028e0 <HAL_I2C_Master_Transmit+0xc0>
 80028dc:	e051      	b.n	8002982 <HAL_I2C_Master_Transmit+0x162>
 80028de:	b92c      	cbnz	r4, 80028ec <HAL_I2C_Master_Transmit+0xcc>
 80028e0:	699a      	ldr	r2, [r3, #24]
 80028e2:	0691      	lsls	r1, r2, #26
 80028e4:	d5fb      	bpl.n	80028de <HAL_I2C_Master_Transmit+0xbe>
    if (status == HAL_OK)
 80028e6:	b90c      	cbnz	r4, 80028ec <HAL_I2C_Master_Transmit+0xcc>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028e8:	2220      	movs	r2, #32
 80028ea:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80028ec:	f04f 0e06 	mov.w	lr, #6
 80028f0:	200c      	movs	r0, #12
 80028f2:	240d      	movs	r4, #13
 80028f4:	f04f 0c07 	mov.w	ip, #7
 80028f8:	f04f 0905 	mov.w	r9, #5
    error_code |= HAL_I2C_ERROR_AF;
 80028fc:	2204      	movs	r2, #4
    status = HAL_ERROR;
 80028fe:	f04f 0a01 	mov.w	sl, #1
  itflag = hi2c->Instance->ISR;
 8002902:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002904:	f411 7f80 	tst.w	r1, #256	@ 0x100
 8002908:	f000 80a1 	beq.w	8002a4e <HAL_I2C_Master_Transmit+0x22e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800290c:	f44f 7280 	mov.w	r2, #256	@ 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002910:	054e      	lsls	r6, r1, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002912:	61da      	str	r2, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002914:	f100 80ae 	bmi.w	8002a74 <HAL_I2C_Master_Transmit+0x254>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002918:	058d      	lsls	r5, r1, #22
 800291a:	f100 80fc 	bmi.w	8002b16 <HAL_I2C_Master_Transmit+0x2f6>
 800291e:	4648      	mov	r0, r9
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002920:	699a      	ldr	r2, [r3, #24]
 8002922:	0796      	lsls	r6, r2, #30
 8002924:	d501      	bpl.n	800292a <HAL_I2C_Master_Transmit+0x10a>
    hi2c->Instance->TXDR = 0x00U;
 8002926:	2200      	movs	r2, #0
 8002928:	629a      	str	r2, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800292a:	699a      	ldr	r2, [r3, #24]
 800292c:	07d5      	lsls	r5, r2, #31
 800292e:	d403      	bmi.n	8002938 <HAL_I2C_Master_Transmit+0x118>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002930:	699a      	ldr	r2, [r3, #24]
 8002932:	f042 0201 	orr.w	r2, r2, #1
 8002936:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
 8002938:	685a      	ldr	r2, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800293a:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 800293c:	4d89      	ldr	r5, [pc, #548]	@ (8002b64 <HAL_I2C_Master_Transmit+0x344>)
    hi2c->State = HAL_I2C_STATE_READY;
 800293e:	2420      	movs	r4, #32
    I2C_RESET_CR2(hi2c);
 8002940:	402a      	ands	r2, r5
 8002942:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 8002944:	f8d8 3044 	ldr.w	r3, [r8, #68]	@ 0x44
    __HAL_UNLOCK(hi2c);
 8002948:	f888 1040 	strb.w	r1, [r8, #64]	@ 0x40
    hi2c->ErrorCode |= error_code;
 800294c:	4303      	orrs	r3, r0
 800294e:	f8c8 3044 	str.w	r3, [r8, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002952:	f888 4041 	strb.w	r4, [r8, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002956:	f888 1042 	strb.w	r1, [r8, #66]	@ 0x42
  return status;
 800295a:	e00f      	b.n	800297c <HAL_I2C_Master_Transmit+0x15c>
    __HAL_LOCK(hi2c);
 800295c:	2002      	movs	r0, #2
}
 800295e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002962:	f8d8 3044 	ldr.w	r3, [r8, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002966:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002968:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800296a:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800296c:	f888 2040 	strb.w	r2, [r8, #64]	@ 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002970:	f8c8 3044 	str.w	r3, [r8, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002974:	f888 1041 	strb.w	r1, [r8, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002978:	f888 2042 	strb.w	r2, [r8, #66]	@ 0x42
      return HAL_ERROR;
 800297c:	2001      	movs	r0, #1
}
 800297e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002982:	699a      	ldr	r2, [r3, #24]
 8002984:	0692      	lsls	r2, r2, #26
 8002986:	d4ae      	bmi.n	80028e6 <HAL_I2C_Master_Transmit+0xc6>
 8002988:	2c00      	cmp	r4, #0
 800298a:	d1af      	bne.n	80028ec <HAL_I2C_Master_Transmit+0xcc>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800298c:	f7ff f846 	bl	8001a1c <HAL_GetTick>
 8002990:	eba0 0009 	sub.w	r0, r0, r9
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002994:	f8d8 3000 	ldr.w	r3, [r8]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002998:	4285      	cmp	r5, r0
 800299a:	d301      	bcc.n	80029a0 <HAL_I2C_Master_Transmit+0x180>
 800299c:	2d00      	cmp	r5, #0
 800299e:	d1f0      	bne.n	8002982 <HAL_I2C_Master_Transmit+0x162>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80029a0:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 80029a2:	f898 2042 	ldrb.w	r2, [r8, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80029a6:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 80029a8:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80029aa:	0409      	lsls	r1, r1, #16
 80029ac:	d50f      	bpl.n	80029ce <HAL_I2C_Master_Transmit+0x1ae>
              (tmp1 != I2C_CR2_STOP) && \
 80029ae:	0441      	lsls	r1, r0, #17
 80029b0:	d40d      	bmi.n	80029ce <HAL_I2C_Master_Transmit+0x1ae>
 80029b2:	2a20      	cmp	r2, #32
 80029b4:	d00b      	beq.n	80029ce <HAL_I2C_Master_Transmit+0x1ae>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80029bc:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 80029be:	f7ff f82d 	bl	8001a1c <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029c2:	f8d8 3000 	ldr.w	r3, [r8]
            tickstart = HAL_GetTick();
 80029c6:	4681      	mov	r9, r0
 80029c8:	e001      	b.n	80029ce <HAL_I2C_Master_Transmit+0x1ae>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029ca:	f8d8 3000 	ldr.w	r3, [r8]
 80029ce:	699a      	ldr	r2, [r3, #24]
 80029d0:	f012 0a20 	ands.w	sl, r2, #32
 80029d4:	d180      	bne.n	80028d8 <HAL_I2C_Master_Transmit+0xb8>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80029d6:	f7ff f821 	bl	8001a1c <HAL_GetTick>
 80029da:	eba0 0009 	sub.w	r0, r0, r9
 80029de:	2819      	cmp	r0, #25
 80029e0:	d9f3      	bls.n	80029ca <HAL_I2C_Master_Transmit+0x1aa>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029e2:	f8d8 2044 	ldr.w	r2, [r8, #68]	@ 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80029e6:	2120      	movs	r1, #32
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029e8:	f8d8 3000 	ldr.w	r3, [r8]
              status = HAL_ERROR;
 80029ec:	2401      	movs	r4, #1
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029ee:	430a      	orrs	r2, r1
              __HAL_UNLOCK(hi2c);
 80029f0:	f888 a040 	strb.w	sl, [r8, #64]	@ 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029f4:	f8c8 2044 	str.w	r2, [r8, #68]	@ 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80029f8:	f888 1041 	strb.w	r1, [r8, #65]	@ 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80029fc:	f888 a042 	strb.w	sl, [r8, #66]	@ 0x42
              status = HAL_ERROR;
 8002a00:	e7e5      	b.n	80029ce <HAL_I2C_Master_Transmit+0x1ae>
  MODIFY_REG(hi2c->Instance->CR2, \
 8002a02:	685a      	ldr	r2, [r3, #4]
 8002a04:	4955      	ldr	r1, [pc, #340]	@ (8002b5c <HAL_I2C_Master_Transmit+0x33c>)
 8002a06:	400a      	ands	r2, r1
 8002a08:	4957      	ldr	r1, [pc, #348]	@ (8002b68 <HAL_I2C_Master_Transmit+0x348>)
 8002a0a:	433a      	orrs	r2, r7
 8002a0c:	4311      	orrs	r1, r2
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a0e:	22ff      	movs	r2, #255	@ 0xff
 8002a10:	f8a8 2028 	strh.w	r2, [r8, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8002a14:	6059      	str	r1, [r3, #4]
    while (hi2c->XferCount > 0U)
 8002a16:	f8b8 202a 	ldrh.w	r2, [r8, #42]	@ 0x2a
 8002a1a:	b292      	uxth	r2, r2
 8002a1c:	2a00      	cmp	r2, #0
 8002a1e:	f47f af4e 	bne.w	80028be <HAL_I2C_Master_Transmit+0x9e>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a22:	4632      	mov	r2, r6
 8002a24:	4629      	mov	r1, r5
 8002a26:	4640      	mov	r0, r8
 8002a28:	f7ff fdcc 	bl	80025c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a2c:	2800      	cmp	r0, #0
 8002a2e:	d1a5      	bne.n	800297c <HAL_I2C_Master_Transmit+0x15c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a30:	f8d8 3000 	ldr.w	r3, [r8]
 8002a34:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 8002a36:	4c4b      	ldr	r4, [pc, #300]	@ (8002b64 <HAL_I2C_Master_Transmit+0x344>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a38:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	4022      	ands	r2, r4
 8002a3e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002a40:	f888 1041 	strb.w	r1, [r8, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8002a44:	f888 0040 	strb.w	r0, [r8, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a48:	f888 0042 	strb.w	r0, [r8, #66]	@ 0x42
    return HAL_OK;
 8002a4c:	e787      	b.n	800295e <HAL_I2C_Master_Transmit+0x13e>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002a4e:	054c      	lsls	r4, r1, #21
 8002a50:	d411      	bmi.n	8002a76 <HAL_I2C_Master_Transmit+0x256>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002a52:	0589      	lsls	r1, r1, #22
 8002a54:	d518      	bpl.n	8002a88 <HAL_I2C_Master_Transmit+0x268>
 8002a56:	4670      	mov	r0, lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a5c:	61da      	str	r2, [r3, #28]
  if (status != HAL_OK)
 8002a5e:	e75f      	b.n	8002920 <HAL_I2C_Master_Transmit+0x100>
 8002a60:	f04f 0e02 	mov.w	lr, #2
 8002a64:	2008      	movs	r0, #8
 8002a66:	2409      	movs	r4, #9
 8002a68:	f04f 0c03 	mov.w	ip, #3
 8002a6c:	f04f 0901 	mov.w	r9, #1
  HAL_StatusTypeDef status = HAL_OK;
 8002a70:	4692      	mov	sl, r2
 8002a72:	e746      	b.n	8002902 <HAL_I2C_Master_Transmit+0xe2>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002a74:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002a76:	f44f 6280 	mov.w	r2, #1024	@ 0x400
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002a7a:	058c      	lsls	r4, r1, #22
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002a7c:	61da      	str	r2, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002a7e:	f57f af4f 	bpl.w	8002920 <HAL_I2C_Master_Transmit+0x100>
    error_code |= HAL_I2C_ERROR_ARLO;
 8002a82:	f040 0002 	orr.w	r0, r0, #2
 8002a86:	e7e7      	b.n	8002a58 <HAL_I2C_Master_Transmit+0x238>
  if (status != HAL_OK)
 8002a88:	f1ba 0f00 	cmp.w	sl, #0
 8002a8c:	d154      	bne.n	8002b38 <HAL_I2C_Master_Transmit+0x318>
    if (Timeout != HAL_MAX_DELAY)
 8002a8e:	1c6c      	adds	r4, r5, #1
 8002a90:	f43f af15 	beq.w	80028be <HAL_I2C_Master_Transmit+0x9e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a94:	f7fe ffc2 	bl	8001a1c <HAL_GetTick>
 8002a98:	1b83      	subs	r3, r0, r6
 8002a9a:	429d      	cmp	r5, r3
 8002a9c:	f4ff af61 	bcc.w	8002962 <HAL_I2C_Master_Transmit+0x142>
 8002aa0:	2d00      	cmp	r5, #0
 8002aa2:	f43f af5e 	beq.w	8002962 <HAL_I2C_Master_Transmit+0x142>
 8002aa6:	f8d8 3000 	ldr.w	r3, [r8]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002aaa:	699c      	ldr	r4, [r3, #24]
 8002aac:	f014 0402 	ands.w	r4, r4, #2
 8002ab0:	f43f af0a 	beq.w	80028c8 <HAL_I2C_Master_Transmit+0xa8>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ab4:	f8d8 0024 	ldr.w	r0, [r8, #36]	@ 0x24
      hi2c->XferSize--;
 8002ab8:	f8b8 2028 	ldrh.w	r2, [r8, #40]	@ 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002abc:	f810 1b01 	ldrb.w	r1, [r0], #1
      hi2c->XferSize--;
 8002ac0:	3a01      	subs	r2, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ac2:	6299      	str	r1, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002ac4:	f8b8 102a 	ldrh.w	r1, [r8, #42]	@ 0x2a
      hi2c->XferSize--;
 8002ac8:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 8002aca:	f8c8 0024 	str.w	r0, [r8, #36]	@ 0x24
      hi2c->XferCount--;
 8002ace:	3901      	subs	r1, #1
      hi2c->XferSize--;
 8002ad0:	f8a8 2028 	strh.w	r2, [r8, #40]	@ 0x28
      hi2c->XferCount--;
 8002ad4:	b289      	uxth	r1, r1
 8002ad6:	f8a8 102a 	strh.w	r1, [r8, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ada:	f8b8 102a 	ldrh.w	r1, [r8, #42]	@ 0x2a
 8002ade:	b289      	uxth	r1, r1
 8002ae0:	2900      	cmp	r1, #0
 8002ae2:	f43f aee6 	beq.w	80028b2 <HAL_I2C_Master_Transmit+0x92>
 8002ae6:	2a00      	cmp	r2, #0
 8002ae8:	f47f aee3 	bne.w	80028b2 <HAL_I2C_Master_Transmit+0x92>
 8002aec:	1c68      	adds	r0, r5, #1
 8002aee:	d11f      	bne.n	8002b30 <HAL_I2C_Master_Transmit+0x310>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002af0:	699a      	ldr	r2, [r3, #24]
 8002af2:	0611      	lsls	r1, r2, #24
 8002af4:	d5fc      	bpl.n	8002af0 <HAL_I2C_Master_Transmit+0x2d0>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002af6:	f8b8 202a 	ldrh.w	r2, [r8, #42]	@ 0x2a
 8002afa:	b292      	uxth	r2, r2
 8002afc:	2aff      	cmp	r2, #255	@ 0xff
 8002afe:	d91d      	bls.n	8002b3c <HAL_I2C_Master_Transmit+0x31c>
  MODIFY_REG(hi2c->Instance->CR2, \
 8002b00:	685a      	ldr	r2, [r3, #4]
 8002b02:	491a      	ldr	r1, [pc, #104]	@ (8002b6c <HAL_I2C_Master_Transmit+0x34c>)
 8002b04:	400a      	ands	r2, r1
 8002b06:	491a      	ldr	r1, [pc, #104]	@ (8002b70 <HAL_I2C_Master_Transmit+0x350>)
 8002b08:	433a      	orrs	r2, r7
 8002b0a:	4311      	orrs	r1, r2
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b0c:	22ff      	movs	r2, #255	@ 0xff
 8002b0e:	f8a8 2028 	strh.w	r2, [r8, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8002b12:	6059      	str	r1, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002b14:	e6cd      	b.n	80028b2 <HAL_I2C_Master_Transmit+0x92>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002b16:	4660      	mov	r0, ip
 8002b18:	e79e      	b.n	8002a58 <HAL_I2C_Master_Transmit+0x238>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b1a:	f7fe ff7f 	bl	8001a1c <HAL_GetTick>
 8002b1e:	1b83      	subs	r3, r0, r6
 8002b20:	429d      	cmp	r5, r3
 8002b22:	f4ff af1e 	bcc.w	8002962 <HAL_I2C_Master_Transmit+0x142>
 8002b26:	2d00      	cmp	r5, #0
 8002b28:	f43f af1b 	beq.w	8002962 <HAL_I2C_Master_Transmit+0x142>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b2c:	f8d8 3000 	ldr.w	r3, [r8]
 8002b30:	699a      	ldr	r2, [r3, #24]
 8002b32:	0612      	lsls	r2, r2, #24
 8002b34:	d5f1      	bpl.n	8002b1a <HAL_I2C_Master_Transmit+0x2fa>
 8002b36:	e7de      	b.n	8002af6 <HAL_I2C_Master_Transmit+0x2d6>
 8002b38:	4610      	mov	r0, r2
 8002b3a:	e6f1      	b.n	8002920 <HAL_I2C_Master_Transmit+0x100>
          hi2c->XferSize = hi2c->XferCount;
 8002b3c:	f8b8 202a 	ldrh.w	r2, [r8, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8002b40:	480a      	ldr	r0, [pc, #40]	@ (8002b6c <HAL_I2C_Master_Transmit+0x34c>)
          hi2c->XferSize = hi2c->XferCount;
 8002b42:	b292      	uxth	r2, r2
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002b44:	b2d1      	uxtb	r1, r2
          hi2c->XferSize = hi2c->XferCount;
 8002b46:	f8a8 2028 	strh.w	r2, [r8, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8002b4a:	685a      	ldr	r2, [r3, #4]
 8002b4c:	4002      	ands	r2, r0
 8002b4e:	433a      	orrs	r2, r7
 8002b50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002b54:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8002b58:	605a      	str	r2, [r3, #4]
}
 8002b5a:	e6aa      	b.n	80028b2 <HAL_I2C_Master_Transmit+0x92>
 8002b5c:	fc009800 	.word	0xfc009800
 8002b60:	02002000 	.word	0x02002000
 8002b64:	fe00e800 	.word	0xfe00e800
 8002b68:	01ff2000 	.word	0x01ff2000
 8002b6c:	fc009c00 	.word	0xfc009c00
 8002b70:	01ff0000 	.word	0x01ff0000

08002b74 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b74:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8002b78:	2a20      	cmp	r2, #32
 8002b7a:	d123      	bne.n	8002bc4 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8002b7c:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b80:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8002b84:	4603      	mov	r3, r0
 8002b86:	2a01      	cmp	r2, #1
 8002b88:	d01c      	beq.n	8002bc4 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b8a:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b8c:	2024      	movs	r0, #36	@ 0x24
{
 8002b8e:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b90:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b94:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_DISABLE(hi2c);
 8002b98:	6810      	ldr	r0, [r2, #0]
 8002b9a:	f020 0001 	bic.w	r0, r0, #1
 8002b9e:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ba0:	6810      	ldr	r0, [r2, #0]
 8002ba2:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8002ba6:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ba8:	6810      	ldr	r0, [r2, #0]
 8002baa:	4301      	orrs	r1, r0

    return HAL_OK;
 8002bac:	4670      	mov	r0, lr
    hi2c->Instance->CR1 |= AnalogFilter;
 8002bae:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002bb0:	6811      	ldr	r1, [r2, #0]
 8002bb2:	f041 0101 	orr.w	r1, r1, #1
 8002bb6:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002bb8:	f883 c041 	strb.w	ip, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8002bbc:	f883 e040 	strb.w	lr, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002bc0:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 8002bc4:	2002      	movs	r0, #2
}
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bc8:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8002bcc:	2a20      	cmp	r2, #32
 8002bce:	d122      	bne.n	8002c16 <HAL_I2CEx_ConfigDigitalFilter+0x4e>
 8002bd0:	4603      	mov	r3, r0
{
 8002bd2:	b500      	push	{lr}
 8002bd4:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bd8:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8002bdc:	2a01      	cmp	r2, #1
 8002bde:	d01c      	beq.n	8002c1a <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002be0:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002be2:	2024      	movs	r0, #36	@ 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002be4:	f04f 0c00 	mov.w	ip, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002be8:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_DISABLE(hi2c);
 8002bec:	6810      	ldr	r0, [r2, #0]
 8002bee:	f020 0001 	bic.w	r0, r0, #1
 8002bf2:	6010      	str	r0, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 8002bf4:	6810      	ldr	r0, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8002bf6:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00
    tmpreg |= DigitalFilter << 8U;
 8002bfa:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    return HAL_OK;
 8002bfe:	4660      	mov	r0, ip
    hi2c->Instance->CR1 = tmpreg;
 8002c00:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002c02:	6811      	ldr	r1, [r2, #0]
 8002c04:	f041 0101 	orr.w	r1, r1, #1
 8002c08:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002c0a:	f883 e041 	strb.w	lr, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8002c0e:	f883 c040 	strb.w	ip, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002c12:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 8002c16:	2002      	movs	r0, #2
}
 8002c18:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002c1a:	2002      	movs	r0, #2
}
 8002c1c:	f85d fb04 	ldr.w	pc, [sp], #4

08002c20 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c20:	4b1a      	ldr	r3, [pc, #104]	@ (8002c8c <HAL_PWREx_EnableOverDrive+0x6c>)
 8002c22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c24:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
{
 8002c28:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c2a:	641a      	str	r2, [r3, #64]	@ 0x40
{
 8002c2c:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002c30:	4c17      	ldr	r4, [pc, #92]	@ (8002c90 <HAL_PWREx_EnableOverDrive+0x70>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c36:	9301      	str	r3, [sp, #4]
 8002c38:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002c3a:	6823      	ldr	r3, [r4, #0]
 8002c3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c40:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c42:	f7fe feeb 	bl	8001a1c <HAL_GetTick>
 8002c46:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c48:	e005      	b.n	8002c56 <HAL_PWREx_EnableOverDrive+0x36>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c4a:	f7fe fee7 	bl	8001a1c <HAL_GetTick>
 8002c4e:	1b40      	subs	r0, r0, r5
 8002c50:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8002c54:	d817      	bhi.n	8002c86 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c56:	6863      	ldr	r3, [r4, #4]
 8002c58:	03da      	lsls	r2, r3, #15
 8002c5a:	d5f6      	bpl.n	8002c4a <HAL_PWREx_EnableOverDrive+0x2a>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002c5c:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c5e:	4d0c      	ldr	r5, [pc, #48]	@ (8002c90 <HAL_PWREx_EnableOverDrive+0x70>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002c60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c64:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8002c66:	f7fe fed9 	bl	8001a1c <HAL_GetTick>
 8002c6a:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c6c:	e005      	b.n	8002c7a <HAL_PWREx_EnableOverDrive+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c6e:	f7fe fed5 	bl	8001a1c <HAL_GetTick>
 8002c72:	1b00      	subs	r0, r0, r4
 8002c74:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8002c78:	d805      	bhi.n	8002c86 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c7a:	686b      	ldr	r3, [r5, #4]
 8002c7c:	039b      	lsls	r3, r3, #14
 8002c7e:	d5f6      	bpl.n	8002c6e <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8002c80:	2000      	movs	r0, #0
}
 8002c82:	b003      	add	sp, #12
 8002c84:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 8002c86:	2003      	movs	r0, #3
}
 8002c88:	b003      	add	sp, #12
 8002c8a:	bd30      	pop	{r4, r5, pc}
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	40007000 	.word	0x40007000

08002c94 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c94:	2800      	cmp	r0, #0
 8002c96:	f000 81bd 	beq.w	8003014 <HAL_RCC_OscConfig+0x380>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c9a:	6803      	ldr	r3, [r0, #0]
{
 8002c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ca0:	07dd      	lsls	r5, r3, #31
{
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ca6:	d535      	bpl.n	8002d14 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ca8:	499a      	ldr	r1, [pc, #616]	@ (8002f14 <HAL_RCC_OscConfig+0x280>)
 8002caa:	688a      	ldr	r2, [r1, #8]
 8002cac:	f002 020c 	and.w	r2, r2, #12
 8002cb0:	2a04      	cmp	r2, #4
 8002cb2:	f000 80e0 	beq.w	8002e76 <HAL_RCC_OscConfig+0x1e2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cb6:	688a      	ldr	r2, [r1, #8]
 8002cb8:	f002 020c 	and.w	r2, r2, #12
 8002cbc:	2a08      	cmp	r2, #8
 8002cbe:	f000 80d6 	beq.w	8002e6e <HAL_RCC_OscConfig+0x1da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cc2:	6863      	ldr	r3, [r4, #4]
 8002cc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cc8:	d010      	beq.n	8002cec <HAL_RCC_OscConfig+0x58>
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f000 80fd 	beq.w	8002eca <HAL_RCC_OscConfig+0x236>
 8002cd0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002cd4:	4b8f      	ldr	r3, [pc, #572]	@ (8002f14 <HAL_RCC_OscConfig+0x280>)
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	f000 818c 	beq.w	8002ff4 <HAL_RCC_OscConfig+0x360>
 8002cdc:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002ce8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cea:	e004      	b.n	8002cf6 <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cec:	4a89      	ldr	r2, [pc, #548]	@ (8002f14 <HAL_RCC_OscConfig+0x280>)
 8002cee:	6813      	ldr	r3, [r2, #0]
 8002cf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cf4:	6013      	str	r3, [r2, #0]
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf6:	f7fe fe91 	bl	8001a1c <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cfa:	4e86      	ldr	r6, [pc, #536]	@ (8002f14 <HAL_RCC_OscConfig+0x280>)
        tickstart = HAL_GetTick();
 8002cfc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cfe:	e005      	b.n	8002d0c <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d00:	f7fe fe8c 	bl	8001a1c <HAL_GetTick>
 8002d04:	1b40      	subs	r0, r0, r5
 8002d06:	2864      	cmp	r0, #100	@ 0x64
 8002d08:	f200 80db 	bhi.w	8002ec2 <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d0c:	6833      	ldr	r3, [r6, #0]
 8002d0e:	039b      	lsls	r3, r3, #14
 8002d10:	d5f6      	bpl.n	8002d00 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d12:	6823      	ldr	r3, [r4, #0]
 8002d14:	079d      	lsls	r5, r3, #30
 8002d16:	d527      	bpl.n	8002d68 <HAL_RCC_OscConfig+0xd4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d18:	4a7e      	ldr	r2, [pc, #504]	@ (8002f14 <HAL_RCC_OscConfig+0x280>)
 8002d1a:	6891      	ldr	r1, [r2, #8]
 8002d1c:	f011 0f0c 	tst.w	r1, #12
 8002d20:	d07e      	beq.n	8002e20 <HAL_RCC_OscConfig+0x18c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d22:	6891      	ldr	r1, [r2, #8]
 8002d24:	f001 010c 	and.w	r1, r1, #12
 8002d28:	2908      	cmp	r1, #8
 8002d2a:	d076      	beq.n	8002e1a <HAL_RCC_OscConfig+0x186>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d2c:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d2e:	4d79      	ldr	r5, [pc, #484]	@ (8002f14 <HAL_RCC_OscConfig+0x280>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f000 8104 	beq.w	8002f3e <HAL_RCC_OscConfig+0x2aa>
        __HAL_RCC_HSI_ENABLE();
 8002d36:	682b      	ldr	r3, [r5, #0]
 8002d38:	f043 0301 	orr.w	r3, r3, #1
 8002d3c:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3e:	f7fe fe6d 	bl	8001a1c <HAL_GetTick>
 8002d42:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d44:	e005      	b.n	8002d52 <HAL_RCC_OscConfig+0xbe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d46:	f7fe fe69 	bl	8001a1c <HAL_GetTick>
 8002d4a:	1b80      	subs	r0, r0, r6
 8002d4c:	2802      	cmp	r0, #2
 8002d4e:	f200 80b8 	bhi.w	8002ec2 <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d52:	682b      	ldr	r3, [r5, #0]
 8002d54:	079f      	lsls	r7, r3, #30
 8002d56:	d5f6      	bpl.n	8002d46 <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d58:	682b      	ldr	r3, [r5, #0]
 8002d5a:	6922      	ldr	r2, [r4, #16]
 8002d5c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002d60:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002d64:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d66:	6823      	ldr	r3, [r4, #0]
 8002d68:	071a      	lsls	r2, r3, #28
 8002d6a:	d41f      	bmi.n	8002dac <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d6c:	075e      	lsls	r6, r3, #29
 8002d6e:	d534      	bpl.n	8002dda <HAL_RCC_OscConfig+0x146>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d70:	4b68      	ldr	r3, [pc, #416]	@ (8002f14 <HAL_RCC_OscConfig+0x280>)
 8002d72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d74:	00d5      	lsls	r5, r2, #3
 8002d76:	d56f      	bpl.n	8002e58 <HAL_RCC_OscConfig+0x1c4>
  FlagStatus pwrclkchanged = RESET;
 8002d78:	2500      	movs	r5, #0
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d7a:	4e67      	ldr	r6, [pc, #412]	@ (8002f18 <HAL_RCC_OscConfig+0x284>)
 8002d7c:	6833      	ldr	r3, [r6, #0]
 8002d7e:	05d8      	lsls	r0, r3, #23
 8002d80:	f140 808f 	bpl.w	8002ea2 <HAL_RCC_OscConfig+0x20e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d84:	68a3      	ldr	r3, [r4, #8]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	f000 80eb 	beq.w	8002f62 <HAL_RCC_OscConfig+0x2ce>
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f000 80b2 	beq.w	8002ef6 <HAL_RCC_OscConfig+0x262>
 8002d92:	2b05      	cmp	r3, #5
 8002d94:	4b5f      	ldr	r3, [pc, #380]	@ (8002f14 <HAL_RCC_OscConfig+0x280>)
 8002d96:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002d98:	f000 8134 	beq.w	8003004 <HAL_RCC_OscConfig+0x370>
 8002d9c:	f022 0201 	bic.w	r2, r2, #1
 8002da0:	671a      	str	r2, [r3, #112]	@ 0x70
 8002da2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002da4:	f022 0204 	bic.w	r2, r2, #4
 8002da8:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002daa:	e0df      	b.n	8002f6c <HAL_RCC_OscConfig+0x2d8>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002dac:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8002dae:	4d59      	ldr	r5, [pc, #356]	@ (8002f14 <HAL_RCC_OscConfig+0x280>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d040      	beq.n	8002e36 <HAL_RCC_OscConfig+0x1a2>
      __HAL_RCC_LSI_ENABLE();
 8002db4:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8002db6:	f043 0301 	orr.w	r3, r3, #1
 8002dba:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8002dbc:	f7fe fe2e 	bl	8001a1c <HAL_GetTick>
 8002dc0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dc2:	e004      	b.n	8002dce <HAL_RCC_OscConfig+0x13a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dc4:	f7fe fe2a 	bl	8001a1c <HAL_GetTick>
 8002dc8:	1b80      	subs	r0, r0, r6
 8002dca:	2802      	cmp	r0, #2
 8002dcc:	d879      	bhi.n	8002ec2 <HAL_RCC_OscConfig+0x22e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dce:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8002dd0:	079b      	lsls	r3, r3, #30
 8002dd2:	d5f7      	bpl.n	8002dc4 <HAL_RCC_OscConfig+0x130>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dd4:	6823      	ldr	r3, [r4, #0]
 8002dd6:	075e      	lsls	r6, r3, #29
 8002dd8:	d4ca      	bmi.n	8002d70 <HAL_RCC_OscConfig+0xdc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dda:	69a3      	ldr	r3, [r4, #24]
 8002ddc:	b1cb      	cbz	r3, 8002e12 <HAL_RCC_OscConfig+0x17e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dde:	4d4d      	ldr	r5, [pc, #308]	@ (8002f14 <HAL_RCC_OscConfig+0x280>)
 8002de0:	68aa      	ldr	r2, [r5, #8]
 8002de2:	f002 020c 	and.w	r2, r2, #12
 8002de6:	2a08      	cmp	r2, #8
 8002de8:	f000 80d3 	beq.w	8002f92 <HAL_RCC_OscConfig+0x2fe>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dec:	2b02      	cmp	r3, #2
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dee:	682b      	ldr	r3, [r5, #0]
 8002df0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002df4:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002df6:	f000 810f 	beq.w	8003018 <HAL_RCC_OscConfig+0x384>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfa:	f7fe fe0f 	bl	8001a1c <HAL_GetTick>
 8002dfe:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e00:	e004      	b.n	8002e0c <HAL_RCC_OscConfig+0x178>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e02:	f7fe fe0b 	bl	8001a1c <HAL_GetTick>
 8002e06:	1b00      	subs	r0, r0, r4
 8002e08:	2802      	cmp	r0, #2
 8002e0a:	d85a      	bhi.n	8002ec2 <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e0c:	682b      	ldr	r3, [r5, #0]
 8002e0e:	019b      	lsls	r3, r3, #6
 8002e10:	d4f7      	bmi.n	8002e02 <HAL_RCC_OscConfig+0x16e>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8002e12:	2000      	movs	r0, #0
}
 8002e14:	b002      	add	sp, #8
 8002e16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e1a:	6852      	ldr	r2, [r2, #4]
 8002e1c:	0251      	lsls	r1, r2, #9
 8002e1e:	d485      	bmi.n	8002d2c <HAL_RCC_OscConfig+0x98>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e20:	4a3c      	ldr	r2, [pc, #240]	@ (8002f14 <HAL_RCC_OscConfig+0x280>)
 8002e22:	6812      	ldr	r2, [r2, #0]
 8002e24:	0792      	lsls	r2, r2, #30
 8002e26:	d530      	bpl.n	8002e8a <HAL_RCC_OscConfig+0x1f6>
 8002e28:	68e2      	ldr	r2, [r4, #12]
 8002e2a:	2a01      	cmp	r2, #1
 8002e2c:	d02d      	beq.n	8002e8a <HAL_RCC_OscConfig+0x1f6>
    return HAL_ERROR;
 8002e2e:	2001      	movs	r0, #1
}
 8002e30:	b002      	add	sp, #8
 8002e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8002e36:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8002e38:	f023 0301 	bic.w	r3, r3, #1
 8002e3c:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8002e3e:	f7fe fded 	bl	8001a1c <HAL_GetTick>
 8002e42:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e44:	e004      	b.n	8002e50 <HAL_RCC_OscConfig+0x1bc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e46:	f7fe fde9 	bl	8001a1c <HAL_GetTick>
 8002e4a:	1b80      	subs	r0, r0, r6
 8002e4c:	2802      	cmp	r0, #2
 8002e4e:	d838      	bhi.n	8002ec2 <HAL_RCC_OscConfig+0x22e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e50:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8002e52:	079f      	lsls	r7, r3, #30
 8002e54:	d4f7      	bmi.n	8002e46 <HAL_RCC_OscConfig+0x1b2>
 8002e56:	e7bd      	b.n	8002dd4 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
      pwrclkchanged = SET;
 8002e5a:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e5c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002e60:	641a      	str	r2, [r3, #64]	@ 0x40
 8002e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e68:	9301      	str	r3, [sp, #4]
 8002e6a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002e6c:	e785      	b.n	8002d7a <HAL_RCC_OscConfig+0xe6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e6e:	684a      	ldr	r2, [r1, #4]
 8002e70:	0251      	lsls	r1, r2, #9
 8002e72:	f57f af26 	bpl.w	8002cc2 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e76:	4a27      	ldr	r2, [pc, #156]	@ (8002f14 <HAL_RCC_OscConfig+0x280>)
 8002e78:	6812      	ldr	r2, [r2, #0]
 8002e7a:	0392      	lsls	r2, r2, #14
 8002e7c:	f57f af4a 	bpl.w	8002d14 <HAL_RCC_OscConfig+0x80>
 8002e80:	6862      	ldr	r2, [r4, #4]
 8002e82:	2a00      	cmp	r2, #0
 8002e84:	f47f af46 	bne.w	8002d14 <HAL_RCC_OscConfig+0x80>
 8002e88:	e7d1      	b.n	8002e2e <HAL_RCC_OscConfig+0x19a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e8a:	4922      	ldr	r1, [pc, #136]	@ (8002f14 <HAL_RCC_OscConfig+0x280>)
 8002e8c:	6920      	ldr	r0, [r4, #16]
 8002e8e:	680a      	ldr	r2, [r1, #0]
 8002e90:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 8002e94:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8002e98:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e9a:	071a      	lsls	r2, r3, #28
 8002e9c:	f57f af66 	bpl.w	8002d6c <HAL_RCC_OscConfig+0xd8>
 8002ea0:	e784      	b.n	8002dac <HAL_RCC_OscConfig+0x118>
      PWR->CR1 |= PWR_CR1_DBP;
 8002ea2:	6833      	ldr	r3, [r6, #0]
 8002ea4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ea8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002eaa:	f7fe fdb7 	bl	8001a1c <HAL_GetTick>
 8002eae:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eb0:	6833      	ldr	r3, [r6, #0]
 8002eb2:	05d9      	lsls	r1, r3, #23
 8002eb4:	f53f af66 	bmi.w	8002d84 <HAL_RCC_OscConfig+0xf0>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eb8:	f7fe fdb0 	bl	8001a1c <HAL_GetTick>
 8002ebc:	1bc0      	subs	r0, r0, r7
 8002ebe:	2864      	cmp	r0, #100	@ 0x64
 8002ec0:	d9f6      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x21c>
            return HAL_TIMEOUT;
 8002ec2:	2003      	movs	r0, #3
}
 8002ec4:	b002      	add	sp, #8
 8002ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eca:	4d12      	ldr	r5, [pc, #72]	@ (8002f14 <HAL_RCC_OscConfig+0x280>)
 8002ecc:	682b      	ldr	r3, [r5, #0]
 8002ece:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ed2:	602b      	str	r3, [r5, #0]
 8002ed4:	682b      	ldr	r3, [r5, #0]
 8002ed6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002eda:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002edc:	f7fe fd9e 	bl	8001a1c <HAL_GetTick>
 8002ee0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ee2:	e004      	b.n	8002eee <HAL_RCC_OscConfig+0x25a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ee4:	f7fe fd9a 	bl	8001a1c <HAL_GetTick>
 8002ee8:	1b80      	subs	r0, r0, r6
 8002eea:	2864      	cmp	r0, #100	@ 0x64
 8002eec:	d8e9      	bhi.n	8002ec2 <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eee:	682b      	ldr	r3, [r5, #0]
 8002ef0:	039f      	lsls	r7, r3, #14
 8002ef2:	d4f7      	bmi.n	8002ee4 <HAL_RCC_OscConfig+0x250>
 8002ef4:	e70d      	b.n	8002d12 <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ef6:	4e07      	ldr	r6, [pc, #28]	@ (8002f14 <HAL_RCC_OscConfig+0x280>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ef8:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002efc:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8002efe:	f023 0301 	bic.w	r3, r3, #1
 8002f02:	6733      	str	r3, [r6, #112]	@ 0x70
 8002f04:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8002f06:	f023 0304 	bic.w	r3, r3, #4
 8002f0a:	6733      	str	r3, [r6, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8002f0c:	f7fe fd86 	bl	8001a1c <HAL_GetTick>
 8002f10:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0x292>
 8002f14:	40023800 	.word	0x40023800
 8002f18:	40007000 	.word	0x40007000
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f1c:	f7fe fd7e 	bl	8001a1c <HAL_GetTick>
 8002f20:	1bc0      	subs	r0, r0, r7
 8002f22:	4540      	cmp	r0, r8
 8002f24:	d8cd      	bhi.n	8002ec2 <HAL_RCC_OscConfig+0x22e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f26:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8002f28:	079b      	lsls	r3, r3, #30
 8002f2a:	d4f7      	bmi.n	8002f1c <HAL_RCC_OscConfig+0x288>
    if (pwrclkchanged == SET)
 8002f2c:	2d00      	cmp	r5, #0
 8002f2e:	f43f af54 	beq.w	8002dda <HAL_RCC_OscConfig+0x146>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f32:	4a52      	ldr	r2, [pc, #328]	@ (800307c <HAL_RCC_OscConfig+0x3e8>)
 8002f34:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8002f36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f3c:	e74d      	b.n	8002dda <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_HSI_DISABLE();
 8002f3e:	682b      	ldr	r3, [r5, #0]
 8002f40:	f023 0301 	bic.w	r3, r3, #1
 8002f44:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002f46:	f7fe fd69 	bl	8001a1c <HAL_GetTick>
 8002f4a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f4c:	e004      	b.n	8002f58 <HAL_RCC_OscConfig+0x2c4>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f4e:	f7fe fd65 	bl	8001a1c <HAL_GetTick>
 8002f52:	1b80      	subs	r0, r0, r6
 8002f54:	2802      	cmp	r0, #2
 8002f56:	d8b4      	bhi.n	8002ec2 <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f58:	682b      	ldr	r3, [r5, #0]
 8002f5a:	0799      	lsls	r1, r3, #30
 8002f5c:	d4f7      	bmi.n	8002f4e <HAL_RCC_OscConfig+0x2ba>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f5e:	6823      	ldr	r3, [r4, #0]
 8002f60:	e702      	b.n	8002d68 <HAL_RCC_OscConfig+0xd4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f62:	4a46      	ldr	r2, [pc, #280]	@ (800307c <HAL_RCC_OscConfig+0x3e8>)
 8002f64:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8002f66:	f043 0301 	orr.w	r3, r3, #1
 8002f6a:	6713      	str	r3, [r2, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8002f6c:	f7fe fd56 	bl	8001a1c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f70:	4f42      	ldr	r7, [pc, #264]	@ (800307c <HAL_RCC_OscConfig+0x3e8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f72:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8002f76:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f78:	e004      	b.n	8002f84 <HAL_RCC_OscConfig+0x2f0>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f7a:	f7fe fd4f 	bl	8001a1c <HAL_GetTick>
 8002f7e:	1b80      	subs	r0, r0, r6
 8002f80:	4540      	cmp	r0, r8
 8002f82:	d89e      	bhi.n	8002ec2 <HAL_RCC_OscConfig+0x22e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f84:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f86:	079a      	lsls	r2, r3, #30
 8002f88:	d5f7      	bpl.n	8002f7a <HAL_RCC_OscConfig+0x2e6>
    if (pwrclkchanged == SET)
 8002f8a:	2d00      	cmp	r5, #0
 8002f8c:	f43f af25 	beq.w	8002dda <HAL_RCC_OscConfig+0x146>
 8002f90:	e7cf      	b.n	8002f32 <HAL_RCC_OscConfig+0x29e>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f92:	2b01      	cmp	r3, #1
      pll_config = RCC->PLLCFGR;
 8002f94:	686a      	ldr	r2, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f96:	f43f af4a 	beq.w	8002e2e <HAL_RCC_OscConfig+0x19a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f9a:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f9e:	69e1      	ldr	r1, [r4, #28]
 8002fa0:	428b      	cmp	r3, r1
 8002fa2:	f47f af44 	bne.w	8002e2e <HAL_RCC_OscConfig+0x19a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fa6:	f002 033f 	and.w	r3, r2, #63	@ 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002faa:	6a21      	ldr	r1, [r4, #32]
 8002fac:	428b      	cmp	r3, r1
 8002fae:	f47f af3e 	bne.w	8002e2e <HAL_RCC_OscConfig+0x19a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fb2:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002fb6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002fb8:	4013      	ands	r3, r2
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fba:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 8002fbe:	f47f af36 	bne.w	8002e2e <HAL_RCC_OscConfig+0x19a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002fc2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002fc4:	f402 3140 	and.w	r1, r2, #196608	@ 0x30000
 8002fc8:	085b      	lsrs	r3, r3, #1
 8002fca:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fcc:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 8002fd0:	f47f af2d 	bne.w	8002e2e <HAL_RCC_OscConfig+0x19a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fd4:	f002 6370 	and.w	r3, r2, #251658240	@ 0xf000000
 8002fd8:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002fda:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 8002fde:	f47f af26 	bne.w	8002e2e <HAL_RCC_OscConfig+0x19a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002fe2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002fe4:	f002 42e0 	and.w	r2, r2, #1879048192	@ 0x70000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fe8:	ebb2 7f03 	cmp.w	r2, r3, lsl #28
 8002fec:	bf14      	ite	ne
 8002fee:	2001      	movne	r0, #1
 8002ff0:	2000      	moveq	r0, #0
 8002ff2:	e70f      	b.n	8002e14 <HAL_RCC_OscConfig+0x180>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ff4:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002ff8:	601a      	str	r2, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003000:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003002:	e678      	b.n	8002cf6 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003004:	f042 0204 	orr.w	r2, r2, #4
 8003008:	671a      	str	r2, [r3, #112]	@ 0x70
 800300a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800300c:	f042 0201 	orr.w	r2, r2, #1
 8003010:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003012:	e7ab      	b.n	8002f6c <HAL_RCC_OscConfig+0x2d8>
    return HAL_ERROR;
 8003014:	2001      	movs	r0, #1
}
 8003016:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8003018:	f7fe fd00 	bl	8001a1c <HAL_GetTick>
 800301c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800301e:	e005      	b.n	800302c <HAL_RCC_OscConfig+0x398>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003020:	f7fe fcfc 	bl	8001a1c <HAL_GetTick>
 8003024:	1b80      	subs	r0, r0, r6
 8003026:	2802      	cmp	r0, #2
 8003028:	f63f af4b 	bhi.w	8002ec2 <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800302c:	682b      	ldr	r3, [r5, #0]
 800302e:	0199      	lsls	r1, r3, #6
 8003030:	d4f6      	bmi.n	8003020 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003032:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8003036:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003038:	430b      	orrs	r3, r1
 800303a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800303c:	4e0f      	ldr	r6, [pc, #60]	@ (800307c <HAL_RCC_OscConfig+0x3e8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800303e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003042:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	@ 0x28
 8003046:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800304a:	0852      	lsrs	r2, r2, #1
 800304c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8003050:	3a01      	subs	r2, #1
 8003052:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003056:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003058:	682b      	ldr	r3, [r5, #0]
 800305a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800305e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003060:	f7fe fcdc 	bl	8001a1c <HAL_GetTick>
 8003064:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003066:	e005      	b.n	8003074 <HAL_RCC_OscConfig+0x3e0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003068:	f7fe fcd8 	bl	8001a1c <HAL_GetTick>
 800306c:	1b00      	subs	r0, r0, r4
 800306e:	2802      	cmp	r0, #2
 8003070:	f63f af27 	bhi.w	8002ec2 <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003074:	6833      	ldr	r3, [r6, #0]
 8003076:	019a      	lsls	r2, r3, #6
 8003078:	d5f6      	bpl.n	8003068 <HAL_RCC_OscConfig+0x3d4>
 800307a:	e6ca      	b.n	8002e12 <HAL_RCC_OscConfig+0x17e>
 800307c:	40023800 	.word	0x40023800

08003080 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003080:	2800      	cmp	r0, #0
 8003082:	f000 80b3 	beq.w	80031ec <HAL_RCC_ClockConfig+0x16c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003086:	4a61      	ldr	r2, [pc, #388]	@ (800320c <HAL_RCC_ClockConfig+0x18c>)
 8003088:	6813      	ldr	r3, [r2, #0]
 800308a:	f003 030f 	and.w	r3, r3, #15
 800308e:	428b      	cmp	r3, r1
{
 8003090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003094:	4604      	mov	r4, r0
 8003096:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003098:	d20c      	bcs.n	80030b4 <HAL_RCC_ClockConfig+0x34>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800309a:	6813      	ldr	r3, [r2, #0]
 800309c:	f023 030f 	bic.w	r3, r3, #15
 80030a0:	430b      	orrs	r3, r1
 80030a2:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a4:	6813      	ldr	r3, [r2, #0]
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	428b      	cmp	r3, r1
 80030ac:	d002      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80030ae:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);

  return HAL_OK;
}
 80030b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030b4:	6823      	ldr	r3, [r4, #0]
 80030b6:	0798      	lsls	r0, r3, #30
 80030b8:	d514      	bpl.n	80030e4 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ba:	0759      	lsls	r1, r3, #29
 80030bc:	d504      	bpl.n	80030c8 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030be:	4954      	ldr	r1, [pc, #336]	@ (8003210 <HAL_RCC_ClockConfig+0x190>)
 80030c0:	688a      	ldr	r2, [r1, #8]
 80030c2:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 80030c6:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030c8:	071a      	lsls	r2, r3, #28
 80030ca:	d504      	bpl.n	80030d6 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030cc:	4950      	ldr	r1, [pc, #320]	@ (8003210 <HAL_RCC_ClockConfig+0x190>)
 80030ce:	688a      	ldr	r2, [r1, #8]
 80030d0:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 80030d4:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030d6:	494e      	ldr	r1, [pc, #312]	@ (8003210 <HAL_RCC_ClockConfig+0x190>)
 80030d8:	68a0      	ldr	r0, [r4, #8]
 80030da:	688a      	ldr	r2, [r1, #8]
 80030dc:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80030e0:	4302      	orrs	r2, r0
 80030e2:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030e4:	07df      	lsls	r7, r3, #31
 80030e6:	d520      	bpl.n	800312a <HAL_RCC_ClockConfig+0xaa>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030e8:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ea:	4b49      	ldr	r3, [pc, #292]	@ (8003210 <HAL_RCC_ClockConfig+0x190>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030ec:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ee:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030f0:	d07e      	beq.n	80031f0 <HAL_RCC_ClockConfig+0x170>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030f2:	2a02      	cmp	r2, #2
 80030f4:	d077      	beq.n	80031e6 <HAL_RCC_ClockConfig+0x166>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030f6:	0799      	lsls	r1, r3, #30
 80030f8:	d5d9      	bpl.n	80030ae <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030fa:	4e45      	ldr	r6, [pc, #276]	@ (8003210 <HAL_RCC_ClockConfig+0x190>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030fc:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003100:	68b3      	ldr	r3, [r6, #8]
 8003102:	f023 0303 	bic.w	r3, r3, #3
 8003106:	4313      	orrs	r3, r2
 8003108:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800310a:	f7fe fc87 	bl	8001a1c <HAL_GetTick>
 800310e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003110:	e004      	b.n	800311c <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003112:	f7fe fc83 	bl	8001a1c <HAL_GetTick>
 8003116:	1bc0      	subs	r0, r0, r7
 8003118:	4540      	cmp	r0, r8
 800311a:	d86c      	bhi.n	80031f6 <HAL_RCC_ClockConfig+0x176>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800311c:	68b3      	ldr	r3, [r6, #8]
 800311e:	6862      	ldr	r2, [r4, #4]
 8003120:	f003 030c 	and.w	r3, r3, #12
 8003124:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003128:	d1f3      	bne.n	8003112 <HAL_RCC_ClockConfig+0x92>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800312a:	4a38      	ldr	r2, [pc, #224]	@ (800320c <HAL_RCC_ClockConfig+0x18c>)
 800312c:	6813      	ldr	r3, [r2, #0]
 800312e:	f003 030f 	and.w	r3, r3, #15
 8003132:	42ab      	cmp	r3, r5
 8003134:	d909      	bls.n	800314a <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003136:	6813      	ldr	r3, [r2, #0]
 8003138:	f023 030f 	bic.w	r3, r3, #15
 800313c:	432b      	orrs	r3, r5
 800313e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003140:	6813      	ldr	r3, [r2, #0]
 8003142:	f003 030f 	and.w	r3, r3, #15
 8003146:	42ab      	cmp	r3, r5
 8003148:	d1b1      	bne.n	80030ae <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800314a:	6823      	ldr	r3, [r4, #0]
 800314c:	075a      	lsls	r2, r3, #29
 800314e:	d506      	bpl.n	800315e <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003150:	492f      	ldr	r1, [pc, #188]	@ (8003210 <HAL_RCC_ClockConfig+0x190>)
 8003152:	68e0      	ldr	r0, [r4, #12]
 8003154:	688a      	ldr	r2, [r1, #8]
 8003156:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 800315a:	4302      	orrs	r2, r0
 800315c:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800315e:	071b      	lsls	r3, r3, #28
 8003160:	d431      	bmi.n	80031c6 <HAL_RCC_ClockConfig+0x146>
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003162:	492b      	ldr	r1, [pc, #172]	@ (8003210 <HAL_RCC_ClockConfig+0x190>)
 8003164:	688b      	ldr	r3, [r1, #8]
 8003166:	f003 030c 	and.w	r3, r3, #12
 800316a:	2b04      	cmp	r3, #4
 800316c:	d039      	beq.n	80031e2 <HAL_RCC_ClockConfig+0x162>
 800316e:	2b08      	cmp	r3, #8
 8003170:	d118      	bne.n	80031a4 <HAL_RCC_ClockConfig+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003172:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003174:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003176:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800317a:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800317c:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
 8003180:	d03b      	beq.n	80031fa <HAL_RCC_ClockConfig+0x17a>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003182:	4824      	ldr	r0, [pc, #144]	@ (8003214 <HAL_RCC_ClockConfig+0x194>)
 8003184:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003188:	2300      	movs	r3, #0
 800318a:	fba1 0100 	umull	r0, r1, r1, r0
 800318e:	f7fd f853 	bl	8000238 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003192:	4b1f      	ldr	r3, [pc, #124]	@ (8003210 <HAL_RCC_ClockConfig+0x190>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800319a:	3301      	adds	r3, #1
 800319c:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 800319e:	fbb0 f3f3 	udiv	r3, r0, r3
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 80031a2:	e000      	b.n	80031a6 <HAL_RCC_ClockConfig+0x126>
      sysclockfreq = HSI_VALUE;
 80031a4:	4b1c      	ldr	r3, [pc, #112]	@ (8003218 <HAL_RCC_ClockConfig+0x198>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031a6:	4a1a      	ldr	r2, [pc, #104]	@ (8003210 <HAL_RCC_ClockConfig+0x190>)
 80031a8:	4c1c      	ldr	r4, [pc, #112]	@ (800321c <HAL_RCC_ClockConfig+0x19c>)
 80031aa:	6892      	ldr	r2, [r2, #8]
  HAL_InitTick(uwTickPrio);
 80031ac:	481c      	ldr	r0, [pc, #112]	@ (8003220 <HAL_RCC_ClockConfig+0x1a0>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031ae:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80031b2:	491c      	ldr	r1, [pc, #112]	@ (8003224 <HAL_RCC_ClockConfig+0x1a4>)
  HAL_InitTick(uwTickPrio);
 80031b4:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031b6:	5ca2      	ldrb	r2, [r4, r2]
 80031b8:	40d3      	lsrs	r3, r2
 80031ba:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 80031bc:	f7fe fbf2 	bl	80019a4 <HAL_InitTick>
  return HAL_OK;
 80031c0:	2000      	movs	r0, #0
}
 80031c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031c6:	4a12      	ldr	r2, [pc, #72]	@ (8003210 <HAL_RCC_ClockConfig+0x190>)
 80031c8:	6921      	ldr	r1, [r4, #16]
 80031ca:	6893      	ldr	r3, [r2, #8]
 80031cc:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80031d0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031d4:	490e      	ldr	r1, [pc, #56]	@ (8003210 <HAL_RCC_ClockConfig+0x190>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031d6:	6093      	str	r3, [r2, #8]
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031d8:	688b      	ldr	r3, [r1, #8]
 80031da:	f003 030c 	and.w	r3, r3, #12
 80031de:	2b04      	cmp	r3, #4
 80031e0:	d1c5      	bne.n	800316e <HAL_RCC_ClockConfig+0xee>
 80031e2:	4b0c      	ldr	r3, [pc, #48]	@ (8003214 <HAL_RCC_ClockConfig+0x194>)
 80031e4:	e7df      	b.n	80031a6 <HAL_RCC_ClockConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031e6:	0198      	lsls	r0, r3, #6
 80031e8:	d487      	bmi.n	80030fa <HAL_RCC_ClockConfig+0x7a>
 80031ea:	e760      	b.n	80030ae <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80031ec:	2001      	movs	r0, #1
}
 80031ee:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031f0:	039e      	lsls	r6, r3, #14
 80031f2:	d482      	bmi.n	80030fa <HAL_RCC_ClockConfig+0x7a>
 80031f4:	e75b      	b.n	80030ae <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 80031f6:	2003      	movs	r0, #3
 80031f8:	e75a      	b.n	80030b0 <HAL_RCC_ClockConfig+0x30>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031fa:	4807      	ldr	r0, [pc, #28]	@ (8003218 <HAL_RCC_ClockConfig+0x198>)
 80031fc:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003200:	fba1 0100 	umull	r0, r1, r1, r0
 8003204:	f7fd f818 	bl	8000238 <__aeabi_uldivmod>
 8003208:	e7c3      	b.n	8003192 <HAL_RCC_ClockConfig+0x112>
 800320a:	bf00      	nop
 800320c:	40023c00 	.word	0x40023c00
 8003210:	40023800 	.word	0x40023800
 8003214:	017d7840 	.word	0x017d7840
 8003218:	00f42400 	.word	0x00f42400
 800321c:	08004374 	.word	0x08004374
 8003220:	2000013c 	.word	0x2000013c
 8003224:	20000134 	.word	0x20000134

08003228 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003228:	6803      	ldr	r3, [r0, #0]
{
 800322a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800322e:	f013 0601 	ands.w	r6, r3, #1
{
 8003232:	b083      	sub	sp, #12
 8003234:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003236:	d00b      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003238:	4a94      	ldr	r2, [pc, #592]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800323a:	6891      	ldr	r1, [r2, #8]
 800323c:	f421 0100 	bic.w	r1, r1, #8388608	@ 0x800000
 8003240:	6091      	str	r1, [r2, #8]
 8003242:	6b46      	ldr	r6, [r0, #52]	@ 0x34
 8003244:	6891      	ldr	r1, [r2, #8]
 8003246:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003248:	fab6 f686 	clz	r6, r6
 800324c:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800324e:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003250:	f413 2500 	ands.w	r5, r3, #524288	@ 0x80000
 8003254:	d010      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x50>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003256:	498d      	ldr	r1, [pc, #564]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003258:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 800325a:	f8d1 208c 	ldr.w	r2, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800325e:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003262:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8003266:	ea42 0205 	orr.w	r2, r2, r5
 800326a:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800326e:	f000 8239 	beq.w	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003272:	fab5 f585 	clz	r5, r5
 8003276:	096d      	lsrs	r5, r5, #5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003278:	02d9      	lsls	r1, r3, #11
 800327a:	d510      	bpl.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800327c:	4883      	ldr	r0, [pc, #524]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800327e:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8003280:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003284:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003288:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 800328c:	ea42 0201 	orr.w	r2, r2, r1
 8003290:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003294:	f000 8229 	beq.w	80036ea <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8003298:	2900      	cmp	r1, #0
 800329a:	bf08      	it	eq
 800329c:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 800329e:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80032a2:	bf18      	it	ne
 80032a4:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80032a6:	069a      	lsls	r2, r3, #26
 80032a8:	f100 81d7 	bmi.w	800365a <HAL_RCCEx_PeriphCLKConfig+0x432>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80032ac:	06da      	lsls	r2, r3, #27
 80032ae:	d50c      	bpl.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80032b0:	4a76      	ldr	r2, [pc, #472]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032b2:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
 80032b6:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 80032ba:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
 80032be:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
 80032c2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80032c4:	4301      	orrs	r1, r0
 80032c6:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032ca:	045f      	lsls	r7, r3, #17
 80032cc:	d508      	bpl.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032ce:	496f      	ldr	r1, [pc, #444]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032d0:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 80032d2:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80032d6:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 80032da:	4302      	orrs	r2, r0
 80032dc:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032e0:	0418      	lsls	r0, r3, #16
 80032e2:	d508      	bpl.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032e4:	4969      	ldr	r1, [pc, #420]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032e6:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 80032e8:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80032ec:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 80032f0:	4302      	orrs	r2, r0
 80032f2:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80032f6:	03d9      	lsls	r1, r3, #15
 80032f8:	d508      	bpl.n	800330c <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032fa:	4964      	ldr	r1, [pc, #400]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032fc:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 80032fe:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8003302:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8003306:	4302      	orrs	r2, r0
 8003308:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800330c:	039a      	lsls	r2, r3, #14
 800330e:	d508      	bpl.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003310:	495e      	ldr	r1, [pc, #376]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003312:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8003314:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8003318:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 800331c:	4302      	orrs	r2, r0
 800331e:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003322:	065f      	lsls	r7, r3, #25
 8003324:	d508      	bpl.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003326:	4959      	ldr	r1, [pc, #356]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003328:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800332a:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800332e:	f022 0203 	bic.w	r2, r2, #3
 8003332:	4302      	orrs	r2, r0
 8003334:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003338:	0618      	lsls	r0, r3, #24
 800333a:	d508      	bpl.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800333c:	4953      	ldr	r1, [pc, #332]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800333e:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8003340:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8003344:	f022 020c 	bic.w	r2, r2, #12
 8003348:	4302      	orrs	r2, r0
 800334a:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800334e:	05d9      	lsls	r1, r3, #23
 8003350:	d508      	bpl.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003352:	494e      	ldr	r1, [pc, #312]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003354:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8003356:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800335a:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 800335e:	4302      	orrs	r2, r0
 8003360:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003364:	059a      	lsls	r2, r3, #22
 8003366:	d508      	bpl.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003368:	4948      	ldr	r1, [pc, #288]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800336a:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 800336c:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8003370:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8003374:	4302      	orrs	r2, r0
 8003376:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800337a:	055f      	lsls	r7, r3, #21
 800337c:	d508      	bpl.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800337e:	4943      	ldr	r1, [pc, #268]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003380:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8003382:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8003386:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800338a:	4302      	orrs	r2, r0
 800338c:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003390:	0518      	lsls	r0, r3, #20
 8003392:	d508      	bpl.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003394:	493d      	ldr	r1, [pc, #244]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003396:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003398:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800339c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80033a0:	4302      	orrs	r2, r0
 80033a2:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80033a6:	04d9      	lsls	r1, r3, #19
 80033a8:	d508      	bpl.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80033aa:	4938      	ldr	r1, [pc, #224]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033ac:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80033ae:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80033b2:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80033b6:	4302      	orrs	r2, r0
 80033b8:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80033bc:	049a      	lsls	r2, r3, #18
 80033be:	d508      	bpl.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80033c0:	4932      	ldr	r1, [pc, #200]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033c2:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 80033c4:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80033c8:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80033cc:	4302      	orrs	r2, r0
 80033ce:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80033d2:	025f      	lsls	r7, r3, #9
 80033d4:	d508      	bpl.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80033d6:	492d      	ldr	r1, [pc, #180]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033d8:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 80033da:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80033de:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 80033e2:	4302      	orrs	r2, r0
 80033e4:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80033e8:	0298      	lsls	r0, r3, #10
 80033ea:	d50c      	bpl.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80033ec:	4927      	ldr	r1, [pc, #156]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033ee:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 80033f0:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 80033f4:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80033f8:	f022 6200 	bic.w	r2, r2, #134217728	@ 0x8000000
      pllsaiused = 1;
 80033fc:	bf08      	it	eq
 80033fe:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003400:	4302      	orrs	r2, r0
 8003402:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8003406:	f013 0f08 	tst.w	r3, #8
 800340a:	bf18      	it	ne
 800340c:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800340e:	0359      	lsls	r1, r3, #13
 8003410:	d508      	bpl.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003412:	491e      	ldr	r1, [pc, #120]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003414:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8003416:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800341a:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800341e:	4302      	orrs	r2, r0
 8003420:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003424:	021a      	lsls	r2, r3, #8
 8003426:	d509      	bpl.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003428:	4918      	ldr	r1, [pc, #96]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800342a:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800342e:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8003432:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8003436:	4302      	orrs	r2, r0
 8003438:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800343c:	015f      	lsls	r7, r3, #5
 800343e:	d509      	bpl.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003440:	4912      	ldr	r1, [pc, #72]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003442:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8003446:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800344a:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 800344e:	4302      	orrs	r2, r0
 8003450:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003454:	0118      	lsls	r0, r3, #4
 8003456:	d509      	bpl.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003458:	490c      	ldr	r1, [pc, #48]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800345a:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 800345e:	f8d1 208c 	ldr.w	r2, [r1, #140]	@ 0x8c
 8003462:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8003466:	4302      	orrs	r2, r0
 8003468:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800346c:	00d9      	lsls	r1, r3, #3
 800346e:	d46b      	bmi.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x320>
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003470:	2e01      	cmp	r6, #1
 8003472:	d001      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x250>
 8003474:	019a      	lsls	r2, r3, #6
 8003476:	d561      	bpl.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003478:	4e04      	ldr	r6, [pc, #16]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800347a:	6833      	ldr	r3, [r6, #0]
 800347c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003480:	6033      	str	r3, [r6, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003482:	f7fe facb 	bl	8001a1c <HAL_GetTick>
 8003486:	4607      	mov	r7, r0

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003488:	e008      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x274>
 800348a:	bf00      	nop
 800348c:	40023800 	.word	0x40023800
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003490:	f7fe fac4 	bl	8001a1c <HAL_GetTick>
 8003494:	1bc3      	subs	r3, r0, r7
 8003496:	2b64      	cmp	r3, #100	@ 0x64
 8003498:	f200 80db 	bhi.w	8003652 <HAL_RCCEx_PeriphCLKConfig+0x42a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800349c:	6833      	ldr	r3, [r6, #0]
 800349e:	011b      	lsls	r3, r3, #4
 80034a0:	d4f6      	bmi.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x268>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80034a2:	6823      	ldr	r3, [r4, #0]
 80034a4:	07df      	lsls	r7, r3, #31
 80034a6:	d512      	bpl.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80034a8:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80034aa:	b982      	cbnz	r2, 80034ce <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80034ac:	f8d6 2084 	ldr.w	r2, [r6, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80034b0:	f8d6 1084 	ldr.w	r1, [r6, #132]	@ 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80034b4:	f402 3240 	and.w	r2, r2, #196608	@ 0x30000
 80034b8:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 80034bc:	430a      	orrs	r2, r1
 80034be:	6861      	ldr	r1, [r4, #4]
 80034c0:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 80034c4:	68a1      	ldr	r1, [r4, #8]
 80034c6:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 80034ca:	f8c6 2084 	str.w	r2, [r6, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80034ce:	031e      	lsls	r6, r3, #12
 80034d0:	d504      	bpl.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80034d2:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80034d4:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 80034d8:	f000 8118 	beq.w	800370c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80034dc:	02d8      	lsls	r0, r3, #11
 80034de:	d504      	bpl.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80034e0:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80034e2:	f5b2 0f80 	cmp.w	r2, #4194304	@ 0x400000
 80034e6:	f000 8111 	beq.w	800370c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80034ea:	01d9      	lsls	r1, r3, #7
 80034ec:	d511      	bpl.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80034ee:	49a8      	ldr	r1, [pc, #672]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80034f0:	f8d1 2084 	ldr.w	r2, [r1, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80034f4:	f8d1 0084 	ldr.w	r0, [r1, #132]	@ 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80034f8:	f002 6270 	and.w	r2, r2, #251658240	@ 0xf000000
 80034fc:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 8003500:	4302      	orrs	r2, r0
 8003502:	6860      	ldr	r0, [r4, #4]
 8003504:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8003508:	6920      	ldr	r0, [r4, #16]
 800350a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800350e:	f8c1 2084 	str.w	r2, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003512:	019a      	lsls	r2, r3, #6
 8003514:	f100 80eb 	bmi.w	80036ee <HAL_RCCEx_PeriphCLKConfig+0x4c6>
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003518:	4e9d      	ldr	r6, [pc, #628]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800351a:	6833      	ldr	r3, [r6, #0]
 800351c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003520:	6033      	str	r3, [r6, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003522:	f7fe fa7b 	bl	8001a1c <HAL_GetTick>
 8003526:	4607      	mov	r7, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003528:	e005      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x30e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800352a:	f7fe fa77 	bl	8001a1c <HAL_GetTick>
 800352e:	1bc0      	subs	r0, r0, r7
 8003530:	2864      	cmp	r0, #100	@ 0x64
 8003532:	f200 808e 	bhi.w	8003652 <HAL_RCCEx_PeriphCLKConfig+0x42a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003536:	6833      	ldr	r3, [r6, #0]
 8003538:	011b      	lsls	r3, r3, #4
 800353a:	d5f6      	bpl.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x302>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800353c:	2d01      	cmp	r5, #1
 800353e:	d00e      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x336>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8003540:	2000      	movs	r0, #0
}
 8003542:	b003      	add	sp, #12
 8003544:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003548:	4991      	ldr	r1, [pc, #580]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800354a:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 800354e:	f8d1 208c 	ldr.w	r2, [r1, #140]	@ 0x8c
 8003552:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8003556:	4302      	orrs	r2, r0
 8003558:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
 800355c:	e788      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x248>
    __HAL_RCC_PLLSAI_DISABLE();
 800355e:	4d8c      	ldr	r5, [pc, #560]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8003560:	682b      	ldr	r3, [r5, #0]
 8003562:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003566:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8003568:	f7fe fa58 	bl	8001a1c <HAL_GetTick>
 800356c:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800356e:	e004      	b.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x352>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003570:	f7fe fa54 	bl	8001a1c <HAL_GetTick>
 8003574:	1b80      	subs	r0, r0, r6
 8003576:	2864      	cmp	r0, #100	@ 0x64
 8003578:	d86b      	bhi.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x42a>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800357a:	682b      	ldr	r3, [r5, #0]
 800357c:	009f      	lsls	r7, r3, #2
 800357e:	d4f7      	bmi.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x348>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003580:	6823      	ldr	r3, [r4, #0]
 8003582:	031d      	lsls	r5, r3, #12
 8003584:	f140 80fb 	bpl.w	800377e <HAL_RCCEx_PeriphCLKConfig+0x556>
 8003588:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800358a:	2a00      	cmp	r2, #0
 800358c:	f040 80f7 	bne.w	800377e <HAL_RCCEx_PeriphCLKConfig+0x556>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003590:	497f      	ldr	r1, [pc, #508]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8003592:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003596:	f8d1 0088 	ldr.w	r0, [r1, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800359a:	f402 3240 	and.w	r2, r2, #196608	@ 0x30000
 800359e:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 80035a2:	4302      	orrs	r2, r0
 80035a4:	6960      	ldr	r0, [r4, #20]
 80035a6:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 80035aa:	69a0      	ldr	r0, [r4, #24]
 80035ac:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 80035b0:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80035b4:	f8d1 208c 	ldr.w	r2, [r1, #140]	@ 0x8c
 80035b8:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80035ba:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 80035be:	3801      	subs	r0, #1
 80035c0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80035c4:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80035c8:	0299      	lsls	r1, r3, #10
 80035ca:	d515      	bpl.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80035cc:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 80035ce:	f1b2 6f00 	cmp.w	r2, #134217728	@ 0x8000000
 80035d2:	d111      	bne.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80035d4:	496e      	ldr	r1, [pc, #440]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80035d6:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80035da:	f8d1 0088 	ldr.w	r0, [r1, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80035de:	f002 6270 	and.w	r2, r2, #251658240	@ 0xf000000
 80035e2:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 80035e6:	4302      	orrs	r2, r0
 80035e8:	6960      	ldr	r0, [r4, #20]
 80035ea:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 80035ee:	6a20      	ldr	r0, [r4, #32]
 80035f0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80035f4:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80035f8:	071a      	lsls	r2, r3, #28
 80035fa:	d519      	bpl.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x408>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80035fc:	4a64      	ldr	r2, [pc, #400]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x568>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80035fe:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003600:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003604:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003608:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 800360c:	69e0      	ldr	r0, [r4, #28]
 800360e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003612:	430b      	orrs	r3, r1
 8003614:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8003618:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 800361c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003620:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8003624:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003626:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800362a:	430b      	orrs	r3, r1
 800362c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8003630:	4c57      	ldr	r4, [pc, #348]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8003632:	6823      	ldr	r3, [r4, #0]
 8003634:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003638:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800363a:	f7fe f9ef 	bl	8001a1c <HAL_GetTick>
 800363e:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003640:	6823      	ldr	r3, [r4, #0]
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	f53f af7c 	bmi.w	8003540 <HAL_RCCEx_PeriphCLKConfig+0x318>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003648:	f7fe f9e8 	bl	8001a1c <HAL_GetTick>
 800364c:	1b40      	subs	r0, r0, r5
 800364e:	2864      	cmp	r0, #100	@ 0x64
 8003650:	d9f6      	bls.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x418>
        return HAL_TIMEOUT;
 8003652:	2003      	movs	r0, #3
}
 8003654:	b003      	add	sp, #12
 8003656:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 800365a:	4b4d      	ldr	r3, [pc, #308]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x568>)
    PWR->CR1 |= PWR_CR1_DBP;
 800365c:	4f4d      	ldr	r7, [pc, #308]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800365e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003660:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003664:	641a      	str	r2, [r3, #64]	@ 0x40
 8003666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003668:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800366c:	9301      	str	r3, [sp, #4]
 800366e:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003676:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8003678:	f7fe f9d0 	bl	8001a1c <HAL_GetTick>
 800367c:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800367e:	e005      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x464>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003680:	f7fe f9cc 	bl	8001a1c <HAL_GetTick>
 8003684:	eba0 0008 	sub.w	r0, r0, r8
 8003688:	2864      	cmp	r0, #100	@ 0x64
 800368a:	d8e2      	bhi.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x42a>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	05db      	lsls	r3, r3, #23
 8003690:	d5f6      	bpl.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x458>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003692:	4f3f      	ldr	r7, [pc, #252]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x568>)
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003694:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003696:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003698:	f403 7140 	and.w	r1, r3, #768	@ 0x300
 800369c:	f412 7240 	ands.w	r2, r2, #768	@ 0x300
 80036a0:	d010      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80036a2:	428a      	cmp	r2, r1
 80036a4:	d00e      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x49c>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036a6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80036a8:	6f38      	ldr	r0, [r7, #112]	@ 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036aa:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80036ae:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 80036b2:	6738      	str	r0, [r7, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036b4:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80036b6:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
 80036ba:	6738      	str	r0, [r7, #112]	@ 0x70
      RCC->BDCR = tmpreg0;
 80036bc:	673a      	str	r2, [r7, #112]	@ 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80036be:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80036c0:	07d0      	lsls	r0, r2, #31
 80036c2:	d448      	bmi.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036c4:	f5b1 7f40 	cmp.w	r1, #768	@ 0x300
 80036c8:	d03c      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x51c>
 80036ca:	4931      	ldr	r1, [pc, #196]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80036cc:	688a      	ldr	r2, [r1, #8]
 80036ce:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 80036d2:	608a      	str	r2, [r1, #8]
 80036d4:	4a2e      	ldr	r2, [pc, #184]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80036d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036da:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 80036dc:	430b      	orrs	r3, r1
 80036de:	6713      	str	r3, [r2, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80036e0:	6823      	ldr	r3, [r4, #0]
 80036e2:	e5e3      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x84>
  uint32_t pllsaiused = 0;
 80036e4:	2500      	movs	r5, #0
      plli2sused = 1;
 80036e6:	2601      	movs	r6, #1
 80036e8:	e5c6      	b.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x50>
      plli2sused = 1;
 80036ea:	2601      	movs	r6, #1
 80036ec:	e5d7      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x76>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80036ee:	6923      	ldr	r3, [r4, #16]
 80036f0:	6861      	ldr	r1, [r4, #4]
 80036f2:	041b      	lsls	r3, r3, #16
 80036f4:	68e2      	ldr	r2, [r4, #12]
 80036f6:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80036fa:	68a1      	ldr	r1, [r4, #8]
 80036fc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003700:	4a23      	ldr	r2, [pc, #140]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8003702:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8003706:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
 800370a:	e705      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800370c:	4920      	ldr	r1, [pc, #128]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800370e:	f8d1 2084 	ldr.w	r2, [r1, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003712:	f8d1 0084 	ldr.w	r0, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003716:	f402 3240 	and.w	r2, r2, #196608	@ 0x30000
 800371a:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 800371e:	4302      	orrs	r2, r0
 8003720:	6860      	ldr	r0, [r4, #4]
 8003722:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8003726:	68e0      	ldr	r0, [r4, #12]
 8003728:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800372c:	f8c1 2084 	str.w	r2, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003730:	f8d1 008c 	ldr.w	r0, [r1, #140]	@ 0x8c
 8003734:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003736:	f020 001f 	bic.w	r0, r0, #31
 800373a:	3a01      	subs	r2, #1
 800373c:	4302      	orrs	r2, r0
 800373e:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
 8003742:	e6d2      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003744:	4812      	ldr	r0, [pc, #72]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8003746:	4914      	ldr	r1, [pc, #80]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8003748:	6882      	ldr	r2, [r0, #8]
 800374a:	4019      	ands	r1, r3
 800374c:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 8003750:	430a      	orrs	r2, r1
 8003752:	6082      	str	r2, [r0, #8]
 8003754:	e7be      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
        tickstart = HAL_GetTick();
 8003756:	f7fe f961 	bl	8001a1c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800375a:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 800375e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003760:	e006      	b.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x548>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003762:	f7fe f95b 	bl	8001a1c <HAL_GetTick>
 8003766:	eba0 0008 	sub.w	r0, r0, r8
 800376a:	4548      	cmp	r0, r9
 800376c:	f63f af71 	bhi.w	8003652 <HAL_RCCEx_PeriphCLKConfig+0x42a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003770:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003772:	0799      	lsls	r1, r3, #30
 8003774:	d5f5      	bpl.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x53a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003776:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003778:	f403 7140 	and.w	r1, r3, #768	@ 0x300
 800377c:	e7a2      	b.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x49c>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800377e:	02d8      	lsls	r0, r3, #11
 8003780:	f57f af22 	bpl.w	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003784:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003786:	2a00      	cmp	r2, #0
 8003788:	f47f af1e 	bne.w	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 800378c:	e700      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800378e:	bf00      	nop
 8003790:	40023800 	.word	0x40023800
 8003794:	40007000 	.word	0x40007000
 8003798:	0ffffcff 	.word	0x0ffffcff

0800379c <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800379c:	f5b0 2f00 	cmp.w	r0, #524288	@ 0x80000
 80037a0:	d036      	beq.n	8003810 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
        break;
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80037a2:	f5b0 1f80 	cmp.w	r0, #1048576	@ 0x100000
 80037a6:	d131      	bne.n	800380c <HAL_RCCEx_GetPeriphCLKFreq+0x70>
  {
    saiclocksource = RCC->DCKCFGR1;
 80037a8:	4a37      	ldr	r2, [pc, #220]	@ (8003888 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 80037aa:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 80037ae:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
    switch (saiclocksource)
 80037b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80037b6:	d044      	beq.n	8003842 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80037b8:	d838      	bhi.n	800382c <HAL_RCCEx_GetPeriphCLKFreq+0x90>
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d043      	beq.n	8003846 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 80037be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037c2:	d123      	bne.n	800380c <HAL_RCCEx_GetPeriphCLKFreq+0x70>
      }
    case RCC_DCKCFGR1_SAI2SEL_0: /* PLLI2S is the clock source for SAI2 */
      {
        /* Configure the PLLI2S division factor */
        /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80037c4:	6853      	ldr	r3, [r2, #4]
 80037c6:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
        {
          /* In Case the PLL Source is HSI (Internal Clock) */
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80037ca:	6853      	ldr	r3, [r2, #4]
 80037cc:	bf08      	it	eq
 80037ce:	492f      	ldreq	r1, [pc, #188]	@ (800388c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>)
        }
        else
        {
          /* In Case the PLL Source is HSE (External Clock) */
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80037d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80037d4:	bf18      	it	ne
 80037d6:	492e      	ldrne	r1, [pc, #184]	@ (8003890 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>)
 80037d8:	fbb1 f1f3 	udiv	r1, r1, r3
        }

        /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
        /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80037dc:	4b2a      	ldr	r3, [pc, #168]	@ (8003888 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 80037de:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80037e2:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80037e6:	f3c2 6203 	ubfx	r2, r2, #24, #4

        /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80037ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80037ee:	f3c0 1088 	ubfx	r0, r0, #6, #9
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80037f2:	f003 031f 	and.w	r3, r3, #31
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80037f6:	fb01 f000 	mul.w	r0, r1, r0
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80037fa:	3301      	adds	r3, #1
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80037fc:	fbb0 f0f2 	udiv	r0, r0, r2
        frequency = frequency/(tmpreg);
 8003800:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8003804:	4770      	bx	lr
    switch (saiclocksource)
 8003806:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800380a:	d012      	beq.n	8003832 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
 800380c:	2000      	movs	r0, #0
 800380e:	4770      	bx	lr
    saiclocksource = RCC->DCKCFGR1;
 8003810:	4a1d      	ldr	r2, [pc, #116]	@ (8003888 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 8003812:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8003816:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    switch (saiclocksource)
 800381a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800381e:	d010      	beq.n	8003842 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8003820:	d8f1      	bhi.n	8003806 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8003822:	b183      	cbz	r3, 8003846 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8003824:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003828:	d0cc      	beq.n	80037c4 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 800382a:	e7ef      	b.n	800380c <HAL_RCCEx_GetPeriphCLKFreq+0x70>
    switch (saiclocksource)
 800382c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003830:	d1ec      	bne.n	800380c <HAL_RCCEx_GetPeriphCLKFreq+0x70>
        break;
      }
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
    case RCC_DCKCFGR1_SAI2SEL: /* HSI or HSE is the clock source for SAI2 */
      {
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003832:	6852      	ldr	r2, [r2, #4]
          frequency = HSI_VALUE;
 8003834:	4b15      	ldr	r3, [pc, #84]	@ (800388c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>)
 8003836:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
 800383a:	4815      	ldr	r0, [pc, #84]	@ (8003890 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>)
 800383c:	bf08      	it	eq
 800383e:	4618      	moveq	r0, r3
 8003840:	4770      	bx	lr
        frequency = EXTERNAL_CLOCK_VALUE;
 8003842:	4814      	ldr	r0, [pc, #80]	@ (8003894 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>)
      }
    }
  }

  return frequency;
}
 8003844:	4770      	bx	lr
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003846:	6853      	ldr	r3, [r2, #4]
 8003848:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800384c:	6853      	ldr	r3, [r2, #4]
 800384e:	bf08      	it	eq
 8003850:	490e      	ldreq	r1, [pc, #56]	@ (800388c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>)
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003852:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003856:	bf18      	it	ne
 8003858:	490d      	ldrne	r1, [pc, #52]	@ (8003890 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>)
 800385a:	fbb1 f1f3 	udiv	r1, r1, r3
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800385e:	4b0a      	ldr	r3, [pc, #40]	@ (8003888 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 8003860:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8003864:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8003868:	f3c2 6203 	ubfx	r2, r2, #24, #4
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800386c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8003870:	f3c0 1088 	ubfx	r0, r0, #6, #9
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8003874:	f3c3 2304 	ubfx	r3, r3, #8, #5
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8003878:	fb01 f000 	mul.w	r0, r1, r0
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800387c:	3301      	adds	r3, #1
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800387e:	fbb0 f0f2 	udiv	r0, r0, r2
        frequency = frequency/(tmpreg);
 8003882:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8003886:	4770      	bx	lr
 8003888:	40023800 	.word	0x40023800
 800388c:	00f42400 	.word	0x00f42400
 8003890:	017d7840 	.word	0x017d7840
 8003894:	00bb8000 	.word	0x00bb8000

08003898 <HAL_SAI_Init>:
  uint32_t tmpregisterGCR = 0;
  uint32_t ckstr_bits = 0;
  uint32_t syncen_bits = 0;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8003898:	2800      	cmp	r0, #0
 800389a:	f000 80f7 	beq.w	8003a8c <HAL_SAI_Init+0x1f4>
{
 800389e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 80038a0:	f890 307d 	ldrb.w	r3, [r0, #125]	@ 0x7d
 80038a4:	4604      	mov	r4, r0
 80038a6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f000 80e3 	beq.w	8003a76 <HAL_SAI_Init+0x1de>
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 80038b0:	4b77      	ldr	r3, [pc, #476]	@ (8003a90 <HAL_SAI_Init+0x1f8>)
  hsai->State = HAL_SAI_STATE_BUSY;
 80038b2:	2002      	movs	r0, #2
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 80038b4:	4977      	ldr	r1, [pc, #476]	@ (8003a94 <HAL_SAI_Init+0x1fc>)
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80038b6:	6822      	ldr	r2, [r4, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 80038b8:	681b      	ldr	r3, [r3, #0]
  hsai->State = HAL_SAI_STATE_BUSY;
 80038ba:	f884 007d 	strb.w	r0, [r4, #125]	@ 0x7d
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 80038be:	fba1 1303 	umull	r1, r3, r1, r3
  __HAL_SAI_DISABLE(hsai);
 80038c2:	6811      	ldr	r1, [r2, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 80038c4:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
 80038c6:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 80038ca:	4083      	lsls	r3, r0
  __HAL_SAI_DISABLE(hsai);
 80038cc:	6011      	str	r1, [r2, #0]
 80038ce:	e002      	b.n	80038d6 <HAL_SAI_Init+0x3e>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
      status = HAL_TIMEOUT;
      break;
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80038d0:	6811      	ldr	r1, [r2, #0]
 80038d2:	03cd      	lsls	r5, r1, #15
 80038d4:	d507      	bpl.n	80038e6 <HAL_SAI_Init+0x4e>
    if (count-- == 0)
 80038d6:	3b01      	subs	r3, #1
 80038d8:	d2fa      	bcs.n	80038d0 <HAL_SAI_Init+0x38>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80038da:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80038de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038e2:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  switch (hsai->Init.SynchroExt)
 80038e6:	68e3      	ldr	r3, [r4, #12]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	f000 80c1 	beq.w	8003a70 <HAL_SAI_Init+0x1d8>
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	bf0b      	itete	eq
 80038f2:	2021      	moveq	r0, #33	@ 0x21
 80038f4:	2001      	movne	r0, #1
 80038f6:	2120      	moveq	r1, #32
 80038f8:	2100      	movne	r1, #0
  switch (hsai->Init.Synchro)
 80038fa:	68a3      	ldr	r3, [r4, #8]
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d058      	beq.n	80039b2 <HAL_SAI_Init+0x11a>
 8003900:	2b03      	cmp	r3, #3
 8003902:	d055      	beq.n	80039b0 <HAL_SAI_Init+0x118>
 8003904:	f1a3 0301 	sub.w	r3, r3, #1
 8003908:	fab3 f383 	clz	r3, r3
 800390c:	095b      	lsrs	r3, r3, #5
 800390e:	029d      	lsls	r5, r3, #10
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8003910:	4b61      	ldr	r3, [pc, #388]	@ (8003a98 <HAL_SAI_Init+0x200>)
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8003912:	69e0      	ldr	r0, [r4, #28]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8003914:	429a      	cmp	r2, r3
 8003916:	d015      	beq.n	8003944 <HAL_SAI_Init+0xac>
 8003918:	3320      	adds	r3, #32
 800391a:	429a      	cmp	r2, r3
 800391c:	d012      	beq.n	8003944 <HAL_SAI_Init+0xac>
    SAI2->GCR = tmpregisterGCR;
 800391e:	4b5f      	ldr	r3, [pc, #380]	@ (8003a9c <HAL_SAI_Init+0x204>)
 8003920:	f8c3 1c00 	str.w	r1, [r3, #3072]	@ 0xc00
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8003924:	2800      	cmp	r0, #0
 8003926:	d047      	beq.n	80039b8 <HAL_SAI_Init+0x120>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8003928:	4b5d      	ldr	r3, [pc, #372]	@ (8003aa0 <HAL_SAI_Init+0x208>)
 800392a:	429a      	cmp	r2, r3
 800392c:	f000 80a8 	beq.w	8003a80 <HAL_SAI_Init+0x1e8>
 8003930:	3320      	adds	r3, #32
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	fab3 f383 	clz	r3, r3
 8003938:	095b      	lsrs	r3, r3, #5
 800393a:	2b00      	cmp	r3, #0
 800393c:	f040 80a0 	bne.w	8003a80 <HAL_SAI_Init+0x1e8>
 8003940:	4619      	mov	r1, r3
 8003942:	e023      	b.n	800398c <HAL_SAI_Init+0xf4>
    SAI1->GCR = tmpregisterGCR;
 8003944:	4b55      	ldr	r3, [pc, #340]	@ (8003a9c <HAL_SAI_Init+0x204>)
 8003946:	f8c3 1800 	str.w	r1, [r3, #2048]	@ 0x800
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800394a:	b3a8      	cbz	r0, 80039b8 <HAL_SAI_Init+0x120>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800394c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003950:	f7ff ff24 	bl	800379c <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8003954:	6822      	ldr	r2, [r4, #0]
 8003956:	4b52      	ldr	r3, [pc, #328]	@ (8003aa0 <HAL_SAI_Init+0x208>)
 8003958:	429a      	cmp	r2, r3
 800395a:	f000 8091 	beq.w	8003a80 <HAL_SAI_Init+0x1e8>
 800395e:	3320      	adds	r3, #32
 8003960:	429a      	cmp	r2, r3
 8003962:	f000 808d 	beq.w	8003a80 <HAL_SAI_Init+0x1e8>
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8003966:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800396a:	69e1      	ldr	r1, [r4, #28]
 800396c:	0043      	lsls	r3, r0, #1
 800396e:	0249      	lsls	r1, r1, #9
 8003970:	fbb3 f3f1 	udiv	r3, r3, r1
    hsai->Init.Mckdiv = tmpval / 10;
 8003974:	494b      	ldr	r1, [pc, #300]	@ (8003aa4 <HAL_SAI_Init+0x20c>)
 8003976:	fba1 0103 	umull	r0, r1, r1, r3
 800397a:	08c9      	lsrs	r1, r1, #3
    if ((tmpval % 10) > 8)
 800397c:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8003980:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 8003984:	2b09      	cmp	r3, #9
      hsai->Init.Mckdiv += 1;
 8003986:	bf08      	it	eq
 8003988:	3101      	addeq	r1, #1
 800398a:	460b      	mov	r3, r1
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800398c:	6b26      	ldr	r6, [r4, #48]	@ 0x30
    hsai->Init.Mckdiv = tmpval / 10;
 800398e:	6223      	str	r3, [r4, #32]
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8003990:	2e04      	cmp	r6, #4
 8003992:	d113      	bne.n	80039bc <HAL_SAI_Init+0x124>
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003994:	6863      	ldr	r3, [r4, #4]
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8003996:	0849      	lsrs	r1, r1, #1
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8003998:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800399a:	f033 0702 	bics.w	r7, r3, #2
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800399e:	6221      	str	r1, [r4, #32]
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80039a0:	d011      	beq.n	80039c6 <HAL_SAI_Init+0x12e>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80039a2:	f1a0 0001 	sub.w	r0, r0, #1
 80039a6:	fab0 f080 	clz	r0, r0
 80039aa:	0940      	lsrs	r0, r0, #5
 80039ac:	0240      	lsls	r0, r0, #9
 80039ae:	e00e      	b.n	80039ce <HAL_SAI_Init+0x136>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80039b0:	4601      	mov	r1, r0
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80039b2:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 80039b6:	e7ab      	b.n	8003910 <HAL_SAI_Init+0x78>
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80039b8:	6b26      	ldr	r6, [r4, #48]	@ 0x30
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80039ba:	6a21      	ldr	r1, [r4, #32]
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80039bc:	6863      	ldr	r3, [r4, #4]
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80039be:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80039c0:	f033 0702 	bics.w	r7, r3, #2
 80039c4:	d1ed      	bne.n	80039a2 <HAL_SAI_Init+0x10a>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80039c6:	3801      	subs	r0, #1
 80039c8:	bf18      	it	ne
 80039ca:	2001      	movne	r0, #1
 80039cc:	0240      	lsls	r0, r0, #9
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80039ce:	6b67      	ldr	r7, [r4, #52]	@ 0x34
 80039d0:	433b      	orrs	r3, r7
 80039d2:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
 80039d4:	433b      	orrs	r3, r7
 80039d6:	6a67      	ldr	r7, [r4, #36]	@ 0x24
 80039d8:	433b      	orrs	r3, r7
 80039da:	6927      	ldr	r7, [r4, #16]
 80039dc:	433b      	orrs	r3, r7
 80039de:	6967      	ldr	r7, [r4, #20]
 80039e0:	433b      	orrs	r3, r7
 80039e2:	432b      	orrs	r3, r5
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80039e4:	4d30      	ldr	r5, [pc, #192]	@ (8003aa8 <HAL_SAI_Init+0x210>)
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80039e6:	4333      	orrs	r3, r6
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80039e8:	6816      	ldr	r6, [r2, #0]
 80039ea:	4035      	ands	r5, r6
 80039ec:	6015      	str	r5, [r2, #0]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80039ee:	6815      	ldr	r5, [r2, #0]
 80039f0:	432b      	orrs	r3, r5
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80039f2:	4d2e      	ldr	r5, [pc, #184]	@ (8003aac <HAL_SAI_Init+0x214>)
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80039f4:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80039f8:	69a1      	ldr	r1, [r4, #24]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80039fa:	4303      	orrs	r3, r0
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80039fc:	482c      	ldr	r0, [pc, #176]	@ (8003ab0 <HAL_SAI_Init+0x218>)
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80039fe:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8003a00:	6853      	ldr	r3, [r2, #4]
 8003a02:	401d      	ands	r5, r3
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8003a04:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003a06:	4319      	orrs	r1, r3
 8003a08:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8003a0a:	6055      	str	r5, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8003a0c:	4319      	orrs	r1, r3
 8003a0e:	6855      	ldr	r5, [r2, #4]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8003a10:	6d23      	ldr	r3, [r4, #80]	@ 0x50
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8003a12:	4329      	orrs	r1, r5
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8003a14:	f24f 0520 	movw	r5, #61472	@ 0xf020
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8003a18:	6051      	str	r1, [r2, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8003a1a:	6891      	ldr	r1, [r2, #8]
 8003a1c:	4008      	ands	r0, r1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8003a1e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8003a20:	430b      	orrs	r3, r1
 8003a22:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8003a24:	6090      	str	r0, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8003a26:	430b      	orrs	r3, r1
 8003a28:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8003a2a:	6890      	ldr	r0, [r2, #8]
 8003a2c:	3901      	subs	r1, #1
 8003a2e:	430b      	orrs	r3, r1
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8003a30:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8003a32:	3901      	subs	r1, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8003a34:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8003a38:	6d61      	ldr	r1, [r4, #84]	@ 0x54
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8003a3a:	4303      	orrs	r3, r0
 8003a3c:	6093      	str	r3, [r2, #8]
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8003a3e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8003a40:	68d0      	ldr	r0, [r2, #12]
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8003a42:	430b      	orrs	r3, r1
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8003a44:	6e21      	ldr	r1, [r4, #96]	@ 0x60
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8003a46:	4028      	ands	r0, r5
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8003a48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8003a4c:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8003a4e:	60d0      	str	r0, [r2, #12]
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8003a50:	3901      	subs	r1, #1
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8003a52:	68d0      	ldr	r0, [r2, #12]
 8003a54:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8003a58:	2100      	movs	r1, #0
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8003a5a:	4303      	orrs	r3, r0
  return HAL_OK;
 8003a5c:	4608      	mov	r0, r1
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8003a5e:	60d3      	str	r3, [r2, #12]
  hsai->State = HAL_SAI_STATE_READY;
 8003a60:	2301      	movs	r3, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8003a62:	f8c4 1080 	str.w	r1, [r4, #128]	@ 0x80
  __HAL_UNLOCK(hsai);
 8003a66:	f884 107c 	strb.w	r1, [r4, #124]	@ 0x7c
  hsai->State = HAL_SAI_STATE_READY;
 8003a6a:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
}
 8003a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (hsai->Init.SynchroExt)
 8003a70:	2011      	movs	r0, #17
 8003a72:	2110      	movs	r1, #16
 8003a74:	e741      	b.n	80038fa <HAL_SAI_Init+0x62>
    hsai->Lock = HAL_UNLOCKED;
 8003a76:	f880 207c 	strb.w	r2, [r0, #124]	@ 0x7c
    HAL_SAI_MspInit(hsai);
 8003a7a:	f7fd fdd7 	bl	800162c <HAL_SAI_MspInit>
 8003a7e:	e717      	b.n	80038b0 <HAL_SAI_Init+0x18>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8003a80:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8003a84:	f7ff fe8a 	bl	800379c <HAL_RCCEx_GetPeriphCLKFreq>
 8003a88:	6822      	ldr	r2, [r4, #0]
 8003a8a:	e76c      	b.n	8003966 <HAL_SAI_Init+0xce>
    return HAL_ERROR;
 8003a8c:	2001      	movs	r0, #1
}
 8003a8e:	4770      	bx	lr
 8003a90:	20000134 	.word	0x20000134
 8003a94:	95cbec1b 	.word	0x95cbec1b
 8003a98:	40015804 	.word	0x40015804
 8003a9c:	40015000 	.word	0x40015000
 8003aa0:	40015c04 	.word	0x40015c04
 8003aa4:	cccccccd 	.word	0xcccccccd
 8003aa8:	ff05c010 	.word	0xff05c010
 8003aac:	ffff1ff0 	.word	0xffff1ff0
 8003ab0:	fff88000 	.word	0xfff88000

08003ab4 <HAL_SAI_InitProtocol>:
  switch (protocol)
 8003ab4:	2902      	cmp	r1, #2
{
 8003ab6:	b430      	push	{r4, r5}
  switch (protocol)
 8003ab8:	d928      	bls.n	8003b0c <HAL_SAI_InitProtocol+0x58>
 8003aba:	f1a1 0c03 	sub.w	ip, r1, #3
 8003abe:	f1bc 0f01 	cmp.w	ip, #1
 8003ac2:	d820      	bhi.n	8003b06 <HAL_SAI_InitProtocol+0x52>
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8003ac4:	2400      	movs	r4, #0
  hsai->SlotInit.SlotNumber      = nbslot;
 8003ac6:	65c3      	str	r3, [r0, #92]	@ 0x5c
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8003ac8:	6304      	str	r4, [r0, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8003aca:	6384      	str	r4, [r0, #56]	@ 0x38
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8003acc:	6484      	str	r4, [r0, #72]	@ 0x48
  hsai->SlotInit.FirstBitOffset  = 0;
 8003ace:	6544      	str	r4, [r0, #84]	@ 0x54
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8003ad0:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8003ad4:	6604      	str	r4, [r0, #96]	@ 0x60
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003ad6:	6844      	ldr	r4, [r0, #4]
 8003ad8:	f034 0402 	bics.w	r4, r4, #2
 8003adc:	bf0c      	ite	eq
 8003ade:	2501      	moveq	r5, #1
 8003ae0:	2500      	movne	r5, #0
    hsai->FrameInit.ActiveFrameLength = 1;
 8003ae2:	2904      	cmp	r1, #4
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8003ae4:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8003ae8:	63c5      	str	r5, [r0, #60]	@ 0x3c
    hsai->FrameInit.ActiveFrameLength = 1;
 8003aea:	bf14      	ite	ne
 8003aec:	240d      	movne	r4, #13
 8003aee:	2401      	moveq	r4, #1
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8003af0:	64c1      	str	r1, [r0, #76]	@ 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8003af2:	f44f 2180 	mov.w	r1, #262144	@ 0x40000
 8003af6:	6444      	str	r4, [r0, #68]	@ 0x44
 8003af8:	6501      	str	r1, [r0, #80]	@ 0x50
  switch (datasize)
 8003afa:	2a03      	cmp	r2, #3
 8003afc:	d803      	bhi.n	8003b06 <HAL_SAI_InitProtocol+0x52>
 8003afe:	e8df f002 	tbb	[pc, r2]
 8003b02:	3a33      	.short	0x3a33
 8003b04:	2a40      	.short	0x2a40
}
 8003b06:	2001      	movs	r0, #1
 8003b08:	bc30      	pop	{r4, r5}
 8003b0a:	4770      	bx	lr
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8003b0c:	2400      	movs	r4, #0
  hsai->SlotInit.SlotNumber      = nbslot;
 8003b0e:	65c3      	str	r3, [r0, #92]	@ 0x5c
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8003b10:	6304      	str	r4, [r0, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8003b12:	6384      	str	r4, [r0, #56]	@ 0x38
  hsai->SlotInit.FirstBitOffset  = 0;
 8003b14:	6544      	str	r4, [r0, #84]	@ 0x54
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003b16:	6844      	ldr	r4, [r0, #4]
 8003b18:	f034 0402 	bics.w	r4, r4, #2
 8003b1c:	bf14      	ite	ne
 8003b1e:	2401      	movne	r4, #1
 8003b20:	2400      	moveq	r4, #0
  if ((nbslot & 0x1) != 0)
 8003b22:	07dd      	lsls	r5, r3, #31
 8003b24:	63c4      	str	r4, [r0, #60]	@ 0x3c
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8003b26:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 8003b2a:	6484      	str	r4, [r0, #72]	@ 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8003b2c:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8003b30:	6604      	str	r4, [r0, #96]	@ 0x60
  if ((nbslot & 0x1) != 0)
 8003b32:	d4e8      	bmi.n	8003b06 <HAL_SAI_InitProtocol+0x52>
  if (protocol == SAI_I2S_STANDARD)
 8003b34:	2900      	cmp	r1, #0
 8003b36:	bf14      	ite	ne
 8003b38:	f44f 3400 	movne.w	r4, #131072	@ 0x20000
 8003b3c:	2400      	moveq	r4, #0
 8003b3e:	64c4      	str	r4, [r0, #76]	@ 0x4c
 8003b40:	bf14      	ite	ne
 8003b42:	2400      	movne	r4, #0
 8003b44:	f44f 2480 	moveq.w	r4, #262144	@ 0x40000
 8003b48:	6504      	str	r4, [r0, #80]	@ 0x50
  switch (datasize)
 8003b4a:	2a03      	cmp	r2, #3
 8003b4c:	d8db      	bhi.n	8003b06 <HAL_SAI_InitProtocol+0x52>
 8003b4e:	e8df f002 	tbb	[pc, r2]
 8003b52:	3e2a      	.short	0x3e2a
 8003b54:	341a      	.short	0x341a
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8003b56:	21e0      	movs	r1, #224	@ 0xe0
      hsai->FrameInit.FrameLength = 32 * nbslot;
 8003b58:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8003b5a:	2280      	movs	r2, #128	@ 0x80
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8003b5c:	6341      	str	r1, [r0, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 8003b5e:	6403      	str	r3, [r0, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8003b60:	6582      	str	r2, [r0, #88]	@ 0x58
}
 8003b62:	bc30      	pop	{r4, r5}
    status = HAL_SAI_Init(hsai);
 8003b64:	f7ff be98 	b.w	8003898 <HAL_SAI_Init>
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8003b68:	2180      	movs	r1, #128	@ 0x80
      hsai->FrameInit.FrameLength = 16 * nbslot;
 8003b6a:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8003b6c:	2240      	movs	r2, #64	@ 0x40
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8003b6e:	6341      	str	r1, [r0, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 16 * nbslot;
 8003b70:	6403      	str	r3, [r0, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8003b72:	6582      	str	r2, [r0, #88]	@ 0x58
  if (status == HAL_OK)
 8003b74:	e7f5      	b.n	8003b62 <HAL_SAI_InitProtocol+0xae>
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8003b76:	2280      	movs	r2, #128	@ 0x80
      hsai->FrameInit.FrameLength = 32 * nbslot;
 8003b78:	015b      	lsls	r3, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8003b7a:	6342      	str	r2, [r0, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 8003b7c:	6403      	str	r3, [r0, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8003b7e:	6582      	str	r2, [r0, #88]	@ 0x58
  if (status == HAL_OK)
 8003b80:	e7ef      	b.n	8003b62 <HAL_SAI_InitProtocol+0xae>
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8003b82:	21c0      	movs	r1, #192	@ 0xc0
 8003b84:	e7e8      	b.n	8003b58 <HAL_SAI_InitProtocol+0xa4>
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 8003b86:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8003b88:	22c0      	movs	r2, #192	@ 0xc0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8003b8a:	2580      	movs	r5, #128	@ 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8003b8c:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 8003b8e:	ea4f 1483 	mov.w	r4, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8003b92:	6342      	str	r2, [r0, #52]	@ 0x34
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 8003b94:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8003b98:	6585      	str	r5, [r0, #88]	@ 0x58
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 8003b9a:	6404      	str	r4, [r0, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 8003b9c:	6443      	str	r3, [r0, #68]	@ 0x44
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8003b9e:	d1e0      	bne.n	8003b62 <HAL_SAI_InitProtocol+0xae>
      hsai->SlotInit.FirstBitOffset = 8;
 8003ba0:	2308      	movs	r3, #8
 8003ba2:	6543      	str	r3, [r0, #84]	@ 0x54
  if (status == HAL_OK)
 8003ba4:	e7dd      	b.n	8003b62 <HAL_SAI_InitProtocol+0xae>
      hsai->FrameInit.FrameLength = 32 * (nbslot / 2);
 8003ba6:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8003ba8:	2480      	movs	r4, #128	@ 0x80
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8003baa:	2140      	movs	r1, #64	@ 0x40
      hsai->FrameInit.FrameLength = 32 * (nbslot / 2);
 8003bac:	015a      	lsls	r2, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8003bae:	6344      	str	r4, [r0, #52]	@ 0x34
      hsai->FrameInit.ActiveFrameLength = 16 * (nbslot / 2);
 8003bb0:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8003bb2:	6581      	str	r1, [r0, #88]	@ 0x58
      hsai->FrameInit.ActiveFrameLength = 16 * (nbslot / 2);
 8003bb4:	e9c0 2310 	strd	r2, r3, [r0, #64]	@ 0x40
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8003bb8:	e7d3      	b.n	8003b62 <HAL_SAI_InitProtocol+0xae>
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 8003bba:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8003bbc:	24e0      	movs	r4, #224	@ 0xe0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8003bbe:	2180      	movs	r1, #128	@ 0x80
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 8003bc0:	019a      	lsls	r2, r3, #6
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8003bc2:	6344      	str	r4, [r0, #52]	@ 0x34
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 8003bc4:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8003bc6:	6581      	str	r1, [r0, #88]	@ 0x58
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 8003bc8:	e9c0 2310 	strd	r2, r3, [r0, #64]	@ 0x40
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8003bcc:	e7c9      	b.n	8003b62 <HAL_SAI_InitProtocol+0xae>
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 8003bce:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8003bd0:	2280      	movs	r2, #128	@ 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8003bd2:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 8003bd4:	ea4f 1483 	mov.w	r4, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8003bd8:	6342      	str	r2, [r0, #52]	@ 0x34
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 8003bda:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8003bde:	6582      	str	r2, [r0, #88]	@ 0x58
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 8003be0:	e9c0 4310 	strd	r4, r3, [r0, #64]	@ 0x40
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8003be4:	d1bd      	bne.n	8003b62 <HAL_SAI_InitProtocol+0xae>
      hsai->SlotInit.FirstBitOffset = 16;
 8003be6:	2310      	movs	r3, #16
 8003be8:	6543      	str	r3, [r0, #84]	@ 0x54
  if (status == HAL_OK)
 8003bea:	e7ba      	b.n	8003b62 <HAL_SAI_InitProtocol+0xae>

08003bec <HAL_SAI_Transmit_DMA>:
{
 8003bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bf0:	460f      	mov	r7, r1
 8003bf2:	4604      	mov	r4, r0
 8003bf4:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 8003bf6:	f7fd ff11 	bl	8001a1c <HAL_GetTick>
  if ((pData == NULL) || (Size == 0))
 8003bfa:	2f00      	cmp	r7, #0
 8003bfc:	d069      	beq.n	8003cd2 <HAL_SAI_Transmit_DMA+0xe6>
 8003bfe:	fab5 f885 	clz	r8, r5
 8003c02:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8003c06:	2d00      	cmp	r5, #0
 8003c08:	d063      	beq.n	8003cd2 <HAL_SAI_Transmit_DMA+0xe6>
  if (hsai->State == HAL_SAI_STATE_READY)
 8003c0a:	f894 307d 	ldrb.w	r3, [r4, #125]	@ 0x7d
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	b2da      	uxtb	r2, r3
 8003c12:	d14f      	bne.n	8003cb4 <HAL_SAI_Transmit_DMA+0xc8>
    __HAL_LOCK(hsai);
 8003c14:	f894 307c 	ldrb.w	r3, [r4, #124]	@ 0x7c
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d04b      	beq.n	8003cb4 <HAL_SAI_Transmit_DMA+0xc8>
    hsai->XferSize = Size;
 8003c1c:	4643      	mov	r3, r8
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8003c1e:	f8c4 8080 	str.w	r8, [r4, #128]	@ 0x80
 8003c22:	4606      	mov	r6, r0
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8003c24:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
    hsai->XferSize = Size;
 8003c26:	f365 030f 	bfi	r3, r5, #0, #16
    __HAL_LOCK(hsai);
 8003c2a:	f884 207c 	strb.w	r2, [r4, #124]	@ 0x7c
    hsai->pBuffPtr = pData;
 8003c2e:	6667      	str	r7, [r4, #100]	@ 0x64
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8003c30:	4639      	mov	r1, r7
    hsai->XferSize = Size;
 8003c32:	f365 431f 	bfi	r3, r5, #16, #16
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8003c36:	6822      	ldr	r2, [r4, #0]
    hsai->XferSize = Size;
 8003c38:	66a3      	str	r3, [r4, #104]	@ 0x68
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8003c3a:	462b      	mov	r3, r5
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8003c3c:	2512      	movs	r5, #18
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8003c3e:	321c      	adds	r2, #28
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8003c40:	f884 507d 	strb.w	r5, [r4, #125]	@ 0x7d
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8003c44:	4d2b      	ldr	r5, [pc, #172]	@ (8003cf4 <HAL_SAI_Transmit_DMA+0x108>)
    hsai->hdmatx->XferAbortCallback = NULL;
 8003c46:	f8c0 8050 	str.w	r8, [r0, #80]	@ 0x50
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8003c4a:	6405      	str	r5, [r0, #64]	@ 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8003c4c:	4d2a      	ldr	r5, [pc, #168]	@ (8003cf8 <HAL_SAI_Transmit_DMA+0x10c>)
 8003c4e:	63c5      	str	r5, [r0, #60]	@ 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8003c50:	4d2a      	ldr	r5, [pc, #168]	@ (8003cfc <HAL_SAI_Transmit_DMA+0x110>)
 8003c52:	64c5      	str	r5, [r0, #76]	@ 0x4c
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8003c54:	f7fe fa64 	bl	8002120 <HAL_DMA_Start_IT>
 8003c58:	4607      	mov	r7, r0
 8003c5a:	2800      	cmp	r0, #0
 8003c5c:	d137      	bne.n	8003cce <HAL_SAI_Transmit_DMA+0xe2>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8003c5e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8003c60:	6863      	ldr	r3, [r4, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8003c62:	2a08      	cmp	r2, #8
 8003c64:	d02a      	beq.n	8003cbc <HAL_SAI_Transmit_DMA+0xd0>
 8003c66:	2205      	movs	r2, #5
 8003c68:	2161      	movs	r1, #97	@ 0x61
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003c6a:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_WCKCFG;
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	bf88      	it	hi
 8003c70:	4611      	movhi	r1, r2
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8003c72:	6822      	ldr	r2, [r4, #0]
 8003c74:	6913      	ldr	r3, [r2, #16]
 8003c76:	430b      	orrs	r3, r1
 8003c78:	6113      	str	r3, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8003c7a:	6813      	ldr	r3, [r2, #0]
 8003c7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c80:	6013      	str	r3, [r2, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8003c82:	e006      	b.n	8003c92 <HAL_SAI_Transmit_DMA+0xa6>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8003c84:	f7fd feca 	bl	8001a1c <HAL_GetTick>
 8003c88:	1b83      	subs	r3, r0, r6
 8003c8a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003c8e:	d824      	bhi.n	8003cda <HAL_SAI_Transmit_DMA+0xee>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8003c90:	6822      	ldr	r2, [r4, #0]
 8003c92:	6955      	ldr	r5, [r2, #20]
 8003c94:	f415 25e0 	ands.w	r5, r5, #458752	@ 0x70000
 8003c98:	d0f4      	beq.n	8003c84 <HAL_SAI_Transmit_DMA+0x98>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8003c9a:	6813      	ldr	r3, [r2, #0]
 8003c9c:	03db      	lsls	r3, r3, #15
 8003c9e:	d403      	bmi.n	8003ca8 <HAL_SAI_Transmit_DMA+0xbc>
      __HAL_SAI_ENABLE(hsai);
 8003ca0:	6813      	ldr	r3, [r2, #0]
 8003ca2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ca6:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4638      	mov	r0, r7
    __HAL_UNLOCK(hsai);
 8003cac:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
}
 8003cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_LOCK(hsai);
 8003cb4:	2702      	movs	r7, #2
}
 8003cb6:	4638      	mov	r0, r7
 8003cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8003cbc:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8003cc0:	2a01      	cmp	r2, #1
 8003cc2:	bf15      	itete	ne
 8003cc4:	2205      	movne	r2, #5
 8003cc6:	2215      	moveq	r2, #21
 8003cc8:	2161      	movne	r1, #97	@ 0x61
 8003cca:	2171      	moveq	r1, #113	@ 0x71
 8003ccc:	e7cd      	b.n	8003c6a <HAL_SAI_Transmit_DMA+0x7e>
      __HAL_UNLOCK(hsai);
 8003cce:	f884 807c 	strb.w	r8, [r4, #124]	@ 0x7c
    return  HAL_ERROR;
 8003cd2:	2701      	movs	r7, #1
}
 8003cd4:	4638      	mov	r0, r7
 8003cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8003cda:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
        return HAL_TIMEOUT;
 8003cde:	2703      	movs	r7, #3
        __HAL_UNLOCK(hsai);
 8003ce0:	f884 507c 	strb.w	r5, [r4, #124]	@ 0x7c
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8003ce4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
}
 8003ce8:	4638      	mov	r0, r7
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8003cea:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
}
 8003cee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cf2:	bf00      	nop
 8003cf4:	08003e35 	.word	0x08003e35
 8003cf8:	08003dcd 	.word	0x08003dcd
 8003cfc:	08003eb5 	.word	0x08003eb5

08003d00 <HAL_SAI_Receive_DMA>:
  if ((pData == NULL) || (Size == 0))
 8003d00:	2900      	cmp	r1, #0
 8003d02:	d058      	beq.n	8003db6 <HAL_SAI_Receive_DMA+0xb6>
 8003d04:	4613      	mov	r3, r2
{
 8003d06:	b570      	push	{r4, r5, r6, lr}
  if ((pData == NULL) || (Size == 0))
 8003d08:	fab2 f582 	clz	r5, r2
 8003d0c:	096d      	lsrs	r5, r5, #5
 8003d0e:	2a00      	cmp	r2, #0
 8003d10:	d046      	beq.n	8003da0 <HAL_SAI_Receive_DMA+0xa0>
  if (hsai->State == HAL_SAI_STATE_READY)
 8003d12:	f890 207d 	ldrb.w	r2, [r0, #125]	@ 0x7d
 8003d16:	4604      	mov	r4, r0
 8003d18:	2a01      	cmp	r2, #1
 8003d1a:	b2d0      	uxtb	r0, r2
 8003d1c:	d13c      	bne.n	8003d98 <HAL_SAI_Receive_DMA+0x98>
    __HAL_LOCK(hsai);
 8003d1e:	f894 207c 	ldrb.w	r2, [r4, #124]	@ 0x7c
 8003d22:	2a01      	cmp	r2, #1
 8003d24:	d038      	beq.n	8003d98 <HAL_SAI_Receive_DMA+0x98>
 8003d26:	f884 007c 	strb.w	r0, [r4, #124]	@ 0x7c
    hsai->XferSize = Size;
 8003d2a:	4628      	mov	r0, r5
    hsai->pBuffPtr = pData;
 8003d2c:	6661      	str	r1, [r4, #100]	@ 0x64
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8003d2e:	460a      	mov	r2, r1
    hsai->XferSize = Size;
 8003d30:	f363 000f 	bfi	r0, r3, #0, #16
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8003d34:	2122      	movs	r1, #34	@ 0x22
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8003d36:	4e21      	ldr	r6, [pc, #132]	@ (8003dbc <HAL_SAI_Receive_DMA+0xbc>)
    hsai->XferSize = Size;
 8003d38:	f363 401f 	bfi	r0, r3, #16, #16
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8003d3c:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8003d40:	f884 107d 	strb.w	r1, [r4, #125]	@ 0x7d
    hsai->XferSize = Size;
 8003d44:	66a0      	str	r0, [r4, #104]	@ 0x68
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8003d46:	6f20      	ldr	r0, [r4, #112]	@ 0x70
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8003d48:	6821      	ldr	r1, [r4, #0]
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8003d4a:	6406      	str	r6, [r0, #64]	@ 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8003d4c:	4e1c      	ldr	r6, [pc, #112]	@ (8003dc0 <HAL_SAI_Receive_DMA+0xc0>)
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8003d4e:	311c      	adds	r1, #28
    hsai->hdmarx->XferAbortCallback = NULL;
 8003d50:	6505      	str	r5, [r0, #80]	@ 0x50
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8003d52:	63c6      	str	r6, [r0, #60]	@ 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8003d54:	4e1b      	ldr	r6, [pc, #108]	@ (8003dc4 <HAL_SAI_Receive_DMA+0xc4>)
 8003d56:	64c6      	str	r6, [r0, #76]	@ 0x4c
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8003d58:	f7fe f9e2 	bl	8002120 <HAL_DMA_Start_IT>
 8003d5c:	b9f0      	cbnz	r0, 8003d9c <HAL_SAI_Receive_DMA+0x9c>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8003d5e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8003d60:	6863      	ldr	r3, [r4, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8003d62:	2a08      	cmp	r2, #8
 8003d64:	d01e      	beq.n	8003da4 <HAL_SAI_Receive_DMA+0xa4>
 8003d66:	2205      	movs	r2, #5
 8003d68:	2161      	movs	r1, #97	@ 0x61
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003d6a:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_WCKCFG;
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	bf88      	it	hi
 8003d70:	4611      	movhi	r1, r2
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8003d72:	6823      	ldr	r3, [r4, #0]
 8003d74:	691a      	ldr	r2, [r3, #16]
 8003d76:	430a      	orrs	r2, r1
 8003d78:	611a      	str	r2, [r3, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8003d80:	601a      	str	r2, [r3, #0]
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	03d2      	lsls	r2, r2, #15
 8003d86:	d403      	bmi.n	8003d90 <HAL_SAI_Receive_DMA+0x90>
      __HAL_SAI_ENABLE(hsai);
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003d8e:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 8003d90:	2300      	movs	r3, #0
 8003d92:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
}
 8003d96:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LOCK(hsai);
 8003d98:	2002      	movs	r0, #2
}
 8003d9a:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_UNLOCK(hsai);
 8003d9c:	f884 507c 	strb.w	r5, [r4, #124]	@ 0x7c
    return  HAL_ERROR;
 8003da0:	2001      	movs	r0, #1
}
 8003da2:	bd70      	pop	{r4, r5, r6, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8003da4:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8003da8:	2a01      	cmp	r2, #1
 8003daa:	bf15      	itete	ne
 8003dac:	2205      	movne	r2, #5
 8003dae:	2215      	moveq	r2, #21
 8003db0:	2161      	movne	r1, #97	@ 0x61
 8003db2:	2171      	moveq	r1, #113	@ 0x71
 8003db4:	e7d9      	b.n	8003d6a <HAL_SAI_Receive_DMA+0x6a>
    return  HAL_ERROR;
 8003db6:	2001      	movs	r0, #1
}
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	08003ea5 	.word	0x08003ea5
 8003dc0:	08003e41 	.word	0x08003e41
 8003dc4:	08003eb5 	.word	0x08003eb5

08003dc8 <HAL_SAI_TxCpltCallback>:
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop

08003dcc <SAI_DMATxCplt>:
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003dcc:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dce:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003dd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
{
 8003dd4:	b510      	push	{r4, lr}
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003dd6:	d01b      	beq.n	8003e10 <SAI_DMATxCplt+0x44>
  {
    hsai->XferCount = 0;

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8003dd8:	6803      	ldr	r3, [r0, #0]
    hsai->XferCount = 0;
 8003dda:	f04f 0c00 	mov.w	ip, #0
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8003dde:	6b04      	ldr	r4, [r0, #48]	@ 0x30
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8003de0:	6819      	ldr	r1, [r3, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8003de2:	2c08      	cmp	r4, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8003de4:	6842      	ldr	r2, [r0, #4]
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8003de6:	f421 3100 	bic.w	r1, r1, #131072	@ 0x20000
    hsai->XferCount = 0;
 8003dea:	f8a0 c06a 	strh.w	ip, [r0, #106]	@ 0x6a
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8003dee:	6019      	str	r1, [r3, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8003df0:	d011      	beq.n	8003e16 <SAI_DMATxCplt+0x4a>
 8003df2:	f06f 0161 	mvn.w	r1, #97	@ 0x61
 8003df6:	f06f 0405 	mvn.w	r4, #5
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003dfa:	3a02      	subs	r2, #2

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));

    hsai->State = HAL_SAI_STATE_READY;
 8003dfc:	f04f 0c01 	mov.w	ip, #1
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003e00:	2a01      	cmp	r2, #1
 8003e02:	bf88      	it	hi
 8003e04:	4621      	movhi	r1, r4
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8003e06:	691a      	ldr	r2, [r3, #16]
 8003e08:	400a      	ands	r2, r1
 8003e0a:	611a      	str	r2, [r3, #16]
    hsai->State = HAL_SAI_STATE_READY;
 8003e0c:	f880 c07d 	strb.w	ip, [r0, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8003e10:	f7ff ffda 	bl	8003dc8 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8003e14:	bd10      	pop	{r4, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8003e16:	f022 0102 	bic.w	r1, r2, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8003e1a:	2901      	cmp	r1, #1
 8003e1c:	bf15      	itete	ne
 8003e1e:	f06f 0161 	mvnne.w	r1, #97	@ 0x61
 8003e22:	f06f 0171 	mvneq.w	r1, #113	@ 0x71
 8003e26:	f06f 0405 	mvnne.w	r4, #5
 8003e2a:	f06f 0415 	mvneq.w	r4, #21
 8003e2e:	e7e4      	b.n	8003dfa <SAI_DMATxCplt+0x2e>

08003e30 <HAL_SAI_TxHalfCpltCallback>:
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop

08003e34 <SAI_DMATxHalfCplt>:
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8003e34:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 8003e36:	b508      	push	{r3, lr}
  HAL_SAI_TxHalfCpltCallback(hsai);
 8003e38:	f7ff fffa 	bl	8003e30 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8003e3c:	bd08      	pop	{r3, pc}
 8003e3e:	bf00      	nop

08003e40 <SAI_DMARxCplt>:
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003e40:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e42:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003e44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
{
 8003e48:	b510      	push	{r4, lr}
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003e4a:	d01b      	beq.n	8003e84 <SAI_DMARxCplt+0x44>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8003e4c:	6803      	ldr	r3, [r0, #0]
    hsai->XferCount = 0;
 8003e4e:	f04f 0c00 	mov.w	ip, #0
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8003e52:	6b04      	ldr	r4, [r0, #48]	@ 0x30
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8003e54:	6819      	ldr	r1, [r3, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8003e56:	2c08      	cmp	r4, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8003e58:	6842      	ldr	r2, [r0, #4]
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8003e5a:	f421 3100 	bic.w	r1, r1, #131072	@ 0x20000
 8003e5e:	6019      	str	r1, [r3, #0]
    hsai->XferCount = 0;
 8003e60:	f8a0 c06a 	strh.w	ip, [r0, #106]	@ 0x6a
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8003e64:	d011      	beq.n	8003e8a <SAI_DMARxCplt+0x4a>
 8003e66:	f06f 0161 	mvn.w	r1, #97	@ 0x61
 8003e6a:	f06f 0405 	mvn.w	r4, #5
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003e6e:	3a02      	subs	r2, #2

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));

    hsai->State = HAL_SAI_STATE_READY;
 8003e70:	f04f 0c01 	mov.w	ip, #1
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003e74:	2a01      	cmp	r2, #1
 8003e76:	bf88      	it	hi
 8003e78:	4621      	movhi	r1, r4
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8003e7a:	691a      	ldr	r2, [r3, #16]
 8003e7c:	400a      	ands	r2, r1
 8003e7e:	611a      	str	r2, [r3, #16]
    hsai->State = HAL_SAI_STATE_READY;
 8003e80:	f880 c07d 	strb.w	ip, [r0, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8003e84:	f7fd f868 	bl	8000f58 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8003e88:	bd10      	pop	{r4, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8003e8a:	f022 0102 	bic.w	r1, r2, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8003e8e:	2901      	cmp	r1, #1
 8003e90:	bf15      	itete	ne
 8003e92:	f06f 0161 	mvnne.w	r1, #97	@ 0x61
 8003e96:	f06f 0171 	mvneq.w	r1, #113	@ 0x71
 8003e9a:	f06f 0405 	mvnne.w	r4, #5
 8003e9e:	f06f 0415 	mvneq.w	r4, #21
 8003ea2:	e7e4      	b.n	8003e6e <SAI_DMARxCplt+0x2e>

08003ea4 <SAI_DMARxHalfCplt>:
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8003ea4:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 8003ea6:	b508      	push	{r3, lr}
  HAL_SAI_RxHalfCpltCallback(hsai);
 8003ea8:	f7fd f83e 	bl	8000f28 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8003eac:	bd08      	pop	{r3, pc}
 8003eae:	bf00      	nop

08003eb0 <HAL_SAI_ErrorCallback>:
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop

08003eb4 <SAI_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003eb4:	6b80      	ldr	r0, [r0, #56]	@ 0x38

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8003eb6:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8003eba:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8003ebc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
{
 8003ec0:	b510      	push	{r4, lr}
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8003ec2:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8003ec6:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d006      	beq.n	8003eda <SAI_DMAError+0x26>
 8003ecc:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 8003ece:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d002      	beq.n	8003eda <SAI_DMAError+0x26>
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8003ed4:	f7ff ffec 	bl	8003eb0 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8003ed8:	bd10      	pop	{r4, pc}
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8003eda:	6801      	ldr	r1, [r0, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8003edc:	4b11      	ldr	r3, [pc, #68]	@ (8003f24 <SAI_DMAError+0x70>)
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8003ede:	680a      	ldr	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8003ee0:	681b      	ldr	r3, [r3, #0]
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8003ee2:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8003ee6:	4c10      	ldr	r4, [pc, #64]	@ (8003f28 <SAI_DMAError+0x74>)
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8003ee8:	600a      	str	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8003eea:	fba4 4303 	umull	r4, r3, r4, r3
  __HAL_SAI_DISABLE(hsai);
 8003eee:	680a      	ldr	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8003ef0:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
 8003ef2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8003ef6:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 8003ef8:	600a      	str	r2, [r1, #0]
 8003efa:	e002      	b.n	8003f02 <SAI_DMAError+0x4e>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8003efc:	680a      	ldr	r2, [r1, #0]
 8003efe:	03d2      	lsls	r2, r2, #15
 8003f00:	d507      	bpl.n	8003f12 <SAI_DMAError+0x5e>
    if (count-- == 0)
 8003f02:	3b01      	subs	r3, #1
 8003f04:	d2fa      	bcs.n	8003efc <SAI_DMAError+0x48>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8003f06:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 8003f0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f0e:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_READY;
 8003f12:	2201      	movs	r2, #1
    hsai->XferCount = 0U;
 8003f14:	2300      	movs	r3, #0
    hsai->State = HAL_SAI_STATE_READY;
 8003f16:	f880 207d 	strb.w	r2, [r0, #125]	@ 0x7d
    hsai->XferCount = 0U;
 8003f1a:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
  HAL_SAI_ErrorCallback(hsai);
 8003f1e:	f7ff ffc7 	bl	8003eb0 <HAL_SAI_ErrorCallback>
}
 8003f22:	bd10      	pop	{r4, pc}
 8003f24:	20000134 	.word	0x20000134
 8003f28:	95cbec1b 	.word	0x95cbec1b

08003f2c <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f2c:	2800      	cmp	r0, #0
 8003f2e:	f000 8089 	beq.w	8004044 <HAL_TIM_Base_Init+0x118>
{
 8003f32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f34:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003f38:	4604      	mov	r4, r0
 8003f3a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d07b      	beq.n	800403a <HAL_TIM_Base_Init+0x10e>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f42:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003f44:	2302      	movs	r3, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f46:	4940      	ldr	r1, [pc, #256]	@ (8004048 <HAL_TIM_Base_Init+0x11c>)
 8003f48:	4840      	ldr	r0, [pc, #256]	@ (800404c <HAL_TIM_Base_Init+0x120>)
 8003f4a:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8003f4e:	eba2 0101 	sub.w	r1, r2, r1
  htim->State = HAL_TIM_STATE_BUSY;
 8003f52:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f56:	eba2 0e00 	sub.w	lr, r2, r0
  tmpcr1 = TIMx->CR1;
 8003f5a:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f5c:	fab1 f181 	clz	r1, r1
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f60:	69a7      	ldr	r7, [r4, #24]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f62:	fabe fe8e 	clz	lr, lr

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f66:	6865      	ldr	r5, [r4, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f68:	ea4f 1151 	mov.w	r1, r1, lsr #5
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f6c:	68e6      	ldr	r6, [r4, #12]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f6e:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8003f72:	d04d      	beq.n	8004010 <HAL_TIM_Base_Init+0xe4>
 8003f74:	2900      	cmp	r1, #0
 8003f76:	d14b      	bne.n	8004010 <HAL_TIM_Base_Init+0xe4>
 8003f78:	f8df c0d8 	ldr.w	ip, [pc, #216]	@ 8004054 <HAL_TIM_Base_Init+0x128>
 8003f7c:	4562      	cmp	r2, ip
 8003f7e:	d047      	beq.n	8004010 <HAL_TIM_Base_Init+0xe4>
 8003f80:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8003f84:	4562      	cmp	r2, ip
 8003f86:	d043      	beq.n	8004010 <HAL_TIM_Base_Init+0xe4>
 8003f88:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8003f8c:	4562      	cmp	r2, ip
 8003f8e:	d03f      	beq.n	8004010 <HAL_TIM_Base_Init+0xe4>
 8003f90:	f1be 0f00 	cmp.w	lr, #0
 8003f94:	d13c      	bne.n	8004010 <HAL_TIM_Base_Init+0xe4>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f96:	492e      	ldr	r1, [pc, #184]	@ (8004050 <HAL_TIM_Base_Init+0x124>)
 8003f98:	428a      	cmp	r2, r1
 8003f9a:	d013      	beq.n	8003fc4 <HAL_TIM_Base_Init+0x98>
 8003f9c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8003fa0:	428a      	cmp	r2, r1
 8003fa2:	d00f      	beq.n	8003fc4 <HAL_TIM_Base_Init+0x98>
 8003fa4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8003fa8:	428a      	cmp	r2, r1
 8003faa:	d00b      	beq.n	8003fc4 <HAL_TIM_Base_Init+0x98>
 8003fac:	f5a1 3198 	sub.w	r1, r1, #77824	@ 0x13000
 8003fb0:	428a      	cmp	r2, r1
 8003fb2:	d007      	beq.n	8003fc4 <HAL_TIM_Base_Init+0x98>
 8003fb4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8003fb8:	428a      	cmp	r2, r1
 8003fba:	d003      	beq.n	8003fc4 <HAL_TIM_Base_Init+0x98>
 8003fbc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8003fc0:	428a      	cmp	r2, r1
 8003fc2:	d103      	bne.n	8003fcc <HAL_TIM_Base_Init+0xa0>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fc8:	6921      	ldr	r1, [r4, #16]
 8003fca:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fcc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fd0:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 8003fd2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fd4:	62d6      	str	r6, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003fd6:	6295      	str	r5, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fd8:	2301      	movs	r3, #1
  return HAL_OK;
 8003fda:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8003fdc:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fde:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fe2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8003fe6:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003fea:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003fee:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8003ff2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003ff6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ffa:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003ffe:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8004002:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8004006:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800400a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800400e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 8004010:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004012:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8004016:	4303      	orrs	r3, r0
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004018:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800401a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800401e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004020:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004024:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 8004026:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004028:	62d6      	str	r6, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800402a:	6295      	str	r5, [r2, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800402c:	b911      	cbnz	r1, 8004034 <HAL_TIM_Base_Init+0x108>
 800402e:	f1be 0f00 	cmp.w	lr, #0
 8004032:	d0d1      	beq.n	8003fd8 <HAL_TIM_Base_Init+0xac>
    TIMx->RCR = Structure->RepetitionCounter;
 8004034:	6963      	ldr	r3, [r4, #20]
 8004036:	6313      	str	r3, [r2, #48]	@ 0x30
 8004038:	e7ce      	b.n	8003fd8 <HAL_TIM_Base_Init+0xac>
    htim->Lock = HAL_UNLOCKED;
 800403a:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800403e:	f7fd fc25 	bl	800188c <HAL_TIM_Base_MspInit>
 8004042:	e77e      	b.n	8003f42 <HAL_TIM_Base_Init+0x16>
    return HAL_ERROR;
 8004044:	2001      	movs	r0, #1
}
 8004046:	4770      	bx	lr
 8004048:	40010000 	.word	0x40010000
 800404c:	40010400 	.word	0x40010400
 8004050:	40014000 	.word	0x40014000
 8004054:	40000400 	.word	0x40000400

08004058 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004058:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800405c:	2b01      	cmp	r3, #1
 800405e:	d13d      	bne.n	80040dc <HAL_TIM_Base_Start_IT+0x84>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004060:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004062:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004064:	4b1e      	ldr	r3, [pc, #120]	@ (80040e0 <HAL_TIM_Base_Start_IT+0x88>)
 8004066:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800406a:	bf18      	it	ne
 800406c:	429a      	cmpne	r2, r3
{
 800406e:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004070:	bf0c      	ite	eq
 8004072:	2301      	moveq	r3, #1
 8004074:	2300      	movne	r3, #0
 8004076:	4d1b      	ldr	r5, [pc, #108]	@ (80040e4 <HAL_TIM_Base_Start_IT+0x8c>)
 8004078:	4c1b      	ldr	r4, [pc, #108]	@ (80040e8 <HAL_TIM_Base_Start_IT+0x90>)
 800407a:	42aa      	cmp	r2, r5
 800407c:	bf08      	it	eq
 800407e:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8004082:	f880 103d 	strb.w	r1, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004086:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004088:	42a2      	cmp	r2, r4
 800408a:	bf08      	it	eq
 800408c:	f043 0301 	orreq.w	r3, r3, #1
 8004090:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004094:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004098:	4814      	ldr	r0, [pc, #80]	@ (80040ec <HAL_TIM_Base_Start_IT+0x94>)
 800409a:	42a2      	cmp	r2, r4
 800409c:	bf08      	it	eq
 800409e:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040a2:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040a4:	4282      	cmp	r2, r0
 80040a6:	bf08      	it	eq
 80040a8:	f043 0301 	orreq.w	r3, r3, #1
 80040ac:	4910      	ldr	r1, [pc, #64]	@ (80040f0 <HAL_TIM_Base_Start_IT+0x98>)
 80040ae:	428a      	cmp	r2, r1
 80040b0:	bf08      	it	eq
 80040b2:	f043 0301 	orreq.w	r3, r3, #1
 80040b6:	b913      	cbnz	r3, 80040be <HAL_TIM_Base_Start_IT+0x66>
 80040b8:	4b0e      	ldr	r3, [pc, #56]	@ (80040f4 <HAL_TIM_Base_Start_IT+0x9c>)
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d107      	bne.n	80040ce <HAL_TIM_Base_Start_IT+0x76>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040be:	6891      	ldr	r1, [r2, #8]
 80040c0:	4b0d      	ldr	r3, [pc, #52]	@ (80040f8 <HAL_TIM_Base_Start_IT+0xa0>)
 80040c2:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040c4:	2b06      	cmp	r3, #6
 80040c6:	d006      	beq.n	80040d6 <HAL_TIM_Base_Start_IT+0x7e>
 80040c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040cc:	d003      	beq.n	80040d6 <HAL_TIM_Base_Start_IT+0x7e>
      __HAL_TIM_ENABLE(htim);
 80040ce:	6813      	ldr	r3, [r2, #0]
 80040d0:	f043 0301 	orr.w	r3, r3, #1
 80040d4:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80040d6:	2000      	movs	r0, #0
}
 80040d8:	bc30      	pop	{r4, r5}
 80040da:	4770      	bx	lr
    return HAL_ERROR;
 80040dc:	2001      	movs	r0, #1
}
 80040de:	4770      	bx	lr
 80040e0:	40010000 	.word	0x40010000
 80040e4:	40000400 	.word	0x40000400
 80040e8:	40000800 	.word	0x40000800
 80040ec:	40010400 	.word	0x40010400
 80040f0:	40014000 	.word	0x40014000
 80040f4:	40001800 	.word	0x40001800
 80040f8:	00010007 	.word	0x00010007

080040fc <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80040fc:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8004100:	2b01      	cmp	r3, #1
 8004102:	d06f      	beq.n	80041e4 <HAL_TIM_ConfigClockSource+0xe8>
 8004104:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8004106:	2302      	movs	r3, #2
{
 8004108:	b430      	push	{r4, r5}
  tmpsmcr = htim->Instance->SMCR;
 800410a:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(htim);
 800410c:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800410e:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_LOCK(htim);
 8004112:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004116:	4b4d      	ldr	r3, [pc, #308]	@ (800424c <HAL_TIM_ConfigClockSource+0x150>)
  tmpsmcr = htim->Instance->SMCR;
 8004118:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800411a:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 800411c:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 800411e:	680b      	ldr	r3, [r1, #0]
 8004120:	2b60      	cmp	r3, #96	@ 0x60
 8004122:	d061      	beq.n	80041e8 <HAL_TIM_ConfigClockSource+0xec>
 8004124:	d824      	bhi.n	8004170 <HAL_TIM_ConfigClockSource+0x74>
 8004126:	2b40      	cmp	r3, #64	@ 0x40
 8004128:	d077      	beq.n	800421a <HAL_TIM_ConfigClockSource+0x11e>
 800412a:	d94a      	bls.n	80041c2 <HAL_TIM_ConfigClockSource+0xc6>
 800412c:	2b50      	cmp	r3, #80	@ 0x50
 800412e:	d117      	bne.n	8004160 <HAL_TIM_ConfigClockSource+0x64>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004130:	684b      	ldr	r3, [r1, #4]
 8004132:	68c8      	ldr	r0, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004134:	6a21      	ldr	r1, [r4, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004136:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800413a:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800413c:	6a23      	ldr	r3, [r4, #32]
 800413e:	f023 0301 	bic.w	r3, r3, #1
 8004142:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004144:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004146:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800414a:	ea43 1300 	orr.w	r3, r3, r0, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800414e:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8004150:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004152:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004154:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004158:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800415c:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800415e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004160:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8004162:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8004164:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8004168:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 800416c:	bc30      	pop	{r4, r5}
 800416e:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8004170:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004174:	d0f3      	beq.n	800415e <HAL_TIM_ConfigClockSource+0x62>
 8004176:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800417a:	d110      	bne.n	800419e <HAL_TIM_ConfigClockSource+0xa2>
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800417c:	68a0      	ldr	r0, [r4, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800417e:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 8004182:	432b      	orrs	r3, r5
 8004184:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004186:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  HAL_StatusTypeDef status = HAL_OK;
 800418a:	2000      	movs	r0, #0
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800418c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8004190:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004192:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004194:	68a3      	ldr	r3, [r4, #8]
 8004196:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800419a:	60a3      	str	r3, [r4, #8]
      break;
 800419c:	e7e0      	b.n	8004160 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 800419e:	2b70      	cmp	r3, #112	@ 0x70
 80041a0:	d1de      	bne.n	8004160 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr = TIMx->SMCR;
 80041a2:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041a4:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 80041a8:	432b      	orrs	r3, r5
 80041aa:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041ac:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041b0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80041b4:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80041b6:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 80041b8:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041ba:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 80041be:	60a3      	str	r3, [r4, #8]
      break;
 80041c0:	e7cd      	b.n	800415e <HAL_TIM_ConfigClockSource+0x62>
  switch (sClockSourceConfig->ClockSource)
 80041c2:	2b20      	cmp	r3, #32
 80041c4:	d002      	beq.n	80041cc <HAL_TIM_ConfigClockSource+0xd0>
 80041c6:	d909      	bls.n	80041dc <HAL_TIM_ConfigClockSource+0xe0>
 80041c8:	2b30      	cmp	r3, #48	@ 0x30
 80041ca:	d1c9      	bne.n	8004160 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr = TIMx->SMCR;
 80041cc:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80041ce:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041d2:	430b      	orrs	r3, r1
 80041d4:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 80041d8:	60a3      	str	r3, [r4, #8]
}
 80041da:	e7c0      	b.n	800415e <HAL_TIM_ConfigClockSource+0x62>
  switch (sClockSourceConfig->ClockSource)
 80041dc:	f033 0110 	bics.w	r1, r3, #16
 80041e0:	d1be      	bne.n	8004160 <HAL_TIM_ConfigClockSource+0x64>
 80041e2:	e7f3      	b.n	80041cc <HAL_TIM_ConfigClockSource+0xd0>
  __HAL_LOCK(htim);
 80041e4:	2002      	movs	r0, #2
}
 80041e6:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041e8:	6a23      	ldr	r3, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041ea:	6848      	ldr	r0, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041ec:	f023 0310 	bic.w	r3, r3, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041f0:	68cd      	ldr	r5, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041f2:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041f4:	69a1      	ldr	r1, [r4, #24]
  tmpccer = TIMx->CCER;
 80041f6:	6a23      	ldr	r3, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041f8:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041fc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004200:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8004204:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8004208:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 800420a:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800420c:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800420e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004212:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8004216:	60a3      	str	r3, [r4, #8]
}
 8004218:	e7a1      	b.n	800415e <HAL_TIM_ConfigClockSource+0x62>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800421a:	684b      	ldr	r3, [r1, #4]
 800421c:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 800421e:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004220:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8004224:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004226:	6a23      	ldr	r3, [r4, #32]
 8004228:	f023 0301 	bic.w	r3, r3, #1
 800422c:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800422e:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004230:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004234:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8004238:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 800423a:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800423c:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800423e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004242:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8004246:	60a3      	str	r3, [r4, #8]
}
 8004248:	e789      	b.n	800415e <HAL_TIM_ConfigClockSource+0x62>
 800424a:	bf00      	nop
 800424c:	fffe0088 	.word	0xfffe0088

08004250 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004250:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8004254:	2b01      	cmp	r3, #1
 8004256:	d04b      	beq.n	80042f0 <HAL_TIMEx_MasterConfigSynchronization+0xa0>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004258:	6803      	ldr	r3, [r0, #0]
 800425a:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800425c:	2002      	movs	r0, #2
{
 800425e:	b430      	push	{r4, r5}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004260:	4d24      	ldr	r5, [pc, #144]	@ (80042f4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004262:	f882 003d 	strb.w	r0, [r2, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004266:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8004268:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800426a:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800426c:	d029      	beq.n	80042c2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800426e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8004272:	42ab      	cmp	r3, r5
 8004274:	d025      	beq.n	80042c2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004276:	4d20      	ldr	r5, [pc, #128]	@ (80042f8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8004278:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800427c:	42ab      	cmp	r3, r5
 800427e:	bf18      	it	ne
 8004280:	f1b3 4f80 	cmpne.w	r3, #1073741824	@ 0x40000000
 8004284:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8004288:	bf0c      	ite	eq
 800428a:	f04f 0c01 	moveq.w	ip, #1
 800428e:	f04f 0c00 	movne.w	ip, #0
 8004292:	42ab      	cmp	r3, r5
 8004294:	bf08      	it	eq
 8004296:	f04c 0c01 	orreq.w	ip, ip, #1
 800429a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800429e:	42ab      	cmp	r3, r5
 80042a0:	bf08      	it	eq
 80042a2:	f04c 0c01 	orreq.w	ip, ip, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042a6:	680d      	ldr	r5, [r1, #0]
 80042a8:	4328      	orrs	r0, r5
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042aa:	4d14      	ldr	r5, [pc, #80]	@ (80042fc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
  htim->Instance->CR2 = tmpcr2;
 80042ac:	6058      	str	r0, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042ae:	42ab      	cmp	r3, r5
 80042b0:	bf14      	ite	ne
 80042b2:	4660      	movne	r0, ip
 80042b4:	f04c 0001 	orreq.w	r0, ip, #1
 80042b8:	b960      	cbnz	r0, 80042d4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80042ba:	4811      	ldr	r0, [pc, #68]	@ (8004300 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80042bc:	4283      	cmp	r3, r0
 80042be:	d009      	beq.n	80042d4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80042c0:	e00d      	b.n	80042de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80042c2:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80042c4:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80042c8:	4328      	orrs	r0, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042ca:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80042cc:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042d0:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 80042d2:	6058      	str	r0, [r3, #4]
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042d4:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042d6:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042da:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042dc:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80042de:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80042e0:	2101      	movs	r1, #1

  return HAL_OK;
 80042e2:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 80042e4:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80042e8:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 80042ec:	bc30      	pop	{r4, r5}
 80042ee:	4770      	bx	lr
  __HAL_LOCK(htim);
 80042f0:	2002      	movs	r0, #2
}
 80042f2:	4770      	bx	lr
 80042f4:	40010000 	.word	0x40010000
 80042f8:	40000400 	.word	0x40000400
 80042fc:	40014000 	.word	0x40014000
 8004300:	40001800 	.word	0x40001800

08004304 <memset>:
 8004304:	4402      	add	r2, r0
 8004306:	4603      	mov	r3, r0
 8004308:	4293      	cmp	r3, r2
 800430a:	d100      	bne.n	800430e <memset+0xa>
 800430c:	4770      	bx	lr
 800430e:	f803 1b01 	strb.w	r1, [r3], #1
 8004312:	e7f9      	b.n	8004308 <memset+0x4>

08004314 <__libc_init_array>:
 8004314:	b570      	push	{r4, r5, r6, lr}
 8004316:	4d0d      	ldr	r5, [pc, #52]	@ (800434c <__libc_init_array+0x38>)
 8004318:	4c0d      	ldr	r4, [pc, #52]	@ (8004350 <__libc_init_array+0x3c>)
 800431a:	1b64      	subs	r4, r4, r5
 800431c:	10a4      	asrs	r4, r4, #2
 800431e:	2600      	movs	r6, #0
 8004320:	42a6      	cmp	r6, r4
 8004322:	d109      	bne.n	8004338 <__libc_init_array+0x24>
 8004324:	4d0b      	ldr	r5, [pc, #44]	@ (8004354 <__libc_init_array+0x40>)
 8004326:	4c0c      	ldr	r4, [pc, #48]	@ (8004358 <__libc_init_array+0x44>)
 8004328:	f000 f818 	bl	800435c <_init>
 800432c:	1b64      	subs	r4, r4, r5
 800432e:	10a4      	asrs	r4, r4, #2
 8004330:	2600      	movs	r6, #0
 8004332:	42a6      	cmp	r6, r4
 8004334:	d105      	bne.n	8004342 <__libc_init_array+0x2e>
 8004336:	bd70      	pop	{r4, r5, r6, pc}
 8004338:	f855 3b04 	ldr.w	r3, [r5], #4
 800433c:	4798      	blx	r3
 800433e:	3601      	adds	r6, #1
 8004340:	e7ee      	b.n	8004320 <__libc_init_array+0xc>
 8004342:	f855 3b04 	ldr.w	r3, [r5], #4
 8004346:	4798      	blx	r3
 8004348:	3601      	adds	r6, #1
 800434a:	e7f2      	b.n	8004332 <__libc_init_array+0x1e>
 800434c:	08004394 	.word	0x08004394
 8004350:	08004394 	.word	0x08004394
 8004354:	08004394 	.word	0x08004394
 8004358:	08004398 	.word	0x08004398

0800435c <_init>:
 800435c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800435e:	bf00      	nop
 8004360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004362:	bc08      	pop	{r3}
 8004364:	469e      	mov	lr, r3
 8004366:	4770      	bx	lr

08004368 <_fini>:
 8004368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800436a:	bf00      	nop
 800436c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800436e:	bc08      	pop	{r3}
 8004370:	469e      	mov	lr, r3
 8004372:	4770      	bx	lr
