
STM32F769_Audio_Init.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d24  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003f1c  08003f1c  00004f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f34  08003f34  000050dc  2**0
                  CONTENTS
  4 .ARM          00000008  08003f34  08003f34  00004f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f3c  08003f3c  000050dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f3c  08003f3c  00004f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f40  08003f40  00004f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  08003f44  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001410  200000e0  08004020  000050e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200014f0  08004020  000054f0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000050dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d4c2  00000000  00000000  0000510a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bea  00000000  00000000  000225cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000f9b8  00000000  00000000  000261b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001030  00000000  00000000  00035b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001d51  00000000  00000000  00036ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002f9e7  00000000  00000000  000388f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024904  00000000  00000000  000682d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011d0be  00000000  00000000  0008cbdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001a9c9a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002fbc  00000000  00000000  001a9ce0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  001acc9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	200000e0 	.word	0x200000e0
 8000214:	00000000 	.word	0x00000000
 8000218:	08003f04 	.word	0x08003f04

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	200000e4 	.word	0x200000e4
 8000234:	08003f04 	.word	0x08003f04

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <Codec>:

    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
}


void Codec(void){
 8000528:	b5f0      	push	{r4, r5, r6, r7, lr}
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 800052a:	2200      	movs	r2, #0
void Codec(void){
 800052c:	b085      	sub	sp, #20
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 800052e:	4db5      	ldr	r5, [pc, #724]	@ (8000804 <Codec+0x2dc>)
 8000530:	2464      	movs	r4, #100	@ 0x64
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000532:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000534:	2304      	movs	r3, #4
 8000536:	aa03      	add	r2, sp, #12
 8000538:	2134      	movs	r1, #52	@ 0x34
 800053a:	4628      	mov	r0, r5
 800053c:	9400      	str	r4, [sp, #0]
 800053e:	f001 ff43 	bl	80023c8 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000542:	4ab1      	ldr	r2, [pc, #708]	@ (8000808 <Codec+0x2e0>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000544:	2304      	movs	r3, #4
 8000546:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000548:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 800054a:	4628      	mov	r0, r5
 800054c:	aa03      	add	r2, sp, #12
 800054e:	9400      	str	r4, [sp, #0]
 8000550:	f001 ff3a 	bl	80023c8 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000554:	f241 7208 	movw	r2, #5896	@ 0x1708
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000558:	2304      	movs	r3, #4
 800055a:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 800055c:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 800055e:	4628      	mov	r0, r5
 8000560:	aa03      	add	r2, sp, #12
 8000562:	9400      	str	r4, [sp, #0]
 8000564:	f001 ff30 	bl	80023c8 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000568:	f240 2201 	movw	r2, #513	@ 0x201
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 800056c:	2304      	movs	r3, #4
 800056e:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000570:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000572:	4628      	mov	r0, r5
 8000574:	aa03      	add	r2, sp, #12
 8000576:	9400      	str	r4, [sp, #0]
 8000578:	f001 ff26 	bl	80023c8 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 800057c:	4aa3      	ldr	r2, [pc, #652]	@ (800080c <Codec+0x2e4>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 800057e:	2304      	movs	r3, #4
 8000580:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000582:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000584:	4628      	mov	r0, r5
 8000586:	aa03      	add	r2, sp, #12
 8000588:	9400      	str	r4, [sp, #0]
 800058a:	f001 ff1d 	bl	80023c8 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 800058e:	4aa0      	ldr	r2, [pc, #640]	@ (8000810 <Codec+0x2e8>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000590:	2304      	movs	r3, #4
 8000592:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000594:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000596:	4628      	mov	r0, r5
 8000598:	aa03      	add	r2, sp, #12
 800059a:	9400      	str	r4, [sp, #0]
 800059c:	f001 ff14 	bl	80023c8 <HAL_I2C_Master_Transmit>
	/* Enable bias generator, Enable VMID */
	write_register(0x01, 0x0013);


	/* Add Delay */
	HAL_Delay(50);
 80005a0:	2032      	movs	r0, #50	@ 0x32
 80005a2:	f001 f815 	bl	80015d0 <HAL_Delay>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80005a6:	4a9b      	ldr	r2, [pc, #620]	@ (8000814 <Codec+0x2ec>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80005a8:	2304      	movs	r3, #4
 80005aa:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80005ac:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80005ae:	4628      	mov	r0, r5
 80005b0:	aa03      	add	r2, sp, #12
 80005b2:	9400      	str	r4, [sp, #0]
 80005b4:	f001 ff08 	bl	80023c8 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80005b8:	4a97      	ldr	r2, [pc, #604]	@ (8000818 <Codec+0x2f0>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80005ba:	2304      	movs	r3, #4
 80005bc:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80005be:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80005c0:	4628      	mov	r0, r5
 80005c2:	aa03      	add	r2, sp, #12
 80005c4:	9400      	str	r4, [sp, #0]
 80005c6:	f001 feff 	bl	80023c8 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80005ca:	4a94      	ldr	r2, [pc, #592]	@ (800081c <Codec+0x2f4>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80005cc:	2304      	movs	r3, #4
 80005ce:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80005d0:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80005d2:	4628      	mov	r0, r5
 80005d4:	aa03      	add	r2, sp, #12
 80005d6:	9400      	str	r4, [sp, #0]
 80005d8:	f001 fef6 	bl	80023c8 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80005dc:	f240 4206 	movw	r2, #1030	@ 0x406
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80005e0:	2304      	movs	r3, #4
 80005e2:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80005e4:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80005e6:	4628      	mov	r0, r5
 80005e8:	aa03      	add	r2, sp, #12
 80005ea:	9400      	str	r4, [sp, #0]
 80005ec:	f001 feec 	bl	80023c8 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80005f0:	f240 5206 	movw	r2, #1286	@ 0x506
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80005f4:	2304      	movs	r3, #4
 80005f6:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80005f8:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80005fa:	4628      	mov	r0, r5
 80005fc:	aa03      	add	r2, sp, #12
 80005fe:	9400      	str	r4, [sp, #0]
 8000600:	f001 fee2 	bl	80023c8 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000604:	4a86      	ldr	r2, [pc, #536]	@ (8000820 <Codec+0x2f8>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000606:	2304      	movs	r3, #4
 8000608:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 800060a:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 800060c:	4628      	mov	r0, r5
 800060e:	aa03      	add	r2, sp, #12
 8000610:	9400      	str	r4, [sp, #0]
 8000612:	f001 fed9 	bl	80023c8 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000616:	4a83      	ldr	r2, [pc, #524]	@ (8000824 <Codec+0x2fc>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000618:	2304      	movs	r3, #4
 800061a:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 800061c:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 800061e:	4628      	mov	r0, r5
 8000620:	aa03      	add	r2, sp, #12
 8000622:	9400      	str	r4, [sp, #0]
 8000624:	f001 fed0 	bl	80023c8 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000628:	4a7f      	ldr	r2, [pc, #508]	@ (8000828 <Codec+0x300>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 800062a:	2304      	movs	r3, #4
 800062c:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 800062e:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000630:	4628      	mov	r0, r5
 8000632:	aa03      	add	r2, sp, #12
 8000634:	9400      	str	r4, [sp, #0]
 8000636:	f001 fec7 	bl	80023c8 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 800063a:	4a7c      	ldr	r2, [pc, #496]	@ (800082c <Codec+0x304>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 800063c:	2304      	movs	r3, #4
 800063e:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000640:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000642:	4628      	mov	r0, r5
 8000644:	aa03      	add	r2, sp, #12
 8000646:	9400      	str	r4, [sp, #0]
 8000648:	f001 febe 	bl	80023c8 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 800064c:	4a78      	ldr	r2, [pc, #480]	@ (8000830 <Codec+0x308>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 800064e:	2304      	movs	r3, #4
 8000650:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000652:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000654:	4628      	mov	r0, r5
 8000656:	aa03      	add	r2, sp, #12
 8000658:	9400      	str	r4, [sp, #0]
 800065a:	f001 feb5 	bl	80023c8 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 800065e:	4a75      	ldr	r2, [pc, #468]	@ (8000834 <Codec+0x30c>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000660:	2304      	movs	r3, #4
 8000662:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000664:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000666:	4628      	mov	r0, r5
 8000668:	aa03      	add	r2, sp, #12
 800066a:	9400      	str	r4, [sp, #0]
 800066c:	f001 feac 	bl	80023c8 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000670:	4a71      	ldr	r2, [pc, #452]	@ (8000838 <Codec+0x310>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000672:	2304      	movs	r3, #4
 8000674:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000676:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000678:	4628      	mov	r0, r5
 800067a:	aa03      	add	r2, sp, #12
 800067c:	9400      	str	r4, [sp, #0]
 800067e:	f001 fea3 	bl	80023c8 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000682:	4a6e      	ldr	r2, [pc, #440]	@ (800083c <Codec+0x314>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000684:	2304      	movs	r3, #4
 8000686:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000688:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 800068a:	4628      	mov	r0, r5
 800068c:	aa03      	add	r2, sp, #12
 800068e:	9400      	str	r4, [sp, #0]
 8000690:	f001 fe9a 	bl	80023c8 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000694:	4a6a      	ldr	r2, [pc, #424]	@ (8000840 <Codec+0x318>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000696:	2304      	movs	r3, #4
 8000698:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 800069a:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 800069c:	4628      	mov	r0, r5
 800069e:	aa03      	add	r2, sp, #12
 80006a0:	9400      	str	r4, [sp, #0]
 80006a2:	f001 fe91 	bl	80023c8 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80006a6:	4a67      	ldr	r2, [pc, #412]	@ (8000844 <Codec+0x31c>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80006a8:	2304      	movs	r3, #4
 80006aa:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80006ac:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80006ae:	4628      	mov	r0, r5
 80006b0:	aa03      	add	r2, sp, #12
 80006b2:	9400      	str	r4, [sp, #0]
 80006b4:	f001 fe88 	bl	80023c8 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80006b8:	4a63      	ldr	r2, [pc, #396]	@ (8000848 <Codec+0x320>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80006ba:	2304      	movs	r3, #4
 80006bc:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80006be:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80006c0:	4628      	mov	r0, r5
 80006c2:	aa03      	add	r2, sp, #12
 80006c4:	9400      	str	r4, [sp, #0]
 80006c6:	f001 fe7f 	bl	80023c8 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80006ca:	f240 2203 	movw	r2, #515	@ 0x203
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80006ce:	2304      	movs	r3, #4
 80006d0:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80006d2:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80006d4:	4628      	mov	r0, r5
 80006d6:	aa03      	add	r2, sp, #12
 80006d8:	9400      	str	r4, [sp, #0]
 80006da:	f001 fe75 	bl	80023c8 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80006de:	4a5b      	ldr	r2, [pc, #364]	@ (800084c <Codec+0x324>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80006e0:	2304      	movs	r3, #4
 80006e2:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80006e4:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80006e6:	4628      	mov	r0, r5
 80006e8:	aa03      	add	r2, sp, #12
 80006ea:	9400      	str	r4, [sp, #0]
 80006ec:	f001 fe6c 	bl	80023c8 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80006f0:	4a57      	ldr	r2, [pc, #348]	@ (8000850 <Codec+0x328>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80006f2:	2304      	movs	r3, #4
 80006f4:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80006f6:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80006f8:	4628      	mov	r0, r5
 80006fa:	aa03      	add	r2, sp, #12
 80006fc:	9400      	str	r4, [sp, #0]
 80006fe:	f001 fe63 	bl	80023c8 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000702:	4a54      	ldr	r2, [pc, #336]	@ (8000854 <Codec+0x32c>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000704:	2304      	movs	r3, #4
 8000706:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000708:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 800070a:	4628      	mov	r0, r5
 800070c:	aa03      	add	r2, sp, #12
 800070e:	9400      	str	r4, [sp, #0]
 8000710:	f001 fe5a 	bl	80023c8 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000714:	f44f 5208 	mov.w	r2, #8704	@ 0x2200
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000718:	2304      	movs	r3, #4
 800071a:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 800071c:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 800071e:	4628      	mov	r0, r5
 8000720:	aa03      	add	r2, sp, #12
 8000722:	9400      	str	r4, [sp, #0]
 8000724:	f001 fe50 	bl	80023c8 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000728:	f44f 520c 	mov.w	r2, #8960	@ 0x2300
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 800072c:	2304      	movs	r3, #4
 800072e:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000730:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000732:	4628      	mov	r0, r5
 8000734:	aa03      	add	r2, sp, #12
 8000736:	9400      	str	r4, [sp, #0]
 8000738:	f001 fe46 	bl	80023c8 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 800073c:	4a46      	ldr	r2, [pc, #280]	@ (8000858 <Codec+0x330>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 800073e:	2304      	movs	r3, #4
 8000740:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000742:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000744:	4628      	mov	r0, r5
 8000746:	aa03      	add	r2, sp, #12
 8000748:	9400      	str	r4, [sp, #0]
 800074a:	f001 fe3d 	bl	80023c8 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 800074e:	4a43      	ldr	r2, [pc, #268]	@ (800085c <Codec+0x334>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000750:	2304      	movs	r3, #4
 8000752:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000754:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000756:	4628      	mov	r0, r5
 8000758:	aa03      	add	r2, sp, #12
 800075a:	9400      	str	r4, [sp, #0]
 800075c:	f001 fe34 	bl	80023c8 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000760:	4a3f      	ldr	r2, [pc, #252]	@ (8000860 <Codec+0x338>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000762:	2304      	movs	r3, #4
 8000764:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000766:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000768:	4628      	mov	r0, r5
 800076a:	aa03      	add	r2, sp, #12
 800076c:	9400      	str	r4, [sp, #0]
 800076e:	f001 fe2b 	bl	80023c8 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000772:	4a3c      	ldr	r2, [pc, #240]	@ (8000864 <Codec+0x33c>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000774:	2304      	movs	r3, #4
 8000776:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000778:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 800077a:	4628      	mov	r0, r5
 800077c:	aa03      	add	r2, sp, #12
 800077e:	9400      	str	r4, [sp, #0]
 8000780:	f001 fe22 	bl	80023c8 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000784:	4a38      	ldr	r2, [pc, #224]	@ (8000868 <Codec+0x340>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000786:	2304      	movs	r3, #4
 8000788:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 800078a:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 800078c:	4628      	mov	r0, r5
 800078e:	aa03      	add	r2, sp, #12
 8000790:	9400      	str	r4, [sp, #0]
 8000792:	f001 fe19 	bl	80023c8 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000796:	4a35      	ldr	r2, [pc, #212]	@ (800086c <Codec+0x344>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000798:	2304      	movs	r3, #4
 800079a:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 800079c:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 800079e:	4628      	mov	r0, r5
 80007a0:	aa03      	add	r2, sp, #12
 80007a2:	9400      	str	r4, [sp, #0]
 80007a4:	f001 fe10 	bl	80023c8 <HAL_I2C_Master_Transmit>

	/* Enable Charge Pump */
	write_register(0x4C, 0x9F25);

    /* Add Delay */
	HAL_Delay(15);
 80007a8:	200f      	movs	r0, #15
 80007aa:	f000 ff11 	bl	80015d0 <HAL_Delay>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80007ae:	4a30      	ldr	r2, [pc, #192]	@ (8000870 <Codec+0x348>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80007b0:	2304      	movs	r3, #4
 80007b2:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80007b4:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80007b6:	4628      	mov	r0, r5
 80007b8:	aa03      	add	r2, sp, #12
 80007ba:	9400      	str	r4, [sp, #0]
 80007bc:	f001 fe04 	bl	80023c8 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80007c0:	4a2c      	ldr	r2, [pc, #176]	@ (8000874 <Codec+0x34c>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80007c2:	2304      	movs	r3, #4
 80007c4:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80007c6:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80007c8:	4628      	mov	r0, r5
 80007ca:	aa03      	add	r2, sp, #12
 80007cc:	9400      	str	r4, [sp, #0]
 80007ce:	f001 fdfb 	bl	80023c8 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80007d2:	4a29      	ldr	r2, [pc, #164]	@ (8000878 <Codec+0x350>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80007d4:	2304      	movs	r3, #4
 80007d6:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80007d8:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80007da:	4628      	mov	r0, r5
 80007dc:	aa03      	add	r2, sp, #12
 80007de:	9400      	str	r4, [sp, #0]
 80007e0:	f001 fdf2 	bl	80023c8 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80007e4:	4a25      	ldr	r2, [pc, #148]	@ (800087c <Codec+0x354>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80007e6:	2304      	movs	r3, #4
 80007e8:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80007ea:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80007ec:	4628      	mov	r0, r5
 80007ee:	aa03      	add	r2, sp, #12
 80007f0:	9400      	str	r4, [sp, #0]
 80007f2:	f001 fde9 	bl	80023c8 <HAL_I2C_Master_Transmit>

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    write_register(0x54, 0x0033);

    /* Add Delay */
    HAL_Delay(250);
 80007f6:	20fa      	movs	r0, #250	@ 0xfa
 80007f8:	f000 feea 	bl	80015d0 <HAL_Delay>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80007fc:	4a20      	ldr	r2, [pc, #128]	@ (8000880 <Codec+0x358>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80007fe:	2304      	movs	r3, #4
 8000800:	2134      	movs	r1, #52	@ 0x34
 8000802:	e03f      	b.n	8000884 <Codec+0x35c>
 8000804:	200001a8 	.word	0x200001a8
 8000808:	03000201 	.word	0x03000201
 800080c:	6c003900 	.word	0x6c003900
 8000810:	13000100 	.word	0x13000100
 8000814:	03030500 	.word	0x03030500
 8000818:	01000106 	.word	0x01000106
 800081c:	01000206 	.word	0x01000206
 8000820:	11002800 	.word	0x11002800
 8000824:	20002900 	.word	0x20002900
 8000828:	20002a00 	.word	0x20002a00
 800082c:	03030400 	.word	0x03030400
 8000830:	00024004 	.word	0x00024004
 8000834:	50630200 	.word	0x50630200
 8000838:	02000606 	.word	0x02000606
 800083c:	02000706 	.word	0x02000706
 8000840:	0d000007 	.word	0x0d000007
 8000844:	83001002 	.word	0x83001002
 8000848:	10400003 	.word	0x10400003
 800084c:	0a000802 	.word	0x0a000802
 8000850:	01000002 	.word	0x01000002
 8000854:	00030300 	.word	0x00030300
 8000858:	00033600 	.word	0x00033600
 800085c:	03300100 	.word	0x03300100
 8000860:	05005100 	.word	0x05005100
 8000864:	03330100 	.word	0x03330100
 8000868:	22006000 	.word	0x22006000
 800086c:	259f4c00 	.word	0x259f4c00
 8000870:	01002d00 	.word	0x01002d00
 8000874:	01002e00 	.word	0x01002e00
 8000878:	30030300 	.word	0x30030300
 800087c:	33005400 	.word	0x33005400
 8000880:	ee006000 	.word	0xee006000
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000884:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000886:	4628      	mov	r0, r5
 8000888:	aa03      	add	r2, sp, #12
 800088a:	9400      	str	r4, [sp, #0]
 800088c:	f001 fd9c 	bl	80023c8 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000890:	4a56      	ldr	r2, [pc, #344]	@ (80009ec <Codec+0x4c4>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000892:	2304      	movs	r3, #4
 8000894:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000896:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000898:	4628      	mov	r0, r5
 800089a:	aa03      	add	r2, sp, #12
 800089c:	9400      	str	r4, [sp, #0]
 800089e:	f001 fd93 	bl	80023c8 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80008a2:	4a53      	ldr	r2, [pc, #332]	@ (80009f0 <Codec+0x4c8>)
 80008a4:	f242 0704 	movw	r7, #8196	@ 0x2004
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80008a8:	2304      	movs	r3, #4
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80008aa:	9203      	str	r2, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80008ac:	2134      	movs	r1, #52	@ 0x34
 80008ae:	aa03      	add	r2, sp, #12
 80008b0:	4628      	mov	r0, r5
 80008b2:	9400      	str	r4, [sp, #0]
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80008b4:	f242 2604 	movw	r6, #8708	@ 0x2204
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80008b8:	f001 fd86 	bl	80023c8 <HAL_I2C_Master_Transmit>
 80008bc:	aa03      	add	r2, sp, #12
 80008be:	2304      	movs	r3, #4
 80008c0:	2134      	movs	r1, #52	@ 0x34
 80008c2:	4628      	mov	r0, r5
 80008c4:	9400      	str	r4, [sp, #0]
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80008c6:	9703      	str	r7, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80008c8:	f001 fd7e 	bl	80023c8 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80008cc:	4b49      	ldr	r3, [pc, #292]	@ (80009f4 <Codec+0x4cc>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80008ce:	aa03      	add	r2, sp, #12
 80008d0:	2134      	movs	r1, #52	@ 0x34
 80008d2:	4628      	mov	r0, r5
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80008d4:	9303      	str	r3, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80008d6:	2304      	movs	r3, #4
 80008d8:	9400      	str	r4, [sp, #0]
 80008da:	f001 fd75 	bl	80023c8 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80008de:	4b46      	ldr	r3, [pc, #280]	@ (80009f8 <Codec+0x4d0>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80008e0:	aa03      	add	r2, sp, #12
 80008e2:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80008e4:	9303      	str	r3, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80008e6:	4628      	mov	r0, r5
 80008e8:	2304      	movs	r3, #4
 80008ea:	9400      	str	r4, [sp, #0]
 80008ec:	f001 fd6c 	bl	80023c8 <HAL_I2C_Master_Transmit>
 80008f0:	aa03      	add	r2, sp, #12
 80008f2:	2304      	movs	r3, #4
 80008f4:	2134      	movs	r1, #52	@ 0x34
 80008f6:	4628      	mov	r0, r5
 80008f8:	9400      	str	r4, [sp, #0]
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80008fa:	9603      	str	r6, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80008fc:	f001 fd64 	bl	80023c8 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000900:	4b3e      	ldr	r3, [pc, #248]	@ (80009fc <Codec+0x4d4>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000902:	aa03      	add	r2, sp, #12
 8000904:	2134      	movs	r1, #52	@ 0x34
 8000906:	4628      	mov	r0, r5
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000908:	9303      	str	r3, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 800090a:	2304      	movs	r3, #4
 800090c:	9400      	str	r4, [sp, #0]
 800090e:	f001 fd5b 	bl	80023c8 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000912:	4b3b      	ldr	r3, [pc, #236]	@ (8000a00 <Codec+0x4d8>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000914:	aa03      	add	r2, sp, #12
 8000916:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000918:	9303      	str	r3, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 800091a:	4628      	mov	r0, r5
 800091c:	2304      	movs	r3, #4
 800091e:	9400      	str	r4, [sp, #0]
 8000920:	f001 fd52 	bl	80023c8 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000924:	4b37      	ldr	r3, [pc, #220]	@ (8000a04 <Codec+0x4dc>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000926:	aa03      	add	r2, sp, #12
 8000928:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 800092a:	9303      	str	r3, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 800092c:	4628      	mov	r0, r5
 800092e:	2304      	movs	r3, #4
 8000930:	9400      	str	r4, [sp, #0]
 8000932:	f001 fd49 	bl	80023c8 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000936:	4b34      	ldr	r3, [pc, #208]	@ (8000a08 <Codec+0x4e0>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000938:	aa03      	add	r2, sp, #12
 800093a:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 800093c:	9303      	str	r3, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 800093e:	4628      	mov	r0, r5
 8000940:	2304      	movs	r3, #4
 8000942:	9400      	str	r4, [sp, #0]
 8000944:	f001 fd40 	bl	80023c8 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000948:	4b30      	ldr	r3, [pc, #192]	@ (8000a0c <Codec+0x4e4>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 800094a:	aa03      	add	r2, sp, #12
 800094c:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 800094e:	9303      	str	r3, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000950:	4628      	mov	r0, r5
 8000952:	2304      	movs	r3, #4
 8000954:	9400      	str	r4, [sp, #0]
 8000956:	f001 fd37 	bl	80023c8 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 800095a:	4b2d      	ldr	r3, [pc, #180]	@ (8000a10 <Codec+0x4e8>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 800095c:	aa03      	add	r2, sp, #12
 800095e:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000960:	9303      	str	r3, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000962:	4628      	mov	r0, r5
 8000964:	2304      	movs	r3, #4
 8000966:	9400      	str	r4, [sp, #0]
 8000968:	f001 fd2e 	bl	80023c8 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 800096c:	4b29      	ldr	r3, [pc, #164]	@ (8000a14 <Codec+0x4ec>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 800096e:	aa03      	add	r2, sp, #12
 8000970:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000972:	9303      	str	r3, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000974:	4628      	mov	r0, r5
 8000976:	2304      	movs	r3, #4
 8000978:	9400      	str	r4, [sp, #0]
 800097a:	f001 fd25 	bl	80023c8 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 800097e:	4b26      	ldr	r3, [pc, #152]	@ (8000a18 <Codec+0x4f0>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000980:	aa03      	add	r2, sp, #12
 8000982:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000984:	9303      	str	r3, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000986:	4628      	mov	r0, r5
 8000988:	2304      	movs	r3, #4
 800098a:	9400      	str	r4, [sp, #0]
 800098c:	f001 fd1c 	bl	80023c8 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000990:	4b22      	ldr	r3, [pc, #136]	@ (8000a1c <Codec+0x4f4>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000992:	aa03      	add	r2, sp, #12
 8000994:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 8000996:	9303      	str	r3, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000998:	4628      	mov	r0, r5
 800099a:	2304      	movs	r3, #4
 800099c:	9400      	str	r4, [sp, #0]
 800099e:	f001 fd13 	bl	80023c8 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80009a2:	4b1f      	ldr	r3, [pc, #124]	@ (8000a20 <Codec+0x4f8>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80009a4:	aa03      	add	r2, sp, #12
 80009a6:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80009a8:	9303      	str	r3, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80009aa:	4628      	mov	r0, r5
 80009ac:	2304      	movs	r3, #4
 80009ae:	9400      	str	r4, [sp, #0]
 80009b0:	f001 fd0a 	bl	80023c8 <HAL_I2C_Master_Transmit>
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80009b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a24 <Codec+0x4fc>)
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80009b6:	aa03      	add	r2, sp, #12
 80009b8:	2134      	movs	r1, #52	@ 0x34
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80009ba:	9303      	str	r3, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80009bc:	4628      	mov	r0, r5
 80009be:	2304      	movs	r3, #4
 80009c0:	9400      	str	r4, [sp, #0]
 80009c2:	f001 fd01 	bl	80023c8 <HAL_I2C_Master_Transmit>
 80009c6:	aa03      	add	r2, sp, #12
 80009c8:	2304      	movs	r3, #4
 80009ca:	2134      	movs	r1, #52	@ 0x34
 80009cc:	4628      	mov	r0, r5
 80009ce:	9400      	str	r4, [sp, #0]
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80009d0:	9703      	str	r7, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80009d2:	f001 fcf9 	bl	80023c8 <HAL_I2C_Master_Transmit>
 80009d6:	2304      	movs	r3, #4
 80009d8:	aa03      	add	r2, sp, #12
 80009da:	2134      	movs	r1, #52	@ 0x34
 80009dc:	4628      	mov	r0, r5
 80009de:	9400      	str	r4, [sp, #0]
    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 80009e0:	9603      	str	r6, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 80009e2:	f001 fcf1 	bl	80023c8 <HAL_I2C_Master_Transmit>

    /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
    write_register(0x422, 0x0000);


}
 80009e6:	b005      	add	sp, #20
 80009e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009ea:	bf00      	nop
 80009ec:	c0001006 	.word	0xc0001006
 80009f0:	c0001106 	.word	0xc0001106
 80009f4:	c0001206 	.word	0xc0001206
 80009f8:	c0001306 	.word	0xc0001306
 80009fc:	0b001800 	.word	0x0b001800
 8000a00:	0b001a00 	.word	0x0b001a00
 8000a04:	00181004 	.word	0x00181004
 8000a08:	5b001c00 	.word	0x5b001c00
 8000a0c:	5b001d00 	.word	0x5b001d00
 8000a10:	5b002600 	.word	0x5b002600
 8000a14:	5b002700 	.word	0x5b002700
 8000a18:	99000004 	.word	0x99000004
 8000a1c:	99000104 	.word	0x99000104
 8000a20:	99000404 	.word	0x99000404
 8000a24:	99000504 	.word	0x99000504

08000a28 <MX_ADC1_Init>:
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a28:	4829      	ldr	r0, [pc, #164]	@ (8000ad0 <MX_ADC1_Init+0xa8>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a2a:	2300      	movs	r3, #0
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a2c:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a30:	2201      	movs	r2, #1
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T5_TRGO;
 8000a32:	ed9f 7b23 	vldr	d7, [pc, #140]	@ 8000ac0 <MX_ADC1_Init+0x98>
{
 8000a36:	b510      	push	{r4, lr}
  hadc1.Instance = ADC1;
 8000a38:	4c26      	ldr	r4, [pc, #152]	@ (8000ad4 <MX_ADC1_Init+0xac>)
{
 8000a3a:	b084      	sub	sp, #16
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a3c:	6102      	str	r2, [r0, #16]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a3e:	9300      	str	r3, [sp, #0]
  hadc1.Instance = ADC1;
 8000a40:	6004      	str	r4, [r0, #0]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a42:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a46:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 3;
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000a48:	f880 2030 	strb.w	r2, [r0, #48]	@ 0x30
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a4c:	9303      	str	r3, [sp, #12]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a4e:	e9c0 1301 	strd	r1, r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 3;
 8000a52:	2103      	movs	r1, #3
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T5_TRGO;
 8000a54:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
  hadc1.Init.NbrOfConversion = 3;
 8000a58:	61c1      	str	r1, [r0, #28]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000a5a:	e9c0 3305 	strd	r3, r3, [r0, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a5e:	e9cd 3301 	strd	r3, r3, [sp, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a62:	f000 fdc7 	bl	80015f4 <HAL_ADC_Init>
 8000a66:	b9f0      	cbnz	r0, 8000aa6 <MX_ADC1_Init+0x7e>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000a68:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a6a:	4669      	mov	r1, sp
 8000a6c:	4818      	ldr	r0, [pc, #96]	@ (8000ad0 <MX_ADC1_Init+0xa8>)
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000a6e:	9302      	str	r3, [sp, #8]
  sConfig.Channel = ADC_CHANNEL_6;
 8000a70:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 8000ac8 <MX_ADC1_Init+0xa0>
 8000a74:	ed8d 7b00 	vstr	d7, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a78:	f000 ff5a 	bl	8001930 <HAL_ADC_ConfigChannel>
 8000a7c:	b9e8      	cbnz	r0, 8000aba <MX_ADC1_Init+0x92>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000a7e:	2204      	movs	r2, #4
 8000a80:	2302      	movs	r3, #2
  sConfig.Rank = ADC_REGULAR_RANK_2;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a82:	4669      	mov	r1, sp
 8000a84:	4812      	ldr	r0, [pc, #72]	@ (8000ad0 <MX_ADC1_Init+0xa8>)
  sConfig.Channel = ADC_CHANNEL_4;
 8000a86:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a8a:	f000 ff51 	bl	8001930 <HAL_ADC_ConfigChannel>
 8000a8e:	b988      	cbnz	r0, 8000ab4 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000a90:	220c      	movs	r2, #12
 8000a92:	2303      	movs	r3, #3
  sConfig.Rank = ADC_REGULAR_RANK_3;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a94:	4669      	mov	r1, sp
 8000a96:	480e      	ldr	r0, [pc, #56]	@ (8000ad0 <MX_ADC1_Init+0xa8>)
  sConfig.Channel = ADC_CHANNEL_12;
 8000a98:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a9c:	f000 ff48 	bl	8001930 <HAL_ADC_ConfigChannel>
 8000aa0:	b920      	cbnz	r0, 8000aac <MX_ADC1_Init+0x84>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000aa2:	b004      	add	sp, #16
 8000aa4:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000aa6:	f000 fb55 	bl	8001154 <Error_Handler>
 8000aaa:	e7dd      	b.n	8000a68 <MX_ADC1_Init+0x40>
    Error_Handler();
 8000aac:	f000 fb52 	bl	8001154 <Error_Handler>
}
 8000ab0:	b004      	add	sp, #16
 8000ab2:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000ab4:	f000 fb4e 	bl	8001154 <Error_Handler>
 8000ab8:	e7ea      	b.n	8000a90 <MX_ADC1_Init+0x68>
    Error_Handler();
 8000aba:	f000 fb4b 	bl	8001154 <Error_Handler>
 8000abe:	e7de      	b.n	8000a7e <MX_ADC1_Init+0x56>
 8000ac0:	04000000 	.word	0x04000000
 8000ac4:	10000000 	.word	0x10000000
 8000ac8:	00000006 	.word	0x00000006
 8000acc:	00000001 	.word	0x00000001
 8000ad0:	20000160 	.word	0x20000160
 8000ad4:	40012000 	.word	0x40012000

08000ad8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(adcHandle->Instance==ADC1)
 8000ad8:	4b2e      	ldr	r3, [pc, #184]	@ (8000b94 <HAL_ADC_MspInit+0xbc>)
 8000ada:	6802      	ldr	r2, [r0, #0]
{
 8000adc:	b570      	push	{r4, r5, r6, lr}
  if(adcHandle->Instance==ADC1)
 8000ade:	429a      	cmp	r2, r3
{
 8000ae0:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae2:	f04f 0400 	mov.w	r4, #0
 8000ae6:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8000aea:	9406      	str	r4, [sp, #24]
 8000aec:	e9cd 4407 	strd	r4, r4, [sp, #28]
  if(adcHandle->Instance==ADC1)
 8000af0:	d001      	beq.n	8000af6 <HAL_ADC_MspInit+0x1e>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000af2:	b00a      	add	sp, #40	@ 0x28
 8000af4:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000af6:	f503 338c 	add.w	r3, r3, #71680	@ 0x11800
 8000afa:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000afc:	4826      	ldr	r0, [pc, #152]	@ (8000b98 <HAL_ADC_MspInit+0xc0>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000afe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    hdma_adc1.Instance = DMA2_Stream0;
 8000b00:	4e26      	ldr	r6, [pc, #152]	@ (8000b9c <HAL_ADC_MspInit+0xc4>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b02:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000b06:	645a      	str	r2, [r3, #68]	@ 0x44
 8000b08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000b0a:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8000b0e:	9201      	str	r2, [sp, #4]
 8000b10:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b14:	f042 0204 	orr.w	r2, r2, #4
 8000b18:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b1c:	f002 0204 	and.w	r2, r2, #4
 8000b20:	9202      	str	r2, [sp, #8]
 8000b22:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b26:	f042 0201 	orr.w	r2, r2, #1
 8000b2a:	631a      	str	r2, [r3, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b2c:	2204      	movs	r2, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b30:	f003 0301 	and.w	r3, r3, #1
 8000b34:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b36:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b38:	9903      	ldr	r1, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b3a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b3c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b40:	f001 f9d6 	bl	8001ef0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000b44:	2250      	movs	r2, #80	@ 0x50
 8000b46:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b48:	4815      	ldr	r0, [pc, #84]	@ (8000ba0 <HAL_ADC_MspInit+0xc8>)
 8000b4a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000b4e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b52:	f001 f9cd 	bl	8001ef0 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8000b56:	4a13      	ldr	r2, [pc, #76]	@ (8000ba4 <HAL_ADC_MspInit+0xcc>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b5c:	4630      	mov	r0, r6
    hdma_adc1.Instance = DMA2_Stream0;
 8000b5e:	e9c6 2400 	strd	r2, r4, [r6]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b62:	6133      	str	r3, [r6, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b64:	f44f 6200 	mov.w	r2, #2048	@ 0x800
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b68:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b6c:	e9c6 2305 	strd	r2, r3, [r6, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b70:	f44f 7380 	mov.w	r3, #256	@ 0x100
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b74:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b78:	e9c6 4408 	strd	r4, r4, [r6, #32]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b7c:	61f3      	str	r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b7e:	f001 f807 	bl	8001b90 <HAL_DMA_Init>
 8000b82:	b918      	cbnz	r0, 8000b8c <HAL_ADC_MspInit+0xb4>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000b84:	63ae      	str	r6, [r5, #56]	@ 0x38
 8000b86:	63b5      	str	r5, [r6, #56]	@ 0x38
}
 8000b88:	b00a      	add	sp, #40	@ 0x28
 8000b8a:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8000b8c:	f000 fae2 	bl	8001154 <Error_Handler>
 8000b90:	e7f8      	b.n	8000b84 <HAL_ADC_MspInit+0xac>
 8000b92:	bf00      	nop
 8000b94:	40012000 	.word	0x40012000
 8000b98:	40020800 	.word	0x40020800
 8000b9c:	200000fc 	.word	0x200000fc
 8000ba0:	40020000 	.word	0x40020000
 8000ba4:	40026410 	.word	0x40026410

08000ba8 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ba8:	4b13      	ldr	r3, [pc, #76]	@ (8000bf8 <MX_DMA_Init+0x50>)

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2038      	movs	r0, #56	@ 0x38
 8000bae:	4611      	mov	r1, r2
{
 8000bb0:	b510      	push	{r4, lr}
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000bb2:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
{
 8000bb4:	b082      	sub	sp, #8
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000bb6:	f444 0480 	orr.w	r4, r4, #4194304	@ 0x400000
 8000bba:	631c      	str	r4, [r3, #48]	@ 0x30
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000bc2:	9301      	str	r3, [sp, #4]
 8000bc4:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000bc6:	f000 ff83 	bl	8001ad0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000bca:	2038      	movs	r0, #56	@ 0x38
 8000bcc:	f000 ffbc 	bl	8001b48 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2039      	movs	r0, #57	@ 0x39
 8000bd4:	4611      	mov	r1, r2
 8000bd6:	f000 ff7b 	bl	8001ad0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000bda:	2039      	movs	r0, #57	@ 0x39
 8000bdc:	f000 ffb4 	bl	8001b48 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8000be0:	2200      	movs	r2, #0
 8000be2:	203c      	movs	r0, #60	@ 0x3c
 8000be4:	4611      	mov	r1, r2
 8000be6:	f000 ff73 	bl	8001ad0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000bea:	203c      	movs	r0, #60	@ 0x3c

}
 8000bec:	b002      	add	sp, #8
 8000bee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000bf2:	f000 bfa9 	b.w	8001b48 <HAL_NVIC_EnableIRQ>
 8000bf6:	bf00      	nop
 8000bf8:	40023800 	.word	0x40023800

08000bfc <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bfc:	4b31      	ldr	r3, [pc, #196]	@ (8000cc4 <MX_GPIO_Init+0xc8>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfe:	2200      	movs	r2, #0
{
 8000c00:	b510      	push	{r4, lr}
 8000c02:	b08e      	sub	sp, #56	@ 0x38
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOJ_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_5, GPIO_PIN_RESET);
 8000c04:	4c30      	ldr	r4, [pc, #192]	@ (8000cc8 <MX_GPIO_Init+0xcc>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c06:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8000c0a:	e9cd 220a 	strd	r2, r2, [sp, #40]	@ 0x28
 8000c0e:	920c      	str	r2, [sp, #48]	@ 0x30
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_5, GPIO_PIN_RESET);
 8000c10:	4620      	mov	r0, r4
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c12:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000c14:	f041 0110 	orr.w	r1, r1, #16
 8000c18:	6319      	str	r1, [r3, #48]	@ 0x30
 8000c1a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000c1c:	f001 0110 	and.w	r1, r1, #16
 8000c20:	9100      	str	r1, [sp, #0]
 8000c22:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c24:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000c26:	f041 0102 	orr.w	r1, r1, #2
 8000c2a:	6319      	str	r1, [r3, #48]	@ 0x30
 8000c2c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000c2e:	f001 0102 	and.w	r1, r1, #2
 8000c32:	9101      	str	r1, [sp, #4]
 8000c34:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c36:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000c38:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8000c3c:	6319      	str	r1, [r3, #48]	@ 0x30
 8000c3e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000c40:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8000c44:	9102      	str	r1, [sp, #8]
 8000c46:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c48:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000c4a:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 8000c4e:	6319      	str	r1, [r3, #48]	@ 0x30
 8000c50:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000c52:	f001 0140 	and.w	r1, r1, #64	@ 0x40
 8000c56:	9103      	str	r1, [sp, #12]
 8000c58:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000c5c:	f041 0104 	orr.w	r1, r1, #4
 8000c60:	6319      	str	r1, [r3, #48]	@ 0x30
 8000c62:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000c64:	f001 0104 	and.w	r1, r1, #4
 8000c68:	9104      	str	r1, [sp, #16]
 8000c6a:	9904      	ldr	r1, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c6c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000c6e:	f041 0108 	orr.w	r1, r1, #8
 8000c72:	6319      	str	r1, [r3, #48]	@ 0x30
 8000c74:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000c76:	f001 0108 	and.w	r1, r1, #8
 8000c7a:	9105      	str	r1, [sp, #20]
 8000c7c:	9905      	ldr	r1, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000c7e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000c80:	f441 7100 	orr.w	r1, r1, #512	@ 0x200
 8000c84:	6319      	str	r1, [r3, #48]	@ 0x30
 8000c86:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000c88:	f401 7100 	and.w	r1, r1, #512	@ 0x200
 8000c8c:	9106      	str	r1, [sp, #24]
 8000c8e:	9906      	ldr	r1, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c90:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000c92:	f041 0101 	orr.w	r1, r1, #1
 8000c96:	6319      	str	r1, [r3, #48]	@ 0x30
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_5, GPIO_PIN_RESET);
 8000c98:	2120      	movs	r1, #32
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9c:	f003 0301 	and.w	r3, r3, #1
 8000ca0:	9307      	str	r3, [sp, #28]
 8000ca2:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_5, GPIO_PIN_RESET);
 8000ca4:	f001 fa5e 	bl	8002164 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PJ5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ca8:	2220      	movs	r2, #32
 8000caa:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000cac:	a908      	add	r1, sp, #32
 8000cae:	4620      	mov	r0, r4
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000cb0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000cbc:	f001 f918 	bl	8001ef0 <HAL_GPIO_Init>

}
 8000cc0:	b00e      	add	sp, #56	@ 0x38
 8000cc2:	bd10      	pop	{r4, pc}
 8000cc4:	40023800 	.word	0x40023800
 8000cc8:	40022400 	.word	0x40022400

08000ccc <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8000ccc:	b510      	push	{r4, lr}
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000cce:	4817      	ldr	r0, [pc, #92]	@ (8000d2c <MX_I2C4_Init+0x60>)
  hi2c4.Init.Timing = 0x20404768;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	4917      	ldr	r1, [pc, #92]	@ (8000d30 <MX_I2C4_Init+0x64>)
 8000cd4:	2401      	movs	r4, #1
 8000cd6:	4a17      	ldr	r2, [pc, #92]	@ (8000d34 <MX_I2C4_Init+0x68>)
 8000cd8:	6203      	str	r3, [r0, #32]
 8000cda:	e880 001e 	stmia.w	r0, {r1, r2, r3, r4}
 8000cde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000ce2:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c4.Init.OwnAddress2 = 0;
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000ce6:	f001 fb19 	bl	800231c <HAL_I2C_Init>
 8000cea:	b950      	cbnz	r0, 8000d02 <MX_I2C4_Init+0x36>
  {
    Error_Handler();
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cec:	2100      	movs	r1, #0
 8000cee:	480f      	ldr	r0, [pc, #60]	@ (8000d2c <MX_I2C4_Init+0x60>)
 8000cf0:	f001 fd14 	bl	800271c <HAL_I2CEx_ConfigAnalogFilter>
 8000cf4:	b968      	cbnz	r0, 8000d12 <MX_I2C4_Init+0x46>
  {
    Error_Handler();
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	480c      	ldr	r0, [pc, #48]	@ (8000d2c <MX_I2C4_Init+0x60>)
 8000cfa:	f001 fd39 	bl	8002770 <HAL_I2CEx_ConfigDigitalFilter>
 8000cfe:	b980      	cbnz	r0, 8000d22 <MX_I2C4_Init+0x56>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000d00:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000d02:	f000 fa27 	bl	8001154 <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d06:	2100      	movs	r1, #0
 8000d08:	4808      	ldr	r0, [pc, #32]	@ (8000d2c <MX_I2C4_Init+0x60>)
 8000d0a:	f001 fd07 	bl	800271c <HAL_I2CEx_ConfigAnalogFilter>
 8000d0e:	2800      	cmp	r0, #0
 8000d10:	d0f1      	beq.n	8000cf6 <MX_I2C4_Init+0x2a>
    Error_Handler();
 8000d12:	f000 fa1f 	bl	8001154 <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000d16:	2100      	movs	r1, #0
 8000d18:	4804      	ldr	r0, [pc, #16]	@ (8000d2c <MX_I2C4_Init+0x60>)
 8000d1a:	f001 fd29 	bl	8002770 <HAL_I2CEx_ConfigDigitalFilter>
 8000d1e:	2800      	cmp	r0, #0
 8000d20:	d0ee      	beq.n	8000d00 <MX_I2C4_Init+0x34>
}
 8000d22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8000d26:	f000 ba15 	b.w	8001154 <Error_Handler>
 8000d2a:	bf00      	nop
 8000d2c:	200001a8 	.word	0x200001a8
 8000d30:	40006000 	.word	0x40006000
 8000d34:	20404768 	.word	0x20404768

08000d38 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	b0ae      	sub	sp, #184	@ 0xb8

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	2100      	movs	r1, #0
{
 8000d3e:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d40:	2290      	movs	r2, #144	@ 0x90
 8000d42:	a80a      	add	r0, sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	9108      	str	r1, [sp, #32]
 8000d46:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8000d4a:	e9cd 1106 	strd	r1, r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d4e:	f003 f8ad 	bl	8003eac <memset>
  if(i2cHandle->Instance==I2C4)
 8000d52:	4b25      	ldr	r3, [pc, #148]	@ (8000de8 <HAL_I2C_MspInit+0xb0>)
 8000d54:	6822      	ldr	r2, [r4, #0]
 8000d56:	429a      	cmp	r2, r3
 8000d58:	d001      	beq.n	8000d5e <HAL_I2C_MspInit+0x26>
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8000d5a:	b02e      	add	sp, #184	@ 0xb8
 8000d5c:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000d5e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d62:	a80a      	add	r0, sp, #40	@ 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000d64:	930a      	str	r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d66:	f002 f833 	bl	8002dd0 <HAL_RCCEx_PeriphCLKConfig>
 8000d6a:	2800      	cmp	r0, #0
 8000d6c:	d138      	bne.n	8000de0 <HAL_I2C_MspInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6e:	4c1f      	ldr	r4, [pc, #124]	@ (8000dec <HAL_I2C_MspInit+0xb4>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d70:	2080      	movs	r0, #128	@ 0x80
 8000d72:	2112      	movs	r1, #18
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 8000d74:	220b      	movs	r2, #11
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d76:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d78:	2600      	movs	r6, #0
 8000d7a:	2703      	movs	r7, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7c:	f043 0302 	orr.w	r3, r3, #2
 8000d80:	6323      	str	r3, [r4, #48]	@ 0x30
 8000d82:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000d84:	f003 0302 	and.w	r3, r3, #2
 8000d88:	9301      	str	r3, [sp, #4]
 8000d8a:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d8c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000d8e:	f043 0308 	orr.w	r3, r3, #8
 8000d92:	6323      	str	r3, [r4, #48]	@ 0x30
 8000d94:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 8000d96:	9208      	str	r2, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d98:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000da0:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da2:	a904      	add	r1, sp, #16
 8000da4:	4812      	ldr	r0, [pc, #72]	@ (8000df0 <HAL_I2C_MspInit+0xb8>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000da6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000da8:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dac:	f001 f8a0 	bl	8001ef0 <HAL_GPIO_Init>
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000db0:	2304      	movs	r3, #4
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000db2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000db6:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000db8:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000dba:	2312      	movs	r3, #18
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dbc:	480d      	ldr	r0, [pc, #52]	@ (8000df4 <HAL_I2C_MspInit+0xbc>)
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000dbe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000dc2:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dc6:	f001 f893 	bl	8001ef0 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000dca:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000dcc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000dd0:	6423      	str	r3, [r4, #64]	@ 0x40
 8000dd2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000dd4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000dd8:	9303      	str	r3, [sp, #12]
 8000dda:	9b03      	ldr	r3, [sp, #12]
}
 8000ddc:	b02e      	add	sp, #184	@ 0xb8
 8000dde:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 8000de0:	f000 f9b8 	bl	8001154 <Error_Handler>
 8000de4:	e7c3      	b.n	8000d6e <HAL_I2C_MspInit+0x36>
 8000de6:	bf00      	nop
 8000de8:	40006000 	.word	0x40006000
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40020400 	.word	0x40020400
 8000df4:	40020c00 	.word	0x40020c00

08000df8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df8:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dfa:	2300      	movs	r3, #0
{
 8000dfc:	b097      	sub	sp, #92	@ 0x5c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dfe:	4928      	ldr	r1, [pc, #160]	@ (8000ea0 <SystemClock_Config+0xa8>)
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e00:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e02:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 432;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e04:	a808      	add	r0, sp, #32
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e06:	9303      	str	r3, [sp, #12]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e08:	930d      	str	r3, [sp, #52]	@ 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e0a:	4a26      	ldr	r2, [pc, #152]	@ (8000ea4 <SystemClock_Config+0xac>)
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e0c:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e10:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8000e14:	e9cd 3306 	strd	r3, r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e18:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000e1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e1e:	640b      	str	r3, [r1, #64]	@ 0x40
 8000e20:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000e22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e26:	9301      	str	r3, [sp, #4]
 8000e28:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e2a:	6813      	ldr	r3, [r2, #0]
 8000e2c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e30:	6013      	str	r3, [r2, #0]
 8000e32:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e34:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e36:	940e      	str	r4, [sp, #56]	@ 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e38:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e3c:	9414      	str	r4, [sp, #80]	@ 0x50
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e3e:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e40:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e44:	9902      	ldr	r1, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e46:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000e4a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000e4e:	2319      	movs	r3, #25
 8000e50:	e9cd 230f 	strd	r2, r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000e54:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e58:	2202      	movs	r2, #2
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000e5a:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e5c:	2304      	movs	r3, #4
 8000e5e:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e62:	f001 fceb 	bl	800283c <HAL_RCC_OscConfig>
 8000e66:	b108      	cbz	r0, 8000e6c <SystemClock_Config+0x74>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e68:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e6a:	e7fe      	b.n	8000e6a <SystemClock_Config+0x72>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e6c:	f001 fcac 	bl	80027c8 <HAL_PWREx_EnableOverDrive>
 8000e70:	4603      	mov	r3, r0
 8000e72:	b108      	cbz	r0, 8000e78 <SystemClock_Config+0x80>
 8000e74:	b672      	cpsid	i
  while (1)
 8000e76:	e7fe      	b.n	8000e76 <SystemClock_Config+0x7e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e78:	220f      	movs	r2, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e7a:	f44f 55a0 	mov.w	r5, #5120	@ 0x1400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000e7e:	a803      	add	r0, sp, #12
 8000e80:	2107      	movs	r1, #7
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e82:	e9cd 2403 	strd	r2, r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e86:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e8a:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e8e:	9207      	str	r2, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000e90:	f001 feca 	bl	8002c28 <HAL_RCC_ClockConfig>
 8000e94:	b108      	cbz	r0, 8000e9a <SystemClock_Config+0xa2>
 8000e96:	b672      	cpsid	i
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <SystemClock_Config+0xa0>
}
 8000e9a:	b017      	add	sp, #92	@ 0x5c
 8000e9c:	bd30      	pop	{r4, r5, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	40007000 	.word	0x40007000

08000ea8 <PeriphCommonClock_Config>:
{
 8000ea8:	b500      	push	{lr}
 8000eaa:	b0a5      	sub	sp, #148	@ 0x94
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eac:	227c      	movs	r2, #124	@ 0x7c
 8000eae:	2100      	movs	r1, #0
 8000eb0:	a805      	add	r0, sp, #20
 8000eb2:	f002 fffb 	bl	8003eac <memset>
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8000eb6:	2302      	movs	r3, #2
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8000eb8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8000ebc:	f44f 71ac 	mov.w	r1, #344	@ 0x158
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000ec0:	2201      	movs	r2, #1
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8000ec2:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLI2S;
 8000ec4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000ec8:	9209      	str	r2, [sp, #36]	@ 0x24
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLI2S;
 8000eca:	930f      	str	r3, [sp, #60]	@ 0x3c
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8000ecc:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8000ef0 <PeriphCommonClock_Config+0x48>
 8000ed0:	e9cd 0100 	strd	r0, r1, [sp]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ed4:	4668      	mov	r0, sp
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8000ed6:	ed8d 7b02 	vstr	d7, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eda:	f001 ff79 	bl	8002dd0 <HAL_RCCEx_PeriphCLKConfig>
 8000ede:	b108      	cbz	r0, 8000ee4 <PeriphCommonClock_Config+0x3c>
 8000ee0:	b672      	cpsid	i
  while (1)
 8000ee2:	e7fe      	b.n	8000ee2 <PeriphCommonClock_Config+0x3a>
}
 8000ee4:	b025      	add	sp, #148	@ 0x94
 8000ee6:	f85d fb04 	ldr.w	pc, [sp], #4
 8000eea:	bf00      	nop
 8000eec:	f3af 8000 	nop.w
 8000ef0:	00000002 	.word	0x00000002
 8000ef4:	00000007 	.word	0x00000007

08000ef8 <HAL_SAI_RxHalfCpltCallback>:
	PlaybackBufferPtr = &PlaybackBuffer[0];
 8000ef8:	4a06      	ldr	r2, [pc, #24]	@ (8000f14 <HAL_SAI_RxHalfCpltCallback+0x1c>)
 8000efa:	4907      	ldr	r1, [pc, #28]	@ (8000f18 <HAL_SAI_RxHalfCpltCallback+0x20>)
	dataReadyFlag = 1;
 8000efc:	4b07      	ldr	r3, [pc, #28]	@ (8000f1c <HAL_SAI_RxHalfCpltCallback+0x24>)
	RecordBufferPtr = &RecordBuffer[0];
 8000efe:	4808      	ldr	r0, [pc, #32]	@ (8000f20 <HAL_SAI_RxHalfCpltCallback+0x28>)
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai){
 8000f00:	b410      	push	{r4}
	PlaybackBufferPtr = &PlaybackBuffer[0];
 8000f02:	6011      	str	r1, [r2, #0]
	dataReadyFlag = 1;
 8000f04:	2201      	movs	r2, #1
	RecordBufferPtr = &RecordBuffer[0];
 8000f06:	4c07      	ldr	r4, [pc, #28]	@ (8000f24 <HAL_SAI_RxHalfCpltCallback+0x2c>)
	dataReadyFlag = 1;
 8000f08:	701a      	strb	r2, [r3, #0]
	RecordBufferPtr = &RecordBuffer[0];
 8000f0a:	6004      	str	r4, [r0, #0]
}
 8000f0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20000000 	.word	0x20000000
 8000f18:	20000214 	.word	0x20000214
 8000f1c:	20000212 	.word	0x20000212
 8000f20:	20000004 	.word	0x20000004
 8000f24:	20000a14 	.word	0x20000a14

08000f28 <HAL_SAI_RxCpltCallback>:
	PlaybackBufferPtr = &PlaybackBuffer[RECORD_BUFFER_SIZE/2];
 8000f28:	4a06      	ldr	r2, [pc, #24]	@ (8000f44 <HAL_SAI_RxCpltCallback+0x1c>)
 8000f2a:	4907      	ldr	r1, [pc, #28]	@ (8000f48 <HAL_SAI_RxCpltCallback+0x20>)
	dataReadyFlag = 1;
 8000f2c:	4b07      	ldr	r3, [pc, #28]	@ (8000f4c <HAL_SAI_RxCpltCallback+0x24>)
	RecordBufferPtr = &RecordBuffer[RECORD_BUFFER_SIZE/2];
 8000f2e:	4808      	ldr	r0, [pc, #32]	@ (8000f50 <HAL_SAI_RxCpltCallback+0x28>)
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai){
 8000f30:	b410      	push	{r4}
	PlaybackBufferPtr = &PlaybackBuffer[RECORD_BUFFER_SIZE/2];
 8000f32:	6011      	str	r1, [r2, #0]
	dataReadyFlag = 1;
 8000f34:	2201      	movs	r2, #1
	RecordBufferPtr = &RecordBuffer[RECORD_BUFFER_SIZE/2];
 8000f36:	4c07      	ldr	r4, [pc, #28]	@ (8000f54 <HAL_SAI_RxCpltCallback+0x2c>)
	dataReadyFlag = 1;
 8000f38:	701a      	strb	r2, [r3, #0]
	RecordBufferPtr = &RecordBuffer[RECORD_BUFFER_SIZE/2];
 8000f3a:	6004      	str	r4, [r0, #0]
}
 8000f3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	20000000 	.word	0x20000000
 8000f48:	20000614 	.word	0x20000614
 8000f4c:	20000212 	.word	0x20000212
 8000f50:	20000004 	.word	0x20000004
 8000f54:	20000e14 	.word	0x20000e14

08000f58 <HAL_ADC_ConvCpltCallback>:
	AdcChannel1 = AdcValues[0];
 8000f58:	4b06      	ldr	r3, [pc, #24]	@ (8000f74 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000f5a:	4807      	ldr	r0, [pc, #28]	@ (8000f78 <HAL_ADC_ConvCpltCallback+0x20>)
 8000f5c:	f8b3 c000 	ldrh.w	ip, [r3]
	AdcChannel2 = AdcValues[1];
 8000f60:	4906      	ldr	r1, [pc, #24]	@ (8000f7c <HAL_ADC_ConvCpltCallback+0x24>)
	AdcChannel3 = AdcValues[2];
 8000f62:	4a07      	ldr	r2, [pc, #28]	@ (8000f80 <HAL_ADC_ConvCpltCallback+0x28>)
	AdcChannel1 = AdcValues[0];
 8000f64:	f8a0 c000 	strh.w	ip, [r0]
	AdcChannel2 = AdcValues[1];
 8000f68:	8858      	ldrh	r0, [r3, #2]
	AdcChannel3 = AdcValues[2];
 8000f6a:	889b      	ldrh	r3, [r3, #4]
	AdcChannel2 = AdcValues[1];
 8000f6c:	8008      	strh	r0, [r1, #0]
	AdcChannel3 = AdcValues[2];
 8000f6e:	8013      	strh	r3, [r2, #0]
}
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	2000020c 	.word	0x2000020c
 8000f78:	20000208 	.word	0x20000208
 8000f7c:	20000206 	.word	0x20000206
 8000f80:	20000204 	.word	0x20000204

08000f84 <ProcessData>:
void ProcessData(){
 8000f84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_5, GPIO_PIN_SET);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	2120      	movs	r1, #32
 8000f8c:	483b      	ldr	r0, [pc, #236]	@ (800107c <ProcessData+0xf8>)
 8000f8e:	2400      	movs	r4, #0
 8000f90:	f8df b108 	ldr.w	fp, [pc, #264]	@ 800109c <ProcessData+0x118>
 8000f94:	4e3a      	ldr	r6, [pc, #232]	@ (8001080 <ProcessData+0xfc>)
 8000f96:	4d3b      	ldr	r5, [pc, #236]	@ (8001084 <ProcessData+0x100>)
 8000f98:	f8df a0f0 	ldr.w	sl, [pc, #240]	@ 800108c <ProcessData+0x108>
 8000f9c:	f8df 90f4 	ldr.w	r9, [pc, #244]	@ 8001094 <ProcessData+0x110>
 8000fa0:	f8df 80fc 	ldr.w	r8, [pc, #252]	@ 80010a0 <ProcessData+0x11c>
void ProcessData(){
 8000fa4:	ed2d 8b02 	vpush	{d8}
	 		if (leftIn > 1.0f){
 8000fa8:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
		 	leftIn = (1.0f/32768.0f)* RecordBufferPtr[i];
 8000fac:	ed9f 8a36 	vldr	s16, [pc, #216]	@ 8001088 <ProcessData+0x104>
	HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_5, GPIO_PIN_SET);
 8000fb0:	f001 f8d8 	bl	8002164 <HAL_GPIO_WritePin>
		 	leftIn = (1.0f/32768.0f)* RecordBufferPtr[i];
 8000fb4:	f8db e000 	ldr.w	lr, [fp]
	 			leftIn -= 2.0f;
 8000fb8:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
	 		rightIn = (1.0f/32768.0f)* RecordBufferPtr[i+1];
 8000fbc:	1ca7      	adds	r7, r4, #2
	 		arm_biquad_cascade_df2T_f32(&IIR_L_kick, &leftIn, &leftOut, 1);
 8000fbe:	2301      	movs	r3, #1
		 	leftIn = (1.0f/32768.0f)* RecordBufferPtr[i];
 8000fc0:	f83e c004 	ldrh.w	ip, [lr, r4]
	 			rightIn -= 2.0f;
 8000fc4:	eeb0 7a66 	vmov.f32	s14, s13
	 		arm_biquad_cascade_df2T_f32(&IIR_L_kick, &leftIn, &leftOut, 1);
 8000fc8:	4a30      	ldr	r2, [pc, #192]	@ (800108c <ProcessData+0x108>)
		 	leftIn = (1.0f/32768.0f)* RecordBufferPtr[i];
 8000fca:	fa0f fc8c 	sxth.w	ip, ip
	 		arm_biquad_cascade_df2T_f32(&IIR_L_kick, &leftIn, &leftOut, 1);
 8000fce:	492c      	ldr	r1, [pc, #176]	@ (8001080 <ProcessData+0xfc>)
 8000fd0:	482f      	ldr	r0, [pc, #188]	@ (8001090 <ProcessData+0x10c>)
		 	leftIn = (1.0f/32768.0f)* RecordBufferPtr[i];
 8000fd2:	ee07 ca90 	vmov	s15, ip
 8000fd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fda:	ee67 7a88 	vmul.f32	s15, s15, s16
 8000fde:	edc6 7a00 	vstr	s15, [r6]
	 		if (leftIn > 1.0f){
 8000fe2:	edd6 7a00 	vldr	s15, [r6]
 8000fe6:	eef4 7ae8 	vcmpe.f32	s15, s17
 8000fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fee:	dd05      	ble.n	8000ffc <ProcessData+0x78>
	 			leftIn -= 2.0f;
 8000ff0:	edd6 7a00 	vldr	s15, [r6]
 8000ff4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8000ff8:	edc6 7a00 	vstr	s15, [r6]
	 		rightIn = (1.0f/32768.0f)* RecordBufferPtr[i+1];
 8000ffc:	f83e c007 	ldrh.w	ip, [lr, r7]
 8001000:	fa0f fc8c 	sxth.w	ip, ip
 8001004:	ee07 ca90 	vmov	s15, ip
 8001008:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800100c:	ee67 7a88 	vmul.f32	s15, s15, s16
 8001010:	edc5 7a00 	vstr	s15, [r5]
	 		if (rightIn > 1.0f){
 8001014:	edd5 7a00 	vldr	s15, [r5]
 8001018:	eef4 7ae8 	vcmpe.f32	s15, s17
 800101c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001020:	dd05      	ble.n	800102e <ProcessData+0xaa>
	 			rightIn -= 2.0f;
 8001022:	edd5 7a00 	vldr	s15, [r5]
 8001026:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800102a:	edc5 7a00 	vstr	s15, [r5]
	 		arm_biquad_cascade_df2T_f32(&IIR_L_kick, &leftIn, &leftOut, 1);
 800102e:	f000 fa41 	bl	80014b4 <arm_biquad_cascade_df2T_f32>
	 		arm_biquad_cascade_df2T_f32(&IIR_R_kick, &rightIn, &rightOut, 1);
 8001032:	2301      	movs	r3, #1
 8001034:	4a17      	ldr	r2, [pc, #92]	@ (8001094 <ProcessData+0x110>)
 8001036:	4913      	ldr	r1, [pc, #76]	@ (8001084 <ProcessData+0x100>)
 8001038:	4817      	ldr	r0, [pc, #92]	@ (8001098 <ProcessData+0x114>)
 800103a:	f000 fa3b 	bl	80014b4 <arm_biquad_cascade_df2T_f32>
	 		PlaybackBufferPtr[i] =(int16_t) (32768.0f * leftOut);
 800103e:	edda 7a00 	vldr	s15, [sl]
 8001042:	f8d8 2000 	ldr.w	r2, [r8]
 8001046:	eefe 7ae8 	vcvt.s32.f32	s15, s15, #15
 800104a:	ee17 3a90 	vmov	r3, s15
 800104e:	b21b      	sxth	r3, r3
 8001050:	5313      	strh	r3, [r2, r4]
	 for (uint16_t i =0; i<(RECORD_BUFFER_SIZE/2)-1 ; i+=2){
 8001052:	3404      	adds	r4, #4
	 		PlaybackBufferPtr[i+1] = (int16_t) (32768.0f * rightOut);
 8001054:	edd9 7a00 	vldr	s15, [r9]
	 for (uint16_t i =0; i<(RECORD_BUFFER_SIZE/2)-1 ; i+=2){
 8001058:	f5b4 6f80 	cmp.w	r4, #1024	@ 0x400
	 		PlaybackBufferPtr[i+1] = (int16_t) (32768.0f * rightOut);
 800105c:	eefe 7ae8 	vcvt.s32.f32	s15, s15, #15
 8001060:	ee17 3a90 	vmov	r3, s15
 8001064:	b21b      	sxth	r3, r3
 8001066:	53d3      	strh	r3, [r2, r7]
	 for (uint16_t i =0; i<(RECORD_BUFFER_SIZE/2)-1 ; i+=2){
 8001068:	d1a4      	bne.n	8000fb4 <ProcessData+0x30>
}
 800106a:	ecbd 8b02 	vpop	{d8}
	 HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_5, GPIO_PIN_RESET);
 800106e:	2200      	movs	r2, #0
 8001070:	2120      	movs	r1, #32
 8001072:	4802      	ldr	r0, [pc, #8]	@ (800107c <ProcessData+0xf8>)
}
 8001074:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	 HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_5, GPIO_PIN_RESET);
 8001078:	f001 b874 	b.w	8002164 <HAL_GPIO_WritePin>
 800107c:	40022400 	.word	0x40022400
 8001080:	20000200 	.word	0x20000200
 8001084:	200001fc 	.word	0x200001fc
 8001088:	38000000 	.word	0x38000000
 800108c:	200001f8 	.word	0x200001f8
 8001090:	20001220 	.word	0x20001220
 8001094:	200001f4 	.word	0x200001f4
 8001098:	20001214 	.word	0x20001214
 800109c:	20000004 	.word	0x20000004
 80010a0:	20000000 	.word	0x20000000

080010a4 <main>:
{
 80010a4:	b508      	push	{r3, lr}
	arm_biquad_cascade_df2T_init_f32(&IIR_L_kick, STAGES, ba_coeff, state_L_kick);
 80010a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001120 <main+0x7c>)
 80010a8:	210a      	movs	r1, #10
 80010aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001124 <main+0x80>)
		  dataReadyFlag = 0;
 80010ac:	2500      	movs	r5, #0
	arm_biquad_cascade_df2T_init_f32(&IIR_L_kick, STAGES, ba_coeff, state_L_kick);
 80010ae:	481e      	ldr	r0, [pc, #120]	@ (8001128 <main+0x84>)
 80010b0:	f000 fa3e 	bl	8001530 <arm_biquad_cascade_df2T_init_f32>
	arm_biquad_cascade_df2T_init_f32(&IIR_R_kick, STAGES, ba_coeff, state_R_kick);
 80010b4:	4b1d      	ldr	r3, [pc, #116]	@ (800112c <main+0x88>)
 80010b6:	4a1a      	ldr	r2, [pc, #104]	@ (8001120 <main+0x7c>)
 80010b8:	210a      	movs	r1, #10
 80010ba:	481d      	ldr	r0, [pc, #116]	@ (8001130 <main+0x8c>)
 80010bc:	f000 fa38 	bl	8001530 <arm_biquad_cascade_df2T_init_f32>
  HAL_Init();
 80010c0:	4c1c      	ldr	r4, [pc, #112]	@ (8001134 <main+0x90>)
 80010c2:	f000 fa67 	bl	8001594 <HAL_Init>
  SystemClock_Config();
 80010c6:	f7ff fe97 	bl	8000df8 <SystemClock_Config>
  PeriphCommonClock_Config();
 80010ca:	f7ff feed 	bl	8000ea8 <PeriphCommonClock_Config>
  MX_GPIO_Init();
 80010ce:	f7ff fd95 	bl	8000bfc <MX_GPIO_Init>
  MX_DMA_Init();
 80010d2:	f7ff fd69 	bl	8000ba8 <MX_DMA_Init>
  MX_I2C4_Init();
 80010d6:	f7ff fdf9 	bl	8000ccc <MX_I2C4_Init>
  MX_SAI1_Init();
 80010da:	f000 f83d 	bl	8001158 <MX_SAI1_Init>
  MX_ADC1_Init();
 80010de:	f7ff fca3 	bl	8000a28 <MX_ADC1_Init>
  MX_TIM5_Init();
 80010e2:	f000 f96d 	bl	80013c0 <MX_TIM5_Init>
  HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t*) PlaybackBuffer, RECORD_BUFFER_SIZE);
 80010e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010ea:	4913      	ldr	r1, [pc, #76]	@ (8001138 <main+0x94>)
 80010ec:	4813      	ldr	r0, [pc, #76]	@ (800113c <main+0x98>)
 80010ee:	f002 fb51 	bl	8003794 <HAL_SAI_Transmit_DMA>
  HAL_SAI_Receive_DMA(&hsai_BlockB1, (uint8_t*) RecordBuffer, RECORD_BUFFER_SIZE);
 80010f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010f6:	4912      	ldr	r1, [pc, #72]	@ (8001140 <main+0x9c>)
 80010f8:	4812      	ldr	r0, [pc, #72]	@ (8001144 <main+0xa0>)
 80010fa:	f002 fbd5 	bl	80038a8 <HAL_SAI_Receive_DMA>
  HAL_TIM_Base_Start_IT(&htim5);
 80010fe:	4812      	ldr	r0, [pc, #72]	@ (8001148 <main+0xa4>)
 8001100:	f002 fd7e 	bl	8003c00 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) AdcValues, 3);
 8001104:	2203      	movs	r2, #3
 8001106:	4911      	ldr	r1, [pc, #68]	@ (800114c <main+0xa8>)
 8001108:	4811      	ldr	r0, [pc, #68]	@ (8001150 <main+0xac>)
 800110a:	f000 fb21 	bl	8001750 <HAL_ADC_Start_DMA>
  Codec();
 800110e:	f7ff fa0b 	bl	8000528 <Codec>
	  if(dataReadyFlag){
 8001112:	7823      	ldrb	r3, [r4, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d0fc      	beq.n	8001112 <main+0x6e>
		  ProcessData();
 8001118:	f7ff ff34 	bl	8000f84 <ProcessData>
		  dataReadyFlag = 0;
 800111c:	7025      	strb	r5, [r4, #0]
 800111e:	e7f8      	b.n	8001112 <main+0x6e>
 8001120:	20000008 	.word	0x20000008
 8001124:	2000127c 	.word	0x2000127c
 8001128:	20001220 	.word	0x20001220
 800112c:	2000122c 	.word	0x2000122c
 8001130:	20001214 	.word	0x20001214
 8001134:	20000212 	.word	0x20000212
 8001138:	20000214 	.word	0x20000214
 800113c:	20001418 	.word	0x20001418
 8001140:	20000a14 	.word	0x20000a14
 8001144:	20001390 	.word	0x20001390
 8001148:	200014a0 	.word	0x200014a0
 800114c:	2000020c 	.word	0x2000020c
 8001150:	20000160 	.word	0x20000160

08001154 <Error_Handler>:
 8001154:	b672      	cpsid	i
  while (1)
 8001156:	e7fe      	b.n	8001156 <Error_Handler+0x2>

08001158 <MX_SAI1_Init>:

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8001158:	481a      	ldr	r0, [pc, #104]	@ (80011c4 <MX_SAI1_Init+0x6c>)
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 800115a:	2200      	movs	r2, #0
  hsai_BlockA1.Instance = SAI1_Block_A;
 800115c:	491a      	ldr	r1, [pc, #104]	@ (80011c8 <MX_SAI1_Init+0x70>)
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 800115e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
{
 8001162:	b510      	push	{r4, lr}
  hsai_BlockA1.Instance = SAI1_Block_A;
 8001164:	e9c0 1200 	strd	r1, r2, [r0]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8001168:	f64b 3180 	movw	r1, #48000	@ 0xbb80
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800116c:	2401      	movs	r4, #1
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 800116e:	6103      	str	r3, [r0, #16]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 4) != HAL_OK)
 8001170:	2304      	movs	r3, #4
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8001172:	61c1      	str	r1, [r0, #28]
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 4) != HAL_OK)
 8001174:	4611      	mov	r1, r2
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001176:	6082      	str	r2, [r0, #8]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001178:	60c2      	str	r2, [r0, #12]
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800117a:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800117c:	e9c0 2405 	strd	r2, r4, [r0, #20]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001180:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 4) != HAL_OK)
 8001184:	f002 fa6a 	bl	800365c <HAL_SAI_InitProtocol>
 8001188:	b9a8      	cbnz	r0, 80011b6 <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 800118a:	4810      	ldr	r0, [pc, #64]	@ (80011cc <MX_SAI1_Init+0x74>)
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800118c:	2200      	movs	r2, #0
  hsai_BlockB1.Instance = SAI1_Block_B;
 800118e:	4c10      	ldr	r4, [pc, #64]	@ (80011d0 <MX_SAI1_Init+0x78>)
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8001190:	2101      	movs	r1, #1
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8001192:	2303      	movs	r3, #3
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001194:	60c2      	str	r2, [r0, #12]
  hsai_BlockB1.Instance = SAI1_Block_B;
 8001196:	6004      	str	r4, [r0, #0]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 8001198:	f44f 5400 	mov.w	r4, #8192	@ 0x2000
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800119c:	6181      	str	r1, [r0, #24]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 800119e:	6104      	str	r4, [r0, #16]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80011a0:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 80011a2:	e9c0 3101 	strd	r3, r1, [r0, #4]
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 4) != HAL_OK)
 80011a6:	2304      	movs	r3, #4
 80011a8:	4611      	mov	r1, r2
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 80011aa:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 4) != HAL_OK)
 80011ae:	f002 fa55 	bl	800365c <HAL_SAI_InitProtocol>
 80011b2:	b918      	cbnz	r0, 80011bc <MX_SAI1_Init+0x64>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80011b4:	bd10      	pop	{r4, pc}
    Error_Handler();
 80011b6:	f7ff ffcd 	bl	8001154 <Error_Handler>
 80011ba:	e7e6      	b.n	800118a <MX_SAI1_Init+0x32>
}
 80011bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80011c0:	f7ff bfc8 	b.w	8001154 <Error_Handler>
 80011c4:	20001418 	.word	0x20001418
 80011c8:	40015804 	.word	0x40015804
 80011cc:	20001390 	.word	0x20001390
 80011d0:	40015824 	.word	0x40015824

080011d4 <HAL_SAI_MspInit>:
void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 80011d4:	4a4d      	ldr	r2, [pc, #308]	@ (800130c <HAL_SAI_MspInit+0x138>)
 80011d6:	6803      	ldr	r3, [r0, #0]
 80011d8:	4293      	cmp	r3, r2
{
 80011da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011dc:	4604      	mov	r4, r0
 80011de:	b089      	sub	sp, #36	@ 0x24
    if(saiHandle->Instance==SAI1_Block_A)
 80011e0:	d004      	beq.n	80011ec <HAL_SAI_MspInit+0x18>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
    }
    if(saiHandle->Instance==SAI1_Block_B)
 80011e2:	4a4b      	ldr	r2, [pc, #300]	@ (8001310 <HAL_SAI_MspInit+0x13c>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d041      	beq.n	800126c <HAL_SAI_MspInit+0x98>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
    }
}
 80011e8:	b009      	add	sp, #36	@ 0x24
 80011ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (SAI1_client == 0)
 80011ec:	4b49      	ldr	r3, [pc, #292]	@ (8001314 <HAL_SAI_MspInit+0x140>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	2a00      	cmp	r2, #0
 80011f2:	d079      	beq.n	80012e8 <HAL_SAI_MspInit+0x114>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80011f4:	2170      	movs	r1, #112	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2600      	movs	r6, #0
    SAI1_client ++;
 80011f8:	3201      	adds	r2, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fa:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80011fc:	2706      	movs	r7, #6
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011fe:	4846      	ldr	r0, [pc, #280]	@ (8001318 <HAL_SAI_MspInit+0x144>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001200:	9103      	str	r1, [sp, #12]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001202:	a903      	add	r1, sp, #12
    SAI1_client ++;
 8001204:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001206:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001208:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	e9cd 5604 	strd	r5, r6, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800120e:	f000 fe6f 	bl	8001ef0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001212:	2380      	movs	r3, #128	@ 0x80
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001214:	4841      	ldr	r0, [pc, #260]	@ (800131c <HAL_SAI_MspInit+0x148>)
 8001216:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001218:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800121a:	9303      	str	r3, [sp, #12]
    hdma_sai1_a.Instance = DMA2_Stream1;
 800121c:	4d40      	ldr	r5, [pc, #256]	@ (8001320 <HAL_SAI_MspInit+0x14c>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800121e:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001220:	e9cd 6605 	strd	r6, r6, [sp, #20]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001224:	f000 fe64 	bl	8001ef0 <HAL_GPIO_Init>
    hdma_sai1_a.Instance = DMA2_Stream1;
 8001228:	4a3e      	ldr	r2, [pc, #248]	@ (8001324 <HAL_SAI_MspInit+0x150>)
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800122a:	2340      	movs	r3, #64	@ 0x40
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 800122c:	4628      	mov	r0, r5
    hdma_sai1_a.Instance = DMA2_Stream1;
 800122e:	602a      	str	r2, [r5, #0]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8001230:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001234:	60ab      	str	r3, [r5, #8]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001236:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    hdma_sai1_a.Init.Channel = DMA_CHANNEL_0;
 800123a:	606e      	str	r6, [r5, #4]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800123c:	60ee      	str	r6, [r5, #12]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800123e:	626e      	str	r6, [r5, #36]	@ 0x24
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001240:	e9c5 2304 	strd	r2, r3, [r5, #16]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8001244:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001248:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800124c:	e9c5 2306 	strd	r2, r3, [r5, #24]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001250:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8001254:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8001256:	f000 fc9b 	bl	8001b90 <HAL_DMA_Init>
 800125a:	2800      	cmp	r0, #0
 800125c:	d14f      	bne.n	80012fe <HAL_SAI_MspInit+0x12a>
    if(saiHandle->Instance==SAI1_Block_B)
 800125e:	6823      	ldr	r3, [r4, #0]
 8001260:	4a2b      	ldr	r2, [pc, #172]	@ (8001310 <HAL_SAI_MspInit+0x13c>)
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 8001262:	63ac      	str	r4, [r5, #56]	@ 0x38
    if(saiHandle->Instance==SAI1_Block_B)
 8001264:	4293      	cmp	r3, r2
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 8001266:	e9c4 551b 	strd	r5, r5, [r4, #108]	@ 0x6c
    if(saiHandle->Instance==SAI1_Block_B)
 800126a:	d1bd      	bne.n	80011e8 <HAL_SAI_MspInit+0x14>
      if (SAI1_client == 0)
 800126c:	4b29      	ldr	r3, [pc, #164]	@ (8001314 <HAL_SAI_MspInit+0x140>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	b37a      	cbz	r2, 80012d2 <HAL_SAI_MspInit+0xfe>
    SAI1_client ++;
 8001272:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001274:	2108      	movs	r1, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001278:	4827      	ldr	r0, [pc, #156]	@ (8001318 <HAL_SAI_MspInit+0x144>)
    SAI1_client ++;
 800127a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127c:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800127e:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001280:	9103      	str	r1, [sp, #12]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001282:	a903      	add	r1, sp, #12
    hdma_sai1_b.Instance = DMA2_Stream4;
 8001284:	4d28      	ldr	r5, [pc, #160]	@ (8001328 <HAL_SAI_MspInit+0x154>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001286:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800128a:	e9cd 6306 	strd	r6, r3, [sp, #24]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800128e:	f000 fe2f 	bl	8001ef0 <HAL_GPIO_Init>
    hdma_sai1_b.Instance = DMA2_Stream4;
 8001292:	4a26      	ldr	r2, [pc, #152]	@ (800132c <HAL_SAI_MspInit+0x158>)
    hdma_sai1_b.Init.Channel = DMA_CHANNEL_1;
 8001294:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8001298:	4628      	mov	r0, r5
    hdma_sai1_b.Instance = DMA2_Stream4;
 800129a:	602a      	str	r2, [r5, #0]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 800129c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    hdma_sai1_b.Init.Channel = DMA_CHANNEL_1;
 80012a0:	606b      	str	r3, [r5, #4]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012a2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012a6:	60ae      	str	r6, [r5, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 80012a8:	60ee      	str	r6, [r5, #12]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012aa:	626e      	str	r6, [r5, #36]	@ 0x24
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012ac:	e9c5 2304 	strd	r2, r3, [r5, #16]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 80012b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012b8:	e9c5 2306 	strd	r2, r3, [r5, #24]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80012bc:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80012c0:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 80012c2:	f000 fc65 	bl	8001b90 <HAL_DMA_Init>
 80012c6:	b9e8      	cbnz	r0, 8001304 <HAL_SAI_MspInit+0x130>
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
 80012c8:	63ac      	str	r4, [r5, #56]	@ 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
 80012ca:	e9c4 551b 	strd	r5, r5, [r4, #108]	@ 0x6c
}
 80012ce:	b009      	add	sp, #36	@ 0x24
 80012d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
       __HAL_RCC_SAI1_CLK_ENABLE();
 80012d2:	4917      	ldr	r1, [pc, #92]	@ (8001330 <HAL_SAI_MspInit+0x15c>)
 80012d4:	6c48      	ldr	r0, [r1, #68]	@ 0x44
 80012d6:	f440 0080 	orr.w	r0, r0, #4194304	@ 0x400000
 80012da:	6448      	str	r0, [r1, #68]	@ 0x44
 80012dc:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 80012de:	f401 0180 	and.w	r1, r1, #4194304	@ 0x400000
 80012e2:	9102      	str	r1, [sp, #8]
 80012e4:	9902      	ldr	r1, [sp, #8]
 80012e6:	e7c4      	b.n	8001272 <HAL_SAI_MspInit+0x9e>
       __HAL_RCC_SAI1_CLK_ENABLE();
 80012e8:	4911      	ldr	r1, [pc, #68]	@ (8001330 <HAL_SAI_MspInit+0x15c>)
 80012ea:	6c48      	ldr	r0, [r1, #68]	@ 0x44
 80012ec:	f440 0080 	orr.w	r0, r0, #4194304	@ 0x400000
 80012f0:	6448      	str	r0, [r1, #68]	@ 0x44
 80012f2:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 80012f4:	f401 0180 	and.w	r1, r1, #4194304	@ 0x400000
 80012f8:	9101      	str	r1, [sp, #4]
 80012fa:	9901      	ldr	r1, [sp, #4]
 80012fc:	e77a      	b.n	80011f4 <HAL_SAI_MspInit+0x20>
      Error_Handler();
 80012fe:	f7ff ff29 	bl	8001154 <Error_Handler>
 8001302:	e7ac      	b.n	800125e <HAL_SAI_MspInit+0x8a>
      Error_Handler();
 8001304:	f7ff ff26 	bl	8001154 <Error_Handler>
 8001308:	e7de      	b.n	80012c8 <HAL_SAI_MspInit+0xf4>
 800130a:	bf00      	nop
 800130c:	40015804 	.word	0x40015804
 8001310:	40015824 	.word	0x40015824
 8001314:	200012cc 	.word	0x200012cc
 8001318:	40021000 	.word	0x40021000
 800131c:	40021800 	.word	0x40021800
 8001320:	20001330 	.word	0x20001330
 8001324:	40026428 	.word	0x40026428
 8001328:	200012d0 	.word	0x200012d0
 800132c:	40026470 	.word	0x40026470
 8001330:	40023800 	.word	0x40023800

08001334 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001334:	4b0a      	ldr	r3, [pc, #40]	@ (8001360 <HAL_MspInit+0x2c>)
{
 8001336:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8001338:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800133a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800133e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001340:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001342:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8001346:	9200      	str	r2, [sp, #0]
 8001348:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800134a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800134c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001350:	645a      	str	r2, [r3, #68]	@ 0x44
 8001352:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001354:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001358:	9301      	str	r3, [sp, #4]
 800135a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800135c:	b002      	add	sp, #8
 800135e:	4770      	bx	lr
 8001360:	40023800 	.word	0x40023800

08001364 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001364:	e7fe      	b.n	8001364 <NMI_Handler>
 8001366:	bf00      	nop

08001368 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001368:	e7fe      	b.n	8001368 <HardFault_Handler>
 800136a:	bf00      	nop

0800136c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800136c:	e7fe      	b.n	800136c <MemManage_Handler>
 800136e:	bf00      	nop

08001370 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001370:	e7fe      	b.n	8001370 <BusFault_Handler>
 8001372:	bf00      	nop

08001374 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001374:	e7fe      	b.n	8001374 <UsageFault_Handler>
 8001376:	bf00      	nop

08001378 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop

0800137c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop

08001380 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop

08001384 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001384:	f000 b912 	b.w	80015ac <HAL_IncTick>

08001388 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001388:	4801      	ldr	r0, [pc, #4]	@ (8001390 <DMA2_Stream0_IRQHandler+0x8>)
 800138a:	f000 bcdd 	b.w	8001d48 <HAL_DMA_IRQHandler>
 800138e:	bf00      	nop
 8001390:	200000fc 	.word	0x200000fc

08001394 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8001394:	4801      	ldr	r0, [pc, #4]	@ (800139c <DMA2_Stream1_IRQHandler+0x8>)
 8001396:	f000 bcd7 	b.w	8001d48 <HAL_DMA_IRQHandler>
 800139a:	bf00      	nop
 800139c:	20001330 	.word	0x20001330

080013a0 <DMA2_Stream4_IRQHandler>:
void DMA2_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 80013a0:	4801      	ldr	r0, [pc, #4]	@ (80013a8 <DMA2_Stream4_IRQHandler+0x8>)
 80013a2:	f000 bcd1 	b.w	8001d48 <HAL_DMA_IRQHandler>
 80013a6:	bf00      	nop
 80013a8:	200012d0 	.word	0x200012d0

080013ac <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013ac:	4a03      	ldr	r2, [pc, #12]	@ (80013bc <SystemInit+0x10>)
 80013ae:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80013b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013b6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013ba:	4770      	bx	lr
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <MX_TIM5_Init>:

TIM_HandleTypeDef htim5;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80013c0:	b510      	push	{r4, lr}

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013c2:	2300      	movs	r3, #0
{
 80013c4:	b088      	sub	sp, #32
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80013c6:	4819      	ldr	r0, [pc, #100]	@ (800142c <MX_TIM5_Init+0x6c>)
  htim5.Init.Prescaler = 108-1;
 80013c8:	216b      	movs	r1, #107	@ 0x6b
  htim5.Instance = TIM5;
 80013ca:	4c19      	ldr	r4, [pc, #100]	@ (8001430 <MX_TIM5_Init+0x70>)
  htim5.Init.Prescaler = 108-1;
 80013cc:	f240 5234 	movw	r2, #1332	@ 0x534
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013d0:	9304      	str	r3, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d2:	9301      	str	r3, [sp, #4]
  htim5.Init.Prescaler = 108-1;
 80013d4:	6103      	str	r3, [r0, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim5.Init.Period = 1332;
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d6:	6183      	str	r3, [r0, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013d8:	9307      	str	r3, [sp, #28]
  htim5.Init.Prescaler = 108-1;
 80013da:	e9c0 4100 	strd	r4, r1, [r0]
 80013de:	e9c0 3202 	strd	r3, r2, [r0, #8]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013e2:	e9cd 3305 	strd	r3, r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80013ea:	f002 fb73 	bl	8003ad4 <HAL_TIM_Base_Init>
 80013ee:	b990      	cbnz	r0, 8001416 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80013f4:	a904      	add	r1, sp, #16
 80013f6:	480d      	ldr	r0, [pc, #52]	@ (800142c <MX_TIM5_Init+0x6c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013f8:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80013fa:	f002 fc53 	bl	8003ca4 <HAL_TIM_ConfigClockSource>
 80013fe:	b988      	cbnz	r0, 8001424 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001400:	2220      	movs	r2, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001402:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001404:	a901      	add	r1, sp, #4
 8001406:	4809      	ldr	r0, [pc, #36]	@ (800142c <MX_TIM5_Init+0x6c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001408:	9201      	str	r2, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800140a:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800140c:	f002 fcf4 	bl	8003df8 <HAL_TIMEx_MasterConfigSynchronization>
 8001410:	b920      	cbnz	r0, 800141c <MX_TIM5_Init+0x5c>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001412:	b008      	add	sp, #32
 8001414:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001416:	f7ff fe9d 	bl	8001154 <Error_Handler>
 800141a:	e7e9      	b.n	80013f0 <MX_TIM5_Init+0x30>
    Error_Handler();
 800141c:	f7ff fe9a 	bl	8001154 <Error_Handler>
}
 8001420:	b008      	add	sp, #32
 8001422:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001424:	f7ff fe96 	bl	8001154 <Error_Handler>
 8001428:	e7ea      	b.n	8001400 <MX_TIM5_Init+0x40>
 800142a:	bf00      	nop
 800142c:	200014a0 	.word	0x200014a0
 8001430:	40000c00 	.word	0x40000c00

08001434 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM5)
 8001434:	4b09      	ldr	r3, [pc, #36]	@ (800145c <HAL_TIM_Base_MspInit+0x28>)
 8001436:	6802      	ldr	r2, [r0, #0]
 8001438:	429a      	cmp	r2, r3
 800143a:	d000      	beq.n	800143e <HAL_TIM_Base_MspInit+0xa>
 800143c:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800143e:	f503 330b 	add.w	r3, r3, #142336	@ 0x22c00
{
 8001442:	b082      	sub	sp, #8
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001444:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001446:	f042 0208 	orr.w	r2, r2, #8
 800144a:	641a      	str	r2, [r3, #64]	@ 0x40
 800144c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144e:	f003 0308 	and.w	r3, r3, #8
 8001452:	9301      	str	r3, [sp, #4]
 8001454:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001456:	b002      	add	sp, #8
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	40000c00 	.word	0x40000c00

08001460 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001460:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001498 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001464:	480d      	ldr	r0, [pc, #52]	@ (800149c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001466:	490e      	ldr	r1, [pc, #56]	@ (80014a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001468:	4a0e      	ldr	r2, [pc, #56]	@ (80014a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800146a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800146c:	e002      	b.n	8001474 <LoopCopyDataInit>

0800146e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800146e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001470:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001472:	3304      	adds	r3, #4

08001474 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001474:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001476:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001478:	d3f9      	bcc.n	800146e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800147a:	4a0b      	ldr	r2, [pc, #44]	@ (80014a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800147c:	4c0b      	ldr	r4, [pc, #44]	@ (80014ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800147e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001480:	e001      	b.n	8001486 <LoopFillZerobss>

08001482 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001482:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001484:	3204      	adds	r2, #4

08001486 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001486:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001488:	d3fb      	bcc.n	8001482 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800148a:	f7ff ff8f 	bl	80013ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800148e:	f002 fd15 	bl	8003ebc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001492:	f7ff fe07 	bl	80010a4 <main>
  bx  lr    
 8001496:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001498:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800149c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a0:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 80014a4:	08003f44 	.word	0x08003f44
  ldr r2, =_sbss
 80014a8:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 80014ac:	200014f0 	.word	0x200014f0

080014b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014b0:	e7fe      	b.n	80014b0 <ADC_IRQHandler>
	...

080014b4 <arm_biquad_cascade_df2T_f32>:
void arm_biquad_cascade_df2T_f32(
  const arm_biquad_cascade_df2T_instance_f32 * S,
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t blockSize)
{
 80014b4:	b530      	push	{r4, r5, lr}
 80014b6:	4615      	mov	r5, r2
 80014b8:	461c      	mov	r4, r3
  const float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
        float32_t acc1;                                /* Accumulator */
        float32_t b0, b1, b2, a1, a2;                  /* Filter coefficients */
        float32_t Xn1;                                 /* Temporary input */
        float32_t d1, d2;                              /* State variables */
        uint32_t sample, stage = S->numStages;         /* Loop counters */
 80014ba:	7802      	ldrb	r2, [r0, #0]
 80014bc:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 80014c0:	f103 0e14 	add.w	lr, r3, #20
 80014c4:	f100 0308 	add.w	r3, r0, #8

  do
  {
     /* Reading the coefficients */
     b0 = pCoeffs[0];
 80014c8:	ed1e 5a05 	vldr	s10, [lr, #-20]	@ 0xffffffec
     b1 = pCoeffs[1];
 80014cc:	ed5e 4a04 	vldr	s9, [lr, #-16]
     b2 = pCoeffs[2];
 80014d0:	ed1e 4a03 	vldr	s8, [lr, #-12]
     a1 = pCoeffs[3];
 80014d4:	ed5e 3a02 	vldr	s7, [lr, #-8]
     a2 = pCoeffs[4];
 80014d8:	ed1e 3a01 	vldr	s6, [lr, #-4]

     /* Reading the state values */
     d1 = pState[0];
 80014dc:	ed53 7a02 	vldr	s15, [r3, #-8]
     d2 = pState[1];
 80014e0:	ed13 6a01 	vldr	s12, [r3, #-4]
      /* Initialize blkCnt with number of samples */
      sample = blockSize;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (sample > 0U) {
 80014e4:	b1bc      	cbz	r4, 8001516 <arm_biquad_cascade_df2T_f32+0x62>
      sample = blockSize;
 80014e6:	4620      	mov	r0, r4
      while (sample > 0U) {
 80014e8:	46ac      	mov	ip, r5
        Xn1 = *pIn++;
 80014ea:	ecb1 7a01 	vldmia	r1!, {s14}
      while (sample > 0U) {
 80014ee:	3801      	subs	r0, #1

        acc1 = b0 * Xn1 + d1;
 80014f0:	eee5 7a07 	vfma.f32	s15, s10, s14

        d1 = b1 * Xn1 + d2;
        d1 += a1 * acc1;
 80014f4:	ee63 6aa7 	vmul.f32	s13, s7, s15

        d2 = b2 * Xn1;
        d2 += a2 * acc1;

        *pOut++ = acc1;
 80014f8:	ecec 7a01 	vstmia	ip!, {s15}
        d2 += a2 * acc1;
 80014fc:	ee63 5a27 	vmul.f32	s11, s6, s15
 8001500:	eef0 7a66 	vmov.f32	s15, s13
 8001504:	eee4 7a87 	vfma.f32	s15, s9, s14
        d1 += a1 * acc1;
 8001508:	ee76 7a27 	vadd.f32	s15, s12, s15
        d2 += a2 * acc1;
 800150c:	eeb0 6a65 	vmov.f32	s12, s11
 8001510:	eea4 6a07 	vfma.f32	s12, s8, s14
      while (sample > 0U) {
 8001514:	d1e9      	bne.n	80014ea <arm_biquad_cascade_df2T_f32+0x36>
      pOut = pDst;

      /* decrement loop counter */
      stage--;

   } while (stage > 0U);
 8001516:	3a01      	subs	r2, #1
      pState[0] = d1;
 8001518:	ed43 7a02 	vstr	s15, [r3, #-8]
      pState[1] = d2;
 800151c:	ed03 6a01 	vstr	s12, [r3, #-4]
   } while (stage > 0U);
 8001520:	f10e 0e14 	add.w	lr, lr, #20
 8001524:	f103 0308 	add.w	r3, r3, #8
 8001528:	d001      	beq.n	800152e <arm_biquad_cascade_df2T_f32+0x7a>
      pIn = pDst;
 800152a:	4629      	mov	r1, r5
 800152c:	e7cc      	b.n	80014c8 <arm_biquad_cascade_df2T_f32+0x14>

}
 800152e:	bd30      	pop	{r4, r5, pc}

08001530 <arm_biquad_cascade_df2T_init_f32>:
void arm_biquad_cascade_df2T_init_f32(
        arm_biquad_cascade_df2T_instance_f32 * S,
        uint8_t numStages,
  const float32_t * pCoeffs,
        float32_t * pState)
{
 8001530:	b538      	push	{r3, r4, r5, lr}
 8001532:	4604      	mov	r4, r0
 8001534:	4615      	mov	r5, r2
 8001536:	4608      	mov	r0, r1

  /* Assign coefficient pointer */
  S->pCoeffs = pCoeffs;

  /* Clear state buffer and size is always 2 * numStages */
  memset(pState, 0, (2U * (uint32_t) numStages) * sizeof(float32_t));
 8001538:	2100      	movs	r1, #0
  S->pCoeffs = pCoeffs;
 800153a:	60a5      	str	r5, [r4, #8]
  memset(pState, 0, (2U * (uint32_t) numStages) * sizeof(float32_t));
 800153c:	00c2      	lsls	r2, r0, #3
  S->numStages = numStages;
 800153e:	7020      	strb	r0, [r4, #0]
  memset(pState, 0, (2U * (uint32_t) numStages) * sizeof(float32_t));
 8001540:	4618      	mov	r0, r3
 8001542:	f002 fcb3 	bl	8003eac <memset>

  /* Assign state pointer */
  S->pState = pState;
 8001546:	6060      	str	r0, [r4, #4]
}
 8001548:	bd38      	pop	{r3, r4, r5, pc}
 800154a:	bf00      	nop

0800154c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800154c:	490e      	ldr	r1, [pc, #56]	@ (8001588 <HAL_InitTick+0x3c>)
 800154e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001552:	4a0e      	ldr	r2, [pc, #56]	@ (800158c <HAL_InitTick+0x40>)
{
 8001554:	b510      	push	{r4, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001556:	7809      	ldrb	r1, [r1, #0]
{
 8001558:	4604      	mov	r4, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800155a:	6812      	ldr	r2, [r2, #0]
 800155c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001560:	fbb2 f0f3 	udiv	r0, r2, r3
 8001564:	f000 fafe 	bl	8001b64 <HAL_SYSTICK_Config>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001568:	b908      	cbnz	r0, 800156e <HAL_InitTick+0x22>
 800156a:	2c0f      	cmp	r4, #15
 800156c:	d901      	bls.n	8001572 <HAL_InitTick+0x26>
    return HAL_ERROR;
 800156e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001570:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001572:	2200      	movs	r2, #0
 8001574:	4621      	mov	r1, r4
 8001576:	f04f 30ff 	mov.w	r0, #4294967295
 800157a:	f000 faa9 	bl	8001ad0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800157e:	4b04      	ldr	r3, [pc, #16]	@ (8001590 <HAL_InitTick+0x44>)
 8001580:	2000      	movs	r0, #0
 8001582:	601c      	str	r4, [r3, #0]
}
 8001584:	bd10      	pop	{r4, pc}
 8001586:	bf00      	nop
 8001588:	200000d4 	.word	0x200000d4
 800158c:	200000d0 	.word	0x200000d0
 8001590:	200000d8 	.word	0x200000d8

08001594 <HAL_Init>:
{
 8001594:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001596:	2003      	movs	r0, #3
 8001598:	f000 fa88 	bl	8001aac <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800159c:	2000      	movs	r0, #0
 800159e:	f7ff ffd5 	bl	800154c <HAL_InitTick>
  HAL_MspInit();
 80015a2:	f7ff fec7 	bl	8001334 <HAL_MspInit>
}
 80015a6:	2000      	movs	r0, #0
 80015a8:	bd08      	pop	{r3, pc}
 80015aa:	bf00      	nop

080015ac <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80015ac:	4a03      	ldr	r2, [pc, #12]	@ (80015bc <HAL_IncTick+0x10>)
 80015ae:	4b04      	ldr	r3, [pc, #16]	@ (80015c0 <HAL_IncTick+0x14>)
 80015b0:	6811      	ldr	r1, [r2, #0]
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	440b      	add	r3, r1
 80015b6:	6013      	str	r3, [r2, #0]
}
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	200014ec 	.word	0x200014ec
 80015c0:	200000d4 	.word	0x200000d4

080015c4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80015c4:	4b01      	ldr	r3, [pc, #4]	@ (80015cc <HAL_GetTick+0x8>)
 80015c6:	6818      	ldr	r0, [r3, #0]
}
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	200014ec 	.word	0x200014ec

080015d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015d0:	b538      	push	{r3, r4, r5, lr}
 80015d2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80015d4:	f7ff fff6 	bl	80015c4 <HAL_GetTick>
 80015d8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015da:	1c63      	adds	r3, r4, #1
 80015dc:	d002      	beq.n	80015e4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80015de:	4b04      	ldr	r3, [pc, #16]	@ (80015f0 <HAL_Delay+0x20>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015e4:	f7ff ffee 	bl	80015c4 <HAL_GetTick>
 80015e8:	1b40      	subs	r0, r0, r5
 80015ea:	42a0      	cmp	r0, r4
 80015ec:	d3fa      	bcc.n	80015e4 <HAL_Delay+0x14>
  {
  }
}
 80015ee:	bd38      	pop	{r3, r4, r5, pc}
 80015f0:	200000d4 	.word	0x200000d4

080015f4 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015f4:	2800      	cmp	r0, #0
 80015f6:	f000 809d 	beq.w	8001734 <HAL_ADC_Init+0x140>
{
 80015fa:	b538      	push	{r3, r4, r5, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80015fc:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 80015fe:	4604      	mov	r4, r0
 8001600:	b13d      	cbz	r5, 8001612 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001602:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001604:	06db      	lsls	r3, r3, #27
 8001606:	d50c      	bpl.n	8001622 <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001608:	2300      	movs	r3, #0
    tmp_hal_status = HAL_ERROR;
 800160a:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800160c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
}
 8001610:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8001612:	f7ff fa61 	bl	8000ad8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001616:	6465      	str	r5, [r4, #68]	@ 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001618:	6c23      	ldr	r3, [r4, #64]	@ 0x40
    hadc->Lock = HAL_UNLOCKED;
 800161a:	f884 503c 	strb.w	r5, [r4, #60]	@ 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800161e:	06db      	lsls	r3, r3, #27
 8001620:	d4f2      	bmi.n	8001608 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 8001622:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8001624:	4b47      	ldr	r3, [pc, #284]	@ (8001744 <HAL_ADC_Init+0x150>)
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001626:	4a48      	ldr	r2, [pc, #288]	@ (8001748 <HAL_ADC_Init+0x154>)
    ADC_STATE_CLR_SET(hadc->State,
 8001628:	400b      	ands	r3, r1
 800162a:	f043 0302 	orr.w	r3, r3, #2
 800162e:	6423      	str	r3, [r4, #64]	@ 0x40
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001630:	6851      	ldr	r1, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001632:	6823      	ldr	r3, [r4, #0]
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001634:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 8001638:	6051      	str	r1, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800163a:	6850      	ldr	r0, [r2, #4]
 800163c:	6861      	ldr	r1, [r4, #4]
 800163e:	4308      	orrs	r0, r1
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001640:	4942      	ldr	r1, [pc, #264]	@ (800174c <HAL_ADC_Init+0x158>)
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001642:	6050      	str	r0, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001644:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001646:	6920      	ldr	r0, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001648:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800164c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800164e:	685a      	ldr	r2, [r3, #4]
 8001650:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001654:	68a0      	ldr	r0, [r4, #8]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001656:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001658:	685a      	ldr	r2, [r3, #4]
 800165a:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800165e:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001660:	685a      	ldr	r2, [r3, #4]
 8001662:	4302      	orrs	r2, r0
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001664:	68e0      	ldr	r0, [r4, #12]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001666:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001668:	689a      	ldr	r2, [r3, #8]
 800166a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800166e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001670:	689a      	ldr	r2, [r3, #8]
 8001672:	4302      	orrs	r2, r0
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001674:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8001676:	4288      	cmp	r0, r1
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001678:	609a      	str	r2, [r3, #8]
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800167a:	689a      	ldr	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800167c:	d052      	beq.n	8001724 <HAL_ADC_Init+0x130>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800167e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001682:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001684:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001686:	689a      	ldr	r2, [r3, #8]
 8001688:	4310      	orrs	r0, r2
 800168a:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800168c:	689a      	ldr	r2, [r3, #8]
 800168e:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001692:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001694:	689a      	ldr	r2, [r3, #8]
 8001696:	430a      	orrs	r2, r1
 8001698:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800169a:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800169c:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800169e:	f022 0202 	bic.w	r2, r2, #2
 80016a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016a4:	689a      	ldr	r2, [r3, #8]
 80016a6:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80016aa:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80016ac:	f894 2020 	ldrb.w	r2, [r4, #32]
 80016b0:	2a00      	cmp	r2, #0
 80016b2:	d041      	beq.n	8001738 <HAL_ADC_Init+0x144>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80016b4:	6858      	ldr	r0, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80016b6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80016b8:	f440 6000 	orr.w	r0, r0, #2048	@ 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80016bc:	1e51      	subs	r1, r2, #1
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80016be:	6058      	str	r0, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80016c0:	685a      	ldr	r2, [r3, #4]
 80016c2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80016c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80016c8:	685a      	ldr	r2, [r3, #4]
 80016ca:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80016ce:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80016d0:	6add      	ldr	r5, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016d2:	69e2      	ldr	r2, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80016d4:	f425 0570 	bic.w	r5, r5, #15728640	@ 0xf00000
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80016d8:	6960      	ldr	r0, [r4, #20]
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016da:	1e51      	subs	r1, r2, #1
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80016dc:	62dd      	str	r5, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016e0:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80016e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80016e6:	689a      	ldr	r2, [r3, #8]
 80016e8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80016ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80016ee:	689a      	ldr	r2, [r3, #8]
 80016f0:	f894 1030 	ldrb.w	r1, [r4, #48]	@ 0x30
 80016f4:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
    ADC_CLEAR_ERRORCODE(hadc);
 80016f8:	2100      	movs	r1, #0
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80016fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80016fc:	689a      	ldr	r2, [r3, #8]
 80016fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001702:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001704:	689a      	ldr	r2, [r3, #8]
 8001706:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800170a:	4608      	mov	r0, r1
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800170c:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800170e:	6461      	str	r1, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001710:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001712:	f023 0303 	bic.w	r3, r3, #3
 8001716:	f043 0301 	orr.w	r3, r3, #1
 800171a:	6423      	str	r3, [r4, #64]	@ 0x40
  __HAL_UNLOCK(hadc);
 800171c:	2300      	movs	r3, #0
 800171e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8001722:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001724:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001728:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800172a:	689a      	ldr	r2, [r3, #8]
 800172c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001730:	609a      	str	r2, [r3, #8]
 8001732:	e7b2      	b.n	800169a <HAL_ADC_Init+0xa6>
    return HAL_ERROR;
 8001734:	2001      	movs	r0, #1
}
 8001736:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800173e:	605a      	str	r2, [r3, #4]
 8001740:	e7c6      	b.n	80016d0 <HAL_ADC_Init+0xdc>
 8001742:	bf00      	nop
 8001744:	ffffeefd 	.word	0xffffeefd
 8001748:	40012300 	.word	0x40012300
 800174c:	0f000001 	.word	0x0f000001

08001750 <HAL_ADC_Start_DMA>:
{
 8001750:	b570      	push	{r4, r5, r6, lr}
 8001752:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 8001754:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
{
 8001758:	b082      	sub	sp, #8
  __IO uint32_t counter = 0;
 800175a:	2300      	movs	r3, #0
  __HAL_LOCK(hadc);
 800175c:	2801      	cmp	r0, #1
  __IO uint32_t counter = 0;
 800175e:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001760:	f000 8085 	beq.w	800186e <HAL_ADC_Start_DMA+0x11e>
 8001764:	2301      	movs	r3, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001766:	682e      	ldr	r6, [r5, #0]
  __HAL_LOCK(hadc);
 8001768:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800176c:	68b3      	ldr	r3, [r6, #8]
 800176e:	07dc      	lsls	r4, r3, #31
 8001770:	d414      	bmi.n	800179c <HAL_ADC_Start_DMA+0x4c>
    __HAL_ADC_ENABLE(hadc);
 8001772:	68b3      	ldr	r3, [r6, #8]
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	60b3      	str	r3, [r6, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800177a:	4b3e      	ldr	r3, [pc, #248]	@ (8001874 <HAL_ADC_Start_DMA+0x124>)
 800177c:	6818      	ldr	r0, [r3, #0]
 800177e:	4b3e      	ldr	r3, [pc, #248]	@ (8001878 <HAL_ADC_Start_DMA+0x128>)
 8001780:	fba3 3000 	umull	r3, r0, r3, r0
 8001784:	0c80      	lsrs	r0, r0, #18
 8001786:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800178a:	9001      	str	r0, [sp, #4]
    while(counter != 0)
 800178c:	9b01      	ldr	r3, [sp, #4]
 800178e:	b12b      	cbz	r3, 800179c <HAL_ADC_Start_DMA+0x4c>
      counter--;
 8001790:	9c01      	ldr	r4, [sp, #4]
 8001792:	3c01      	subs	r4, #1
 8001794:	9401      	str	r4, [sp, #4]
    while(counter != 0)
 8001796:	9801      	ldr	r0, [sp, #4]
 8001798:	2800      	cmp	r0, #0
 800179a:	d1f9      	bne.n	8001790 <HAL_ADC_Start_DMA+0x40>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800179c:	68b3      	ldr	r3, [r6, #8]
 800179e:	f013 0f01 	tst.w	r3, #1
    ADC_STATE_CLR_SET(hadc->State,
 80017a2:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80017a4:	d03e      	beq.n	8001824 <HAL_ADC_Start_DMA+0xd4>
    ADC_STATE_CLR_SET(hadc->State,
 80017a6:	4835      	ldr	r0, [pc, #212]	@ (800187c <HAL_ADC_Start_DMA+0x12c>)
 80017a8:	4018      	ands	r0, r3
 80017aa:	f440 7080 	orr.w	r0, r0, #256	@ 0x100
 80017ae:	6428      	str	r0, [r5, #64]	@ 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017b0:	6873      	ldr	r3, [r6, #4]
 80017b2:	0558      	lsls	r0, r3, #21
 80017b4:	d505      	bpl.n	80017c2 <HAL_ADC_Start_DMA+0x72>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80017b6:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 80017b8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80017bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80017c0:	642b      	str	r3, [r5, #64]	@ 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017c2:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 80017c4:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
 80017c8:	d045      	beq.n	8001856 <HAL_ADC_Start_DMA+0x106>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80017ca:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 80017cc:	f023 0306 	bic.w	r3, r3, #6
 80017d0:	646b      	str	r3, [r5, #68]	@ 0x44
    __HAL_UNLOCK(hadc);   
 80017d2:	2000      	movs	r0, #0
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80017d4:	4613      	mov	r3, r2
 80017d6:	460a      	mov	r2, r1
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80017d8:	4929      	ldr	r1, [pc, #164]	@ (8001880 <HAL_ADC_Start_DMA+0x130>)
    __HAL_UNLOCK(hadc);   
 80017da:	f885 003c 	strb.w	r0, [r5, #60]	@ 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80017de:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 80017e0:	63c1      	str	r1, [r0, #60]	@ 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80017e2:	4928      	ldr	r1, [pc, #160]	@ (8001884 <HAL_ADC_Start_DMA+0x134>)
 80017e4:	6401      	str	r1, [r0, #64]	@ 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80017e6:	4928      	ldr	r1, [pc, #160]	@ (8001888 <HAL_ADC_Start_DMA+0x138>)
 80017e8:	64c1      	str	r1, [r0, #76]	@ 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80017ea:	f06f 0122 	mvn.w	r1, #34	@ 0x22
 80017ee:	6031      	str	r1, [r6, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80017f0:	6871      	ldr	r1, [r6, #4]
 80017f2:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 80017f6:	6071      	str	r1, [r6, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80017f8:	68b1      	ldr	r1, [r6, #8]
 80017fa:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 80017fe:	60b1      	str	r1, [r6, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001800:	f106 014c 	add.w	r1, r6, #76	@ 0x4c
 8001804:	f000 fa60 	bl	8001cc8 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001808:	4b20      	ldr	r3, [pc, #128]	@ (800188c <HAL_ADC_Start_DMA+0x13c>)
 800180a:	685a      	ldr	r2, [r3, #4]
 800180c:	06d2      	lsls	r2, r2, #27
 800180e:	d113      	bne.n	8001838 <HAL_ADC_Start_DMA+0xe8>
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001810:	682b      	ldr	r3, [r5, #0]
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8001818:	d10b      	bne.n	8001832 <HAL_ADC_Start_DMA+0xe2>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800181a:	689a      	ldr	r2, [r3, #8]
 800181c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001820:	609a      	str	r2, [r3, #8]
 8001822:	e006      	b.n	8001832 <HAL_ADC_Start_DMA+0xe2>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001824:	f043 0310 	orr.w	r3, r3, #16
 8001828:	642b      	str	r3, [r5, #64]	@ 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800182a:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	646b      	str	r3, [r5, #68]	@ 0x44
  return HAL_OK;
 8001832:	2000      	movs	r0, #0
}
 8001834:	b002      	add	sp, #8
 8001836:	bd70      	pop	{r4, r5, r6, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001838:	682a      	ldr	r2, [r5, #0]
 800183a:	4915      	ldr	r1, [pc, #84]	@ (8001890 <HAL_ADC_Start_DMA+0x140>)
 800183c:	428a      	cmp	r2, r1
 800183e:	d00c      	beq.n	800185a <HAL_ADC_Start_DMA+0x10a>
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001840:	685b      	ldr	r3, [r3, #4]
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001842:	06db      	lsls	r3, r3, #27
 8001844:	d4f5      	bmi.n	8001832 <HAL_ADC_Start_DMA+0xe2>
 8001846:	4b13      	ldr	r3, [pc, #76]	@ (8001894 <HAL_ADC_Start_DMA+0x144>)
 8001848:	429a      	cmp	r2, r3
 800184a:	d1f2      	bne.n	8001832 <HAL_ADC_Start_DMA+0xe2>
 800184c:	689a      	ldr	r2, [r3, #8]
 800184e:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8001852:	d1ee      	bne.n	8001832 <HAL_ADC_Start_DMA+0xe2>
 8001854:	e7e1      	b.n	800181a <HAL_ADC_Start_DMA+0xca>
      ADC_CLEAR_ERRORCODE(hadc);
 8001856:	646b      	str	r3, [r5, #68]	@ 0x44
 8001858:	e7bb      	b.n	80017d2 <HAL_ADC_Start_DMA+0x82>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800185a:	6891      	ldr	r1, [r2, #8]
 800185c:	f011 5f40 	tst.w	r1, #805306368	@ 0x30000000
 8001860:	d103      	bne.n	800186a <HAL_ADC_Start_DMA+0x11a>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001862:	6891      	ldr	r1, [r2, #8]
 8001864:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8001868:	6091      	str	r1, [r2, #8]
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	e7e1      	b.n	8001832 <HAL_ADC_Start_DMA+0xe2>
  __HAL_LOCK(hadc);
 800186e:	2002      	movs	r0, #2
}
 8001870:	b002      	add	sp, #8
 8001872:	bd70      	pop	{r4, r5, r6, pc}
 8001874:	200000d0 	.word	0x200000d0
 8001878:	431bde83 	.word	0x431bde83
 800187c:	fffff8fe 	.word	0xfffff8fe
 8001880:	080018c5 	.word	0x080018c5
 8001884:	0800189d 	.word	0x0800189d
 8001888:	080018ad 	.word	0x080018ad
 800188c:	40012300 	.word	0x40012300
 8001890:	40012000 	.word	0x40012000
 8001894:	40012200 	.word	0x40012200

08001898 <HAL_ADC_ConvHalfCpltCallback>:
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop

0800189c <ADC_DMAHalfConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800189c:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 800189e:	b508      	push	{r3, lr}
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80018a0:	f7ff fffa 	bl	8001898 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018a4:	bd08      	pop	{r3, pc}
 80018a6:	bf00      	nop

080018a8 <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop

080018ac <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018ac:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 80018ae:	b508      	push	{r3, lr}
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80018b0:	2340      	movs	r3, #64	@ 0x40
 80018b2:	6403      	str	r3, [r0, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80018b4:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80018b6:	f043 0304 	orr.w	r3, r3, #4
 80018ba:	6443      	str	r3, [r0, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80018bc:	f7ff fff4 	bl	80018a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018c0:	bd08      	pop	{r3, pc}
 80018c2:	bf00      	nop

080018c4 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018c4:	6b83      	ldr	r3, [r0, #56]	@ 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80018c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018c8:	f012 0f50 	tst.w	r2, #80	@ 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 80018ce:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80018d0:	d123      	bne.n	800191a <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018d6:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018d8:	641a      	str	r2, [r3, #64]	@ 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018da:	688a      	ldr	r2, [r1, #8]
 80018dc:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 80018e0:	d117      	bne.n	8001912 <ADC_DMAConvCplt+0x4e>
 80018e2:	699a      	ldr	r2, [r3, #24]
 80018e4:	b9aa      	cbnz	r2, 8001912 <ADC_DMAConvCplt+0x4e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80018e6:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018e8:	f412 0f70 	tst.w	r2, #15728640	@ 0xf00000
 80018ec:	d002      	beq.n	80018f4 <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80018ee:	688a      	ldr	r2, [r1, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80018f0:	0550      	lsls	r0, r2, #21
 80018f2:	d40e      	bmi.n	8001912 <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80018f4:	684a      	ldr	r2, [r1, #4]
 80018f6:	f022 0220 	bic.w	r2, r2, #32
 80018fa:	604a      	str	r2, [r1, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80018fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018fe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001902:	641a      	str	r2, [r3, #64]	@ 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001904:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001906:	04d1      	lsls	r1, r2, #19
 8001908:	d403      	bmi.n	8001912 <ADC_DMAConvCplt+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800190a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800190c:	f042 0201 	orr.w	r2, r2, #1
 8001910:	641a      	str	r2, [r3, #64]	@ 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff fb20 	bl	8000f58 <HAL_ADC_ConvCpltCallback>
}
 8001918:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800191a:	06d2      	lsls	r2, r2, #27
 800191c:	d404      	bmi.n	8001928 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800191e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 8001920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001926:	4718      	bx	r3
      HAL_ADC_ErrorCallback(hadc);
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff ffbd 	bl	80018a8 <HAL_ADC_ErrorCallback>
}
 800192e:	bd10      	pop	{r4, pc}

08001930 <HAL_ADC_ConfigChannel>:
{
 8001930:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t counter = 0;
 8001932:	2300      	movs	r3, #0
{
 8001934:	b082      	sub	sp, #8
  __IO uint32_t counter = 0;
 8001936:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001938:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800193c:	2b01      	cmp	r3, #1
 800193e:	f000 80a7 	beq.w	8001a90 <HAL_ADC_ConfigChannel+0x160>
 8001942:	2201      	movs	r2, #1
 8001944:	4684      	mov	ip, r0
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001946:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hadc);
 8001948:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800194c:	6808      	ldr	r0, [r1, #0]
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800194e:	688c      	ldr	r4, [r1, #8]
 8001950:	b282      	uxth	r2, r0
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001952:	2809      	cmp	r0, #9
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001954:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001958:	d92d      	bls.n	80019b6 <HAL_ADC_ConfigChannel+0x86>
 800195a:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 800195e:	d02a      	beq.n	80019b6 <HAL_ADC_ConfigChannel+0x86>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001960:	f1ae 0e1e 	sub.w	lr, lr, #30
 8001964:	2607      	movs	r6, #7
 8001966:	68dd      	ldr	r5, [r3, #12]
 8001968:	fa06 f60e 	lsl.w	r6, r6, lr
 800196c:	ea25 0506 	bic.w	r5, r5, r6
 8001970:	60dd      	str	r5, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001972:	4d49      	ldr	r5, [pc, #292]	@ (8001a98 <HAL_ADC_ConfigChannel+0x168>)
 8001974:	42a8      	cmp	r0, r5
 8001976:	f000 8086 	beq.w	8001a86 <HAL_ADC_ConfigChannel+0x156>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800197a:	68dd      	ldr	r5, [r3, #12]
 800197c:	fa04 f40e 	lsl.w	r4, r4, lr
 8001980:	432c      	orrs	r4, r5
 8001982:	60dc      	str	r4, [r3, #12]
  if (sConfig->Rank < 7)
 8001984:	684c      	ldr	r4, [r1, #4]
 8001986:	2c06      	cmp	r4, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001988:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  if (sConfig->Rank < 7)
 800198c:	d824      	bhi.n	80019d8 <HAL_ADC_ConfigChannel+0xa8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800198e:	3905      	subs	r1, #5
 8001990:	241f      	movs	r4, #31
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001992:	408a      	lsls	r2, r1
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001994:	408c      	lsls	r4, r1
 8001996:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001998:	ea21 0104 	bic.w	r1, r1, r4
 800199c:	6359      	str	r1, [r3, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800199e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80019a0:	430a      	orrs	r2, r1
 80019a2:	635a      	str	r2, [r3, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80019a4:	4a3d      	ldr	r2, [pc, #244]	@ (8001a9c <HAL_ADC_ConfigChannel+0x16c>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d026      	beq.n	80019f8 <HAL_ADC_ConfigChannel+0xc8>
  __HAL_UNLOCK(hadc);
 80019aa:	2300      	movs	r3, #0
  return HAL_OK;
 80019ac:	4618      	mov	r0, r3
  __HAL_UNLOCK(hadc);
 80019ae:	f88c 303c 	strb.w	r3, [ip, #60]	@ 0x3c
}
 80019b2:	b002      	add	sp, #8
 80019b4:	bd70      	pop	{r4, r5, r6, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80019b6:	2507      	movs	r5, #7
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80019b8:	fa04 f40e 	lsl.w	r4, r4, lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80019bc:	fa05 fe0e 	lsl.w	lr, r5, lr
 80019c0:	691d      	ldr	r5, [r3, #16]
 80019c2:	ea25 050e 	bic.w	r5, r5, lr
 80019c6:	611d      	str	r5, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80019c8:	691d      	ldr	r5, [r3, #16]
 80019ca:	432c      	orrs	r4, r5
 80019cc:	611c      	str	r4, [r3, #16]
  if (sConfig->Rank < 7)
 80019ce:	684c      	ldr	r4, [r1, #4]
 80019d0:	2c06      	cmp	r4, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80019d2:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  if (sConfig->Rank < 7)
 80019d6:	d9da      	bls.n	800198e <HAL_ADC_ConfigChannel+0x5e>
  else if (sConfig->Rank < 13)
 80019d8:	2c0c      	cmp	r4, #12
 80019da:	d837      	bhi.n	8001a4c <HAL_ADC_ConfigChannel+0x11c>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80019dc:	3923      	subs	r1, #35	@ 0x23
 80019de:	241f      	movs	r4, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019e0:	408a      	lsls	r2, r1
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80019e2:	408c      	lsls	r4, r1
 80019e4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80019e6:	ea21 0104 	bic.w	r1, r1, r4
 80019ea:	6319      	str	r1, [r3, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019ec:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80019ee:	430a      	orrs	r2, r1
 80019f0:	631a      	str	r2, [r3, #48]	@ 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80019f2:	4a2a      	ldr	r2, [pc, #168]	@ (8001a9c <HAL_ADC_ConfigChannel+0x16c>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d1d8      	bne.n	80019aa <HAL_ADC_ConfigChannel+0x7a>
 80019f8:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 80019fc:	d03c      	beq.n	8001a78 <HAL_ADC_ConfigChannel+0x148>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80019fe:	2812      	cmp	r0, #18
 8001a00:	d030      	beq.n	8001a64 <HAL_ADC_ConfigChannel+0x134>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a02:	4b25      	ldr	r3, [pc, #148]	@ (8001a98 <HAL_ADC_ConfigChannel+0x168>)
 8001a04:	4298      	cmp	r0, r3
 8001a06:	d001      	beq.n	8001a0c <HAL_ADC_ConfigChannel+0xdc>
 8001a08:	2811      	cmp	r0, #17
 8001a0a:	d1ce      	bne.n	80019aa <HAL_ADC_ConfigChannel+0x7a>
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001a0c:	4b24      	ldr	r3, [pc, #144]	@ (8001aa0 <HAL_ADC_ConfigChannel+0x170>)
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a0e:	4922      	ldr	r1, [pc, #136]	@ (8001a98 <HAL_ADC_ConfigChannel+0x168>)
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001a10:	685a      	ldr	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a12:	4288      	cmp	r0, r1
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001a14:	f422 0280 	bic.w	r2, r2, #4194304	@ 0x400000
 8001a18:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001a1a:	685a      	ldr	r2, [r3, #4]
 8001a1c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001a20:	605a      	str	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a22:	d1c2      	bne.n	80019aa <HAL_ADC_ConfigChannel+0x7a>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001a24:	4b1f      	ldr	r3, [pc, #124]	@ (8001aa4 <HAL_ADC_ConfigChannel+0x174>)
 8001a26:	4a20      	ldr	r2, [pc, #128]	@ (8001aa8 <HAL_ADC_ConfigChannel+0x178>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2e:	0c9b      	lsrs	r3, r3, #18
 8001a30:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8001a38:	9b01      	ldr	r3, [sp, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d0b5      	beq.n	80019aa <HAL_ADC_ConfigChannel+0x7a>
        counter--;
 8001a3e:	9b01      	ldr	r3, [sp, #4]
 8001a40:	3b01      	subs	r3, #1
 8001a42:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8001a44:	9b01      	ldr	r3, [sp, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d1f9      	bne.n	8001a3e <HAL_ADC_ConfigChannel+0x10e>
 8001a4a:	e7ae      	b.n	80019aa <HAL_ADC_ConfigChannel+0x7a>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a4c:	3941      	subs	r1, #65	@ 0x41
 8001a4e:	241f      	movs	r4, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a50:	408a      	lsls	r2, r1
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a52:	408c      	lsls	r4, r1
 8001a54:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a56:	ea21 0104 	bic.w	r1, r1, r4
 8001a5a:	62d9      	str	r1, [r3, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a5c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001a62:	e79f      	b.n	80019a4 <HAL_ADC_ConfigChannel+0x74>
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001a64:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa0 <HAL_ADC_ConfigChannel+0x170>)
 8001a66:	685a      	ldr	r2, [r3, #4]
 8001a68:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 8001a6c:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_VBATE;
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8001a74:	605a      	str	r2, [r3, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a76:	e798      	b.n	80019aa <HAL_ADC_ConfigChannel+0x7a>
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001a78:	f8d2 3304 	ldr.w	r3, [r2, #772]	@ 0x304
 8001a7c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001a80:	f8c2 3304 	str.w	r3, [r2, #772]	@ 0x304
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a84:	e791      	b.n	80019aa <HAL_ADC_ConfigChannel+0x7a>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001a86:	68dd      	ldr	r5, [r3, #12]
 8001a88:	ea45 6404 	orr.w	r4, r5, r4, lsl #24
 8001a8c:	60dc      	str	r4, [r3, #12]
 8001a8e:	e779      	b.n	8001984 <HAL_ADC_ConfigChannel+0x54>
  __HAL_LOCK(hadc);
 8001a90:	2002      	movs	r0, #2
}
 8001a92:	b002      	add	sp, #8
 8001a94:	bd70      	pop	{r4, r5, r6, pc}
 8001a96:	bf00      	nop
 8001a98:	10000012 	.word	0x10000012
 8001a9c:	40012000 	.word	0x40012000
 8001aa0:	40012300 	.word	0x40012300
 8001aa4:	200000d0 	.word	0x200000d0
 8001aa8:	431bde83 	.word	0x431bde83

08001aac <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aac:	4906      	ldr	r1, [pc, #24]	@ (8001ac8 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aae:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ab2:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8001ab4:	4b05      	ldr	r3, [pc, #20]	@ (8001acc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ab6:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ab8:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001abc:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ac0:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8001ac2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001ac4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001ac6:	4770      	bx	lr
 8001ac8:	e000ed00 	.word	0xe000ed00
 8001acc:	05fa0000 	.word	0x05fa0000

08001ad0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8001b3c <HAL_NVIC_SetPriority+0x6c>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ad8:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ada:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ade:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ae2:	f1be 0f04 	cmp.w	lr, #4
 8001ae6:	bf28      	it	cs
 8001ae8:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aec:	f1bc 0f06 	cmp.w	ip, #6
 8001af0:	d91a      	bls.n	8001b28 <HAL_NVIC_SetPriority+0x58>
 8001af2:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001af6:	f04f 33ff 	mov.w	r3, #4294967295
 8001afa:	fa03 f30c 	lsl.w	r3, r3, ip
 8001afe:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b02:	f04f 33ff 	mov.w	r3, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8001b06:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b08:	fa03 f30e 	lsl.w	r3, r3, lr
 8001b0c:	ea21 0303 	bic.w	r3, r1, r3
 8001b10:	fa03 f30c 	lsl.w	r3, r3, ip
 8001b14:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b18:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001b1c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8001b1e:	db06      	blt.n	8001b2e <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b20:	4a07      	ldr	r2, [pc, #28]	@ (8001b40 <HAL_NVIC_SetPriority+0x70>)
 8001b22:	5413      	strb	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001b24:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b28:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b2a:	4694      	mov	ip, r2
 8001b2c:	e7e9      	b.n	8001b02 <HAL_NVIC_SetPriority+0x32>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2e:	f000 000f 	and.w	r0, r0, #15
 8001b32:	4a04      	ldr	r2, [pc, #16]	@ (8001b44 <HAL_NVIC_SetPriority+0x74>)
 8001b34:	5413      	strb	r3, [r2, r0]
 8001b36:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b3a:	bf00      	nop
 8001b3c:	e000ed00 	.word	0xe000ed00
 8001b40:	e000e400 	.word	0xe000e400
 8001b44:	e000ed14 	.word	0xe000ed14

08001b48 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001b48:	2800      	cmp	r0, #0
 8001b4a:	db07      	blt.n	8001b5c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b4c:	f000 011f 	and.w	r1, r0, #31
 8001b50:	2301      	movs	r3, #1
 8001b52:	0940      	lsrs	r0, r0, #5
 8001b54:	4a02      	ldr	r2, [pc, #8]	@ (8001b60 <HAL_NVIC_EnableIRQ+0x18>)
 8001b56:	408b      	lsls	r3, r1
 8001b58:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	e000e100 	.word	0xe000e100

08001b64 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b64:	1e43      	subs	r3, r0, #1
 8001b66:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b6a:	d301      	bcc.n	8001b70 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b6c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001b6e:	4770      	bx	lr
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b70:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b74:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b76:	4905      	ldr	r1, [pc, #20]	@ (8001b8c <HAL_SYSTICK_Config+0x28>)
 8001b78:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b7c:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b7e:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b80:	f881 c023 	strb.w	ip, [r1, #35]	@ 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b84:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b86:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b90:	b538      	push	{r3, r4, r5, lr}
 8001b92:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8001b94:	f7ff fd16 	bl	80015c4 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b98:	2c00      	cmp	r4, #0
 8001b9a:	d074      	beq.n	8001c86 <HAL_DMA_Init+0xf6>
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b9c:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 8001b9e:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ba0:	2102      	movs	r1, #2
 8001ba2:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 8001ba4:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ba8:	f884 1035 	strb.w	r1, [r4, #53]	@ 0x35
  __HAL_DMA_DISABLE(hdma);
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	f022 0201 	bic.w	r2, r2, #1
 8001bb2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bb4:	e005      	b.n	8001bc2 <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bb6:	f7ff fd05 	bl	80015c4 <HAL_GetTick>
 8001bba:	1b43      	subs	r3, r0, r5
 8001bbc:	2b05      	cmp	r3, #5
 8001bbe:	d83e      	bhi.n	8001c3e <HAL_DMA_Init+0xae>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bc0:	6823      	ldr	r3, [r4, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	07d1      	lsls	r1, r2, #31
 8001bc6:	d4f6      	bmi.n	8001bb6 <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bc8:	e9d4 2501 	ldrd	r2, r5, [r4, #4]
 8001bcc:	68e1      	ldr	r1, [r4, #12]
 8001bce:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bd0:	69a0      	ldr	r0, [r4, #24]
  tmp = hdma->Instance->CR;
 8001bd2:	681d      	ldr	r5, [r3, #0]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bd4:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bd6:	6921      	ldr	r1, [r4, #16]
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	6961      	ldr	r1, [r4, #20]
 8001bdc:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bde:	69e1      	ldr	r1, [r4, #28]
 8001be0:	4302      	orrs	r2, r0
 8001be2:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001be4:	4934      	ldr	r1, [pc, #208]	@ (8001cb8 <HAL_DMA_Init+0x128>)
 8001be6:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8001be8:	6a25      	ldr	r5, [r4, #32]
 8001bea:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bec:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bee:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001bf0:	2904      	cmp	r1, #4
 8001bf2:	d02b      	beq.n	8001c4c <HAL_DMA_Init+0xbc>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001bf4:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001bf6:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001bf8:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001bfc:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001bfe:	b2da      	uxtb	r2, r3
  hdma->Instance->FCR = tmp;
 8001c00:	6159      	str	r1, [r3, #20]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c02:	482e      	ldr	r0, [pc, #184]	@ (8001cbc <HAL_DMA_Init+0x12c>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c04:	f1a2 0110 	sub.w	r1, r2, #16
 8001c08:	4a2d      	ldr	r2, [pc, #180]	@ (8001cc0 <HAL_DMA_Init+0x130>)
 8001c0a:	fba2 5201 	umull	r5, r2, r2, r1
  
  if (stream_number > 3U)
 8001c0e:	295f      	cmp	r1, #95	@ 0x5f
  hdma->State = HAL_DMA_STATE_READY;
 8001c10:	f04f 0501 	mov.w	r5, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c14:	f04f 0100 	mov.w	r1, #0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c18:	ea4f 1212 	mov.w	r2, r2, lsr #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c1c:	5c80      	ldrb	r0, [r0, r2]
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c1e:	4a29      	ldr	r2, [pc, #164]	@ (8001cc4 <HAL_DMA_Init+0x134>)
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c20:	65e0      	str	r0, [r4, #92]	@ 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c22:	ea02 0203 	and.w	r2, r2, r3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c26:	f04f 033f 	mov.w	r3, #63	@ 0x3f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c2a:	bf88      	it	hi
 8001c2c:	3204      	addhi	r2, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c2e:	4083      	lsls	r3, r0
  return HAL_OK;
 8001c30:	4608      	mov	r0, r1
 8001c32:	65a2      	str	r2, [r4, #88]	@ 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c34:	6093      	str	r3, [r2, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c36:	6561      	str	r1, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001c38:	f884 5035 	strb.w	r5, [r4, #53]	@ 0x35
}
 8001c3c:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c40:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 8001c42:	4618      	mov	r0, r3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c44:	6562      	str	r2, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c46:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
}
 8001c4a:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c4c:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	@ 0x2c
 8001c50:	4329      	orrs	r1, r5
 8001c52:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 8001c54:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
  hdma->Instance->CR = tmp;  
 8001c56:	6019      	str	r1, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001c58:	6959      	ldr	r1, [r3, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c5a:	f021 0107 	bic.w	r1, r1, #7
 8001c5e:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 8001c60:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c64:	2d00      	cmp	r5, #0
 8001c66:	d0ca      	beq.n	8001bfe <HAL_DMA_Init+0x6e>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c68:	b178      	cbz	r0, 8001c8a <HAL_DMA_Init+0xfa>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c6a:	f5b0 5f00 	cmp.w	r0, #8192	@ 0x2000
 8001c6e:	d016      	beq.n	8001c9e <HAL_DMA_Init+0x10e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c70:	2a02      	cmp	r2, #2
 8001c72:	d903      	bls.n	8001c7c <HAL_DMA_Init+0xec>
 8001c74:	2a03      	cmp	r2, #3
 8001c76:	d1c2      	bne.n	8001bfe <HAL_DMA_Init+0x6e>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c78:	01ea      	lsls	r2, r5, #7
 8001c7a:	d5c0      	bpl.n	8001bfe <HAL_DMA_Init+0x6e>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c7c:	2240      	movs	r2, #64	@ 0x40
        hdma->State = HAL_DMA_STATE_READY;
 8001c7e:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c80:	6562      	str	r2, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001c82:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 8001c86:	2001      	movs	r0, #1
}
 8001c88:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 8001c8a:	2a01      	cmp	r2, #1
 8001c8c:	d003      	beq.n	8001c96 <HAL_DMA_Init+0x106>
 8001c8e:	f032 0202 	bics.w	r2, r2, #2
 8001c92:	d1b4      	bne.n	8001bfe <HAL_DMA_Init+0x6e>
 8001c94:	e7f0      	b.n	8001c78 <HAL_DMA_Init+0xe8>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c96:	f1b5 7fc0 	cmp.w	r5, #25165824	@ 0x1800000
 8001c9a:	d1b0      	bne.n	8001bfe <HAL_DMA_Init+0x6e>
 8001c9c:	e7ee      	b.n	8001c7c <HAL_DMA_Init+0xec>
    switch (tmp)
 8001c9e:	2a03      	cmp	r2, #3
 8001ca0:	d8ad      	bhi.n	8001bfe <HAL_DMA_Init+0x6e>
 8001ca2:	a001      	add	r0, pc, #4	@ (adr r0, 8001ca8 <HAL_DMA_Init+0x118>)
 8001ca4:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8001ca8:	08001c7d 	.word	0x08001c7d
 8001cac:	08001c79 	.word	0x08001c79
 8001cb0:	08001c7d 	.word	0x08001c7d
 8001cb4:	08001c97 	.word	0x08001c97
 8001cb8:	e010803f 	.word	0xe010803f
 8001cbc:	08003f2c 	.word	0x08003f2c
 8001cc0:	aaaaaaab 	.word	0xaaaaaaab
 8001cc4:	fffffc00 	.word	0xfffffc00

08001cc8 <HAL_DMA_Start_IT>:
{
 8001cc8:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma);
 8001cca:	f890 c034 	ldrb.w	ip, [r0, #52]	@ 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cce:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 8001cd0:	f1bc 0f01 	cmp.w	ip, #1
 8001cd4:	d009      	beq.n	8001cea <HAL_DMA_Start_IT+0x22>
 8001cd6:	2401      	movs	r4, #1
 8001cd8:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001cdc:	f890 4035 	ldrb.w	r4, [r0, #53]	@ 0x35
 8001ce0:	2c01      	cmp	r4, #1
 8001ce2:	d005      	beq.n	8001cf0 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
  __HAL_LOCK(hdma);
 8001cea:	2002      	movs	r0, #2
}
 8001cec:	bc70      	pop	{r4, r5, r6}
 8001cee:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cf0:	2502      	movs	r5, #2
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001cf2:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cf4:	f880 5035 	strb.w	r5, [r0, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cf8:	2500      	movs	r5, #0
 8001cfa:	6545      	str	r5, [r0, #84]	@ 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001cfc:	6825      	ldr	r5, [r4, #0]
 8001cfe:	f425 2580 	bic.w	r5, r5, #262144	@ 0x40000
 8001d02:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8001d04:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d06:	6883      	ldr	r3, [r0, #8]
 8001d08:	2b40      	cmp	r3, #64	@ 0x40
 8001d0a:	d01a      	beq.n	8001d42 <HAL_DMA_Start_IT+0x7a>
    hdma->Instance->PAR = SrcAddress;
 8001d0c:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8001d0e:	60e2      	str	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d10:	6dc1      	ldr	r1, [r0, #92]	@ 0x5c
 8001d12:	233f      	movs	r3, #63	@ 0x3f
    if(hdma->XferHalfCpltCallback != NULL)
 8001d14:	6c02      	ldr	r2, [r0, #64]	@ 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d16:	408b      	lsls	r3, r1
 8001d18:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d1a:	6823      	ldr	r3, [r4, #0]
 8001d1c:	f043 0316 	orr.w	r3, r3, #22
 8001d20:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001d22:	6963      	ldr	r3, [r4, #20]
 8001d24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d28:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8001d2a:	b11a      	cbz	r2, 8001d34 <HAL_DMA_Start_IT+0x6c>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d2c:	6823      	ldr	r3, [r4, #0]
 8001d2e:	f043 0308 	orr.w	r3, r3, #8
 8001d32:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001d34:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d36:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	6023      	str	r3, [r4, #0]
}
 8001d3e:	bc70      	pop	{r4, r5, r6}
 8001d40:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8001d42:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 8001d44:	60e1      	str	r1, [r4, #12]
 8001d46:	e7e3      	b.n	8001d10 <HAL_DMA_Start_IT+0x48>

08001d48 <HAL_DMA_IRQHandler>:
{
 8001d48:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 8001d4a:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600;
 8001d4c:	4b66      	ldr	r3, [pc, #408]	@ (8001ee8 <HAL_DMA_IRQHandler+0x1a0>)
{
 8001d4e:	b083      	sub	sp, #12
 8001d50:	4604      	mov	r4, r0
  uint32_t timeout = SystemCoreClock / 9600;
 8001d52:	681e      	ldr	r6, [r3, #0]
  __IO uint32_t count = 0;
 8001d54:	9201      	str	r2, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d56:	2208      	movs	r2, #8
 8001d58:	e9d0 7316 	ldrd	r7, r3, [r0, #88]	@ 0x58
  tmpisr = regs->ISR;
 8001d5c:	683d      	ldr	r5, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d5e:	409a      	lsls	r2, r3
 8001d60:	422a      	tst	r2, r5
 8001d62:	d004      	beq.n	8001d6e <HAL_DMA_IRQHandler+0x26>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d64:	6801      	ldr	r1, [r0, #0]
 8001d66:	6808      	ldr	r0, [r1, #0]
 8001d68:	0740      	lsls	r0, r0, #29
 8001d6a:	f100 8097 	bmi.w	8001e9c <HAL_DMA_IRQHandler+0x154>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d6e:	2201      	movs	r2, #1
 8001d70:	409a      	lsls	r2, r3
 8001d72:	422a      	tst	r2, r5
 8001d74:	d004      	beq.n	8001d80 <HAL_DMA_IRQHandler+0x38>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d76:	6821      	ldr	r1, [r4, #0]
 8001d78:	6949      	ldr	r1, [r1, #20]
 8001d7a:	0608      	lsls	r0, r1, #24
 8001d7c:	f100 8088 	bmi.w	8001e90 <HAL_DMA_IRQHandler+0x148>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d80:	2204      	movs	r2, #4
 8001d82:	409a      	lsls	r2, r3
 8001d84:	422a      	tst	r2, r5
 8001d86:	d003      	beq.n	8001d90 <HAL_DMA_IRQHandler+0x48>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d88:	6821      	ldr	r1, [r4, #0]
 8001d8a:	6809      	ldr	r1, [r1, #0]
 8001d8c:	0789      	lsls	r1, r1, #30
 8001d8e:	d479      	bmi.n	8001e84 <HAL_DMA_IRQHandler+0x13c>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d90:	2210      	movs	r2, #16
 8001d92:	409a      	lsls	r2, r3
 8001d94:	422a      	tst	r2, r5
 8001d96:	d003      	beq.n	8001da0 <HAL_DMA_IRQHandler+0x58>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d98:	6821      	ldr	r1, [r4, #0]
 8001d9a:	6808      	ldr	r0, [r1, #0]
 8001d9c:	0700      	lsls	r0, r0, #28
 8001d9e:	d45e      	bmi.n	8001e5e <HAL_DMA_IRQHandler+0x116>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001da0:	2220      	movs	r2, #32
 8001da2:	409a      	lsls	r2, r3
 8001da4:	422a      	tst	r2, r5
 8001da6:	d014      	beq.n	8001dd2 <HAL_DMA_IRQHandler+0x8a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001da8:	6821      	ldr	r1, [r4, #0]
 8001daa:	6808      	ldr	r0, [r1, #0]
 8001dac:	06c0      	lsls	r0, r0, #27
 8001dae:	d510      	bpl.n	8001dd2 <HAL_DMA_IRQHandler+0x8a>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001db0:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001db2:	f894 2035 	ldrb.w	r2, [r4, #53]	@ 0x35
 8001db6:	2a05      	cmp	r2, #5
 8001db8:	d033      	beq.n	8001e22 <HAL_DMA_IRQHandler+0xda>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dba:	680b      	ldr	r3, [r1, #0]
 8001dbc:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001dc0:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dc2:	d07b      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x174>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001dc4:	0319      	lsls	r1, r3, #12
 8001dc6:	f140 8086 	bpl.w	8001ed6 <HAL_DMA_IRQHandler+0x18e>
        if(hdma->XferCpltCallback != NULL)
 8001dca:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001dcc:	b10b      	cbz	r3, 8001dd2 <HAL_DMA_IRQHandler+0x8a>
          hdma->XferCpltCallback(hdma);
 8001dce:	4620      	mov	r0, r4
 8001dd0:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001dd2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d040      	beq.n	8001e5a <HAL_DMA_IRQHandler+0x112>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001dd8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001dda:	07da      	lsls	r2, r3, #31
 8001ddc:	d51a      	bpl.n	8001e14 <HAL_DMA_IRQHandler+0xcc>
      __HAL_DMA_DISABLE(hdma);
 8001dde:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8001de0:	2105      	movs	r1, #5
  uint32_t timeout = SystemCoreClock / 9600;
 8001de2:	4b42      	ldr	r3, [pc, #264]	@ (8001eec <HAL_DMA_IRQHandler+0x1a4>)
      hdma->State = HAL_DMA_STATE_ABORT;
 8001de4:	f884 1035 	strb.w	r1, [r4, #53]	@ 0x35
  uint32_t timeout = SystemCoreClock / 9600;
 8001de8:	fba3 3606 	umull	r3, r6, r3, r6
      __HAL_DMA_DISABLE(hdma);
 8001dec:	6813      	ldr	r3, [r2, #0]
 8001dee:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600;
 8001df2:	0ab6      	lsrs	r6, r6, #10
      __HAL_DMA_DISABLE(hdma);
 8001df4:	6013      	str	r3, [r2, #0]
 8001df6:	e002      	b.n	8001dfe <HAL_DMA_IRQHandler+0xb6>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001df8:	6813      	ldr	r3, [r2, #0]
 8001dfa:	07db      	lsls	r3, r3, #31
 8001dfc:	d504      	bpl.n	8001e08 <HAL_DMA_IRQHandler+0xc0>
        if (++count > timeout)
 8001dfe:	9b01      	ldr	r3, [sp, #4]
 8001e00:	3301      	adds	r3, #1
 8001e02:	42b3      	cmp	r3, r6
 8001e04:	9301      	str	r3, [sp, #4]
 8001e06:	d9f7      	bls.n	8001df8 <HAL_DMA_IRQHandler+0xb0>
      hdma->State = HAL_DMA_STATE_READY;
 8001e08:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 8001e0a:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 8001e0c:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8001e10:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 8001e14:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001e16:	b303      	cbz	r3, 8001e5a <HAL_DMA_IRQHandler+0x112>
      hdma->XferErrorCallback(hdma);
 8001e18:	4620      	mov	r0, r4
}
 8001e1a:	b003      	add	sp, #12
 8001e1c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8001e20:	4718      	bx	r3
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e22:	680a      	ldr	r2, [r1, #0]
 8001e24:	f022 0216 	bic.w	r2, r2, #22
 8001e28:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e2a:	694a      	ldr	r2, [r1, #20]
 8001e2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e30:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e32:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001e34:	2a00      	cmp	r2, #0
 8001e36:	d053      	beq.n	8001ee0 <HAL_DMA_IRQHandler+0x198>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e38:	680a      	ldr	r2, [r1, #0]
 8001e3a:	f022 0208 	bic.w	r2, r2, #8
 8001e3e:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e40:	223f      	movs	r2, #63	@ 0x3f
        hdma->State = HAL_DMA_STATE_READY;
 8001e42:	2101      	movs	r1, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
        __HAL_UNLOCK(hdma);
 8001e48:	2200      	movs	r2, #0
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e4a:	60bb      	str	r3, [r7, #8]
        if(hdma->XferAbortCallback != NULL)
 8001e4c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
        hdma->State = HAL_DMA_STATE_READY;
 8001e4e:	f884 1035 	strb.w	r1, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8001e52:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1de      	bne.n	8001e18 <HAL_DMA_IRQHandler+0xd0>
}
 8001e5a:	b003      	add	sp, #12
 8001e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e5e:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e60:	680a      	ldr	r2, [r1, #0]
 8001e62:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e66:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e68:	d122      	bne.n	8001eb0 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e6a:	05d2      	lsls	r2, r2, #23
 8001e6c:	d403      	bmi.n	8001e76 <HAL_DMA_IRQHandler+0x12e>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e6e:	680a      	ldr	r2, [r1, #0]
 8001e70:	f022 0208 	bic.w	r2, r2, #8
 8001e74:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8001e76:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001e78:	2a00      	cmp	r2, #0
 8001e7a:	d091      	beq.n	8001da0 <HAL_DMA_IRQHandler+0x58>
          hdma->XferHalfCpltCallback(hdma);
 8001e7c:	4620      	mov	r0, r4
 8001e7e:	4790      	blx	r2
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e80:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001e82:	e78d      	b.n	8001da0 <HAL_DMA_IRQHandler+0x58>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e84:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e86:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001e88:	f042 0204 	orr.w	r2, r2, #4
 8001e8c:	6562      	str	r2, [r4, #84]	@ 0x54
 8001e8e:	e77f      	b.n	8001d90 <HAL_DMA_IRQHandler+0x48>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e90:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e92:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001e94:	f042 0202 	orr.w	r2, r2, #2
 8001e98:	6562      	str	r2, [r4, #84]	@ 0x54
 8001e9a:	e771      	b.n	8001d80 <HAL_DMA_IRQHandler+0x38>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e9c:	6808      	ldr	r0, [r1, #0]
 8001e9e:	f020 0004 	bic.w	r0, r0, #4
 8001ea2:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ea4:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ea6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001ea8:	f042 0201 	orr.w	r2, r2, #1
 8001eac:	6562      	str	r2, [r4, #84]	@ 0x54
 8001eae:	e75e      	b.n	8001d6e <HAL_DMA_IRQHandler+0x26>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001eb0:	0311      	lsls	r1, r2, #12
 8001eb2:	d5e0      	bpl.n	8001e76 <HAL_DMA_IRQHandler+0x12e>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001eb4:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8001eb6:	2a00      	cmp	r2, #0
 8001eb8:	d1e0      	bne.n	8001e7c <HAL_DMA_IRQHandler+0x134>
 8001eba:	e771      	b.n	8001da0 <HAL_DMA_IRQHandler+0x58>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ebc:	f413 7380 	ands.w	r3, r3, #256	@ 0x100
 8001ec0:	d183      	bne.n	8001dca <HAL_DMA_IRQHandler+0x82>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ec2:	680a      	ldr	r2, [r1, #0]
 8001ec4:	f022 0210 	bic.w	r2, r2, #16
 8001ec8:	600a      	str	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001eca:	2201      	movs	r2, #1
          __HAL_UNLOCK(hdma);
 8001ecc:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8001ed0:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8001ed4:	e779      	b.n	8001dca <HAL_DMA_IRQHandler+0x82>
          if(hdma->XferM1CpltCallback != NULL)
 8001ed6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	f47f af78 	bne.w	8001dce <HAL_DMA_IRQHandler+0x86>
 8001ede:	e778      	b.n	8001dd2 <HAL_DMA_IRQHandler+0x8a>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ee0:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8001ee2:	2a00      	cmp	r2, #0
 8001ee4:	d1a8      	bne.n	8001e38 <HAL_DMA_IRQHandler+0xf0>
 8001ee6:	e7ab      	b.n	8001e40 <HAL_DMA_IRQHandler+0xf8>
 8001ee8:	200000d0 	.word	0x200000d0
 8001eec:	1b4e81b5 	.word	0x1b4e81b5

08001ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ef4:	2300      	movs	r3, #0
{
 8001ef6:	b085      	sub	sp, #20
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ef8:	f04f 0b01 	mov.w	fp, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001efc:	680c      	ldr	r4, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001efe:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8002144 <HAL_GPIO_Init+0x254>

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f02:	4689      	mov	r9, r1
 8001f04:	e003      	b.n	8001f0e <HAL_GPIO_Init+0x1e>
  for(position = 0; position < GPIO_NUMBER; position++)
 8001f06:	3301      	adds	r3, #1
 8001f08:	2b10      	cmp	r3, #16
 8001f0a:	f000 809b 	beq.w	8002044 <HAL_GPIO_Init+0x154>
    ioposition = ((uint32_t)0x01) << position;
 8001f0e:	fa0b f203 	lsl.w	r2, fp, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f12:	ea02 0804 	and.w	r8, r2, r4
    if(iocurrent == ioposition)
 8001f16:	43a2      	bics	r2, r4
 8001f18:	d1f5      	bne.n	8001f06 <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f1a:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8001f1e:	ea4f 0c43 	mov.w	ip, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001f22:	2503      	movs	r5, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f24:	f001 0203 	and.w	r2, r1, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001f28:	fa05 f50c 	lsl.w	r5, r5, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f2c:	1e57      	subs	r7, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001f2e:	43ed      	mvns	r5, r5
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f30:	2f01      	cmp	r7, #1
 8001f32:	f240 808a 	bls.w	800204a <HAL_GPIO_Init+0x15a>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f36:	2a03      	cmp	r2, #3
 8001f38:	f040 80c3 	bne.w	80020c2 <HAL_GPIO_Init+0x1d2>
      temp = GPIOx->MODER;
 8001f3c:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f3e:	fa02 f20c 	lsl.w	r2, r2, ip
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f42:	f411 3f40 	tst.w	r1, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001f46:	ea05 0507 	and.w	r5, r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f4a:	ea42 0205 	orr.w	r2, r2, r5
      GPIOx->MODER = temp;
 8001f4e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f50:	d0d9      	beq.n	8001f06 <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f52:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 8001f56:	f023 0503 	bic.w	r5, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001f5a:	f003 0703 	and.w	r7, r3, #3
 8001f5e:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f60:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001f64:	f105 4580 	add.w	r5, r5, #1073741824	@ 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001f68:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f6a:	f8ca 2044 	str.w	r2, [sl, #68]	@ 0x44
 8001f6e:	f505 359c 	add.w	r5, r5, #79872	@ 0x13800
 8001f72:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001f76:	fa06 fc07 	lsl.w	ip, r6, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f7a:	4e6f      	ldr	r6, [pc, #444]	@ (8002138 <HAL_GPIO_Init+0x248>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f7c:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f80:	42b0      	cmp	r0, r6
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f82:	9203      	str	r2, [sp, #12]
 8001f84:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8001f86:	68aa      	ldr	r2, [r5, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001f88:	ea22 020c 	bic.w	r2, r2, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f8c:	d031      	beq.n	8001ff2 <HAL_GPIO_Init+0x102>
 8001f8e:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8001f92:	42b0      	cmp	r0, r6
 8001f94:	f000 80a0 	beq.w	80020d8 <HAL_GPIO_Init+0x1e8>
 8001f98:	4e68      	ldr	r6, [pc, #416]	@ (800213c <HAL_GPIO_Init+0x24c>)
 8001f9a:	42b0      	cmp	r0, r6
 8001f9c:	f000 80a2 	beq.w	80020e4 <HAL_GPIO_Init+0x1f4>
 8001fa0:	f8df c1a4 	ldr.w	ip, [pc, #420]	@ 8002148 <HAL_GPIO_Init+0x258>
 8001fa4:	4560      	cmp	r0, ip
 8001fa6:	f000 80a3 	beq.w	80020f0 <HAL_GPIO_Init+0x200>
 8001faa:	f8df c1a0 	ldr.w	ip, [pc, #416]	@ 800214c <HAL_GPIO_Init+0x25c>
 8001fae:	4560      	cmp	r0, ip
 8001fb0:	f000 80a4 	beq.w	80020fc <HAL_GPIO_Init+0x20c>
 8001fb4:	f8df c198 	ldr.w	ip, [pc, #408]	@ 8002150 <HAL_GPIO_Init+0x260>
 8001fb8:	4560      	cmp	r0, ip
 8001fba:	f000 80ab 	beq.w	8002114 <HAL_GPIO_Init+0x224>
 8001fbe:	f8df c194 	ldr.w	ip, [pc, #404]	@ 8002154 <HAL_GPIO_Init+0x264>
 8001fc2:	4560      	cmp	r0, ip
 8001fc4:	f000 80ac 	beq.w	8002120 <HAL_GPIO_Init+0x230>
 8001fc8:	f8df c18c 	ldr.w	ip, [pc, #396]	@ 8002158 <HAL_GPIO_Init+0x268>
 8001fcc:	4560      	cmp	r0, ip
 8001fce:	f000 809b 	beq.w	8002108 <HAL_GPIO_Init+0x218>
 8001fd2:	f8df c188 	ldr.w	ip, [pc, #392]	@ 800215c <HAL_GPIO_Init+0x26c>
 8001fd6:	4560      	cmp	r0, ip
 8001fd8:	f000 80a8 	beq.w	800212c <HAL_GPIO_Init+0x23c>
 8001fdc:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8002160 <HAL_GPIO_Init+0x270>
 8001fe0:	4560      	cmp	r0, ip
 8001fe2:	bf0c      	ite	eq
 8001fe4:	f04f 0c09 	moveq.w	ip, #9
 8001fe8:	f04f 0c0a 	movne.w	ip, #10
 8001fec:	fa0c f707 	lsl.w	r7, ip, r7
 8001ff0:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8001ff2:	60aa      	str	r2, [r5, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ff4:	02ce      	lsls	r6, r1, #11
        temp = EXTI->RTSR;
 8001ff6:	4a52      	ldr	r2, [pc, #328]	@ (8002140 <HAL_GPIO_Init+0x250>)
        temp &= ~((uint32_t)iocurrent);
 8001ff8:	ea6f 0508 	mvn.w	r5, r8
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8001ffc:	4e50      	ldr	r6, [pc, #320]	@ (8002140 <HAL_GPIO_Init+0x250>)
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ffe:	f103 0301 	add.w	r3, r3, #1
        temp = EXTI->RTSR;
 8002002:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8002004:	bf54      	ite	pl
 8002006:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8002008:	ea48 0202 	orrmi.w	r2, r8, r2

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800200c:	028f      	lsls	r7, r1, #10
        EXTI->RTSR = temp;
 800200e:	60b2      	str	r2, [r6, #8]
        temp = EXTI->FTSR;
 8002010:	68f2      	ldr	r2, [r6, #12]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8002012:	4e4b      	ldr	r6, [pc, #300]	@ (8002140 <HAL_GPIO_Init+0x250>)
        temp &= ~((uint32_t)iocurrent);
 8002014:	bf54      	ite	pl
 8002016:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8002018:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR = temp;
 800201c:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR;
 800201e:	6872      	ldr	r2, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002020:	038e      	lsls	r6, r1, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8002022:	4e47      	ldr	r6, [pc, #284]	@ (8002140 <HAL_GPIO_Init+0x250>)
        temp &= ~((uint32_t)iocurrent);
 8002024:	bf54      	ite	pl
 8002026:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8002028:	ea48 0202 	orrmi.w	r2, r8, r2

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800202c:	03c9      	lsls	r1, r1, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 800202e:	4944      	ldr	r1, [pc, #272]	@ (8002140 <HAL_GPIO_Init+0x250>)
        EXTI->EMR = temp;
 8002030:	6072      	str	r2, [r6, #4]
        temp = EXTI->IMR;
 8002032:	6832      	ldr	r2, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
 8002034:	bf54      	ite	pl
 8002036:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8002038:	ea48 0202 	orrmi.w	r2, r8, r2
  for(position = 0; position < GPIO_NUMBER; position++)
 800203c:	2b10      	cmp	r3, #16
        EXTI->IMR = temp;
 800203e:	600a      	str	r2, [r1, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002040:	f47f af65 	bne.w	8001f0e <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 8002044:	b005      	add	sp, #20
 8002046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 800204a:	6887      	ldr	r7, [r0, #8]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800204c:	2a02      	cmp	r2, #2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800204e:	ea07 0e05 	and.w	lr, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8002052:	f8d9 700c 	ldr.w	r7, [r9, #12]
 8002056:	fa07 f70c 	lsl.w	r7, r7, ip
 800205a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 800205e:	6087      	str	r7, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002060:	f3c1 1700 	ubfx	r7, r1, #4, #1
        temp = GPIOx->OTYPER;
 8002064:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002068:	fa07 f703 	lsl.w	r7, r7, r3
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800206c:	ea2e 0e08 	bic.w	lr, lr, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002070:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8002074:	6047      	str	r7, [r0, #4]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002076:	f8d9 7008 	ldr.w	r7, [r9, #8]
        temp = GPIOx->PUPDR;
 800207a:	f8d0 e00c 	ldr.w	lr, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800207e:	fa07 f70c 	lsl.w	r7, r7, ip
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002082:	ea0e 0e05 	and.w	lr, lr, r5
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002086:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 800208a:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800208c:	f47f af56 	bne.w	8001f3c <HAL_GPIO_Init+0x4c>
        temp = GPIOx->AFR[position >> 3];
 8002090:	08df      	lsrs	r7, r3, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002092:	f003 0e07 	and.w	lr, r3, #7
 8002096:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800209a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp = GPIOx->AFR[position >> 3];
 800209e:	6a3e      	ldr	r6, [r7, #32]
 80020a0:	9701      	str	r7, [sp, #4]
 80020a2:	9600      	str	r6, [sp, #0]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80020a4:	260f      	movs	r6, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80020a6:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80020aa:	fa07 f70e 	lsl.w	r7, r7, lr
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80020ae:	fa06 fe0e 	lsl.w	lr, r6, lr
 80020b2:	9e00      	ldr	r6, [sp, #0]
 80020b4:	ea26 0e0e 	bic.w	lr, r6, lr
        GPIOx->AFR[position >> 3] = temp;
 80020b8:	9e01      	ldr	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80020ba:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3] = temp;
 80020be:	6237      	str	r7, [r6, #32]
 80020c0:	e73c      	b.n	8001f3c <HAL_GPIO_Init+0x4c>
        temp = GPIOx->PUPDR;
 80020c2:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80020c4:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80020c8:	f8d9 7008 	ldr.w	r7, [r9, #8]
 80020cc:	fa07 f70c 	lsl.w	r7, r7, ip
 80020d0:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 80020d4:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020d6:	e731      	b.n	8001f3c <HAL_GPIO_Init+0x4c>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80020d8:	f04f 0c01 	mov.w	ip, #1
 80020dc:	fa0c f707 	lsl.w	r7, ip, r7
 80020e0:	433a      	orrs	r2, r7
 80020e2:	e786      	b.n	8001ff2 <HAL_GPIO_Init+0x102>
 80020e4:	f04f 0c02 	mov.w	ip, #2
 80020e8:	fa0c f707 	lsl.w	r7, ip, r7
 80020ec:	433a      	orrs	r2, r7
 80020ee:	e780      	b.n	8001ff2 <HAL_GPIO_Init+0x102>
 80020f0:	f04f 0c03 	mov.w	ip, #3
 80020f4:	fa0c f707 	lsl.w	r7, ip, r7
 80020f8:	433a      	orrs	r2, r7
 80020fa:	e77a      	b.n	8001ff2 <HAL_GPIO_Init+0x102>
 80020fc:	f04f 0c04 	mov.w	ip, #4
 8002100:	fa0c f707 	lsl.w	r7, ip, r7
 8002104:	433a      	orrs	r2, r7
 8002106:	e774      	b.n	8001ff2 <HAL_GPIO_Init+0x102>
 8002108:	f04f 0c07 	mov.w	ip, #7
 800210c:	fa0c f707 	lsl.w	r7, ip, r7
 8002110:	433a      	orrs	r2, r7
 8002112:	e76e      	b.n	8001ff2 <HAL_GPIO_Init+0x102>
 8002114:	f04f 0c05 	mov.w	ip, #5
 8002118:	fa0c f707 	lsl.w	r7, ip, r7
 800211c:	433a      	orrs	r2, r7
 800211e:	e768      	b.n	8001ff2 <HAL_GPIO_Init+0x102>
 8002120:	f04f 0c06 	mov.w	ip, #6
 8002124:	fa0c f707 	lsl.w	r7, ip, r7
 8002128:	433a      	orrs	r2, r7
 800212a:	e762      	b.n	8001ff2 <HAL_GPIO_Init+0x102>
 800212c:	f04f 0c08 	mov.w	ip, #8
 8002130:	fa0c f707 	lsl.w	r7, ip, r7
 8002134:	433a      	orrs	r2, r7
 8002136:	e75c      	b.n	8001ff2 <HAL_GPIO_Init+0x102>
 8002138:	40020000 	.word	0x40020000
 800213c:	40020800 	.word	0x40020800
 8002140:	40013c00 	.word	0x40013c00
 8002144:	40023800 	.word	0x40023800
 8002148:	40020c00 	.word	0x40020c00
 800214c:	40021000 	.word	0x40021000
 8002150:	40021400 	.word	0x40021400
 8002154:	40021800 	.word	0x40021800
 8002158:	40021c00 	.word	0x40021c00
 800215c:	40022000 	.word	0x40022000
 8002160:	40022400 	.word	0x40022400

08002164 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002164:	b902      	cbnz	r2, 8002168 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002166:	0409      	lsls	r1, r1, #16
 8002168:	6181      	str	r1, [r0, #24]
  }
}
 800216a:	4770      	bx	lr

0800216c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800216c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002170:	4681      	mov	r9, r0
 8002172:	460d      	mov	r5, r1
 8002174:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002176:	f8d9 3000 	ldr.w	r3, [r9]
 800217a:	699c      	ldr	r4, [r3, #24]
 800217c:	f014 0420 	ands.w	r4, r4, #32
 8002180:	f040 80c4 	bne.w	800230c <I2C_WaitOnSTOPFlagUntilTimeout+0x1a0>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t itflag   = hi2c->Instance->ISR;
 8002184:	699a      	ldr	r2, [r3, #24]
  uint32_t error_code = 0;
  uint32_t tickstart = Tickstart;
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002186:	f012 0210 	ands.w	r2, r2, #16
 800218a:	f000 8087 	beq.w	800229c <I2C_WaitOnSTOPFlagUntilTimeout+0x130>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800218e:	2210      	movs	r2, #16
  uint32_t tickstart = Tickstart;
 8002190:	46b0      	mov	r8, r6
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002192:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002194:	1c68      	adds	r0, r5, #1
 8002196:	d001      	beq.n	800219c <I2C_WaitOnSTOPFlagUntilTimeout+0x30>
 8002198:	e040      	b.n	800221c <I2C_WaitOnSTOPFlagUntilTimeout+0xb0>
 800219a:	b92c      	cbnz	r4, 80021a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>
 800219c:	699a      	ldr	r2, [r3, #24]
 800219e:	0691      	lsls	r1, r2, #26
 80021a0:	d5fb      	bpl.n	800219a <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80021a2:	b90c      	cbnz	r4, 80021a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021a4:	2220      	movs	r2, #32
 80021a6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80021a8:	6999      	ldr	r1, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80021aa:	f04f 0c06 	mov.w	ip, #6
 80021ae:	200c      	movs	r0, #12
 80021b0:	240d      	movs	r4, #13

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80021b2:	f411 7f80 	tst.w	r1, #256	@ 0x100
  HAL_StatusTypeDef status = HAL_OK;
 80021b6:	f04f 0707 	mov.w	r7, #7
 80021ba:	f04f 0e05 	mov.w	lr, #5
    error_code |= HAL_I2C_ERROR_AF;
 80021be:	f04f 0204 	mov.w	r2, #4
    status = HAL_ERROR;
 80021c2:	f04f 0801 	mov.w	r8, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80021c6:	d076      	beq.n	80022b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x14a>
  {
    error_code |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80021c8:	f44f 7280 	mov.w	r2, #256	@ 0x100

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80021cc:	0548      	lsls	r0, r1, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80021ce:	61da      	str	r2, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80021d0:	d47a      	bmi.n	80022c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x15c>

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80021d2:	058a      	lsls	r2, r1, #22
 80021d4:	f100 8098 	bmi.w	8002308 <I2C_WaitOnSTOPFlagUntilTimeout+0x19c>
 80021d8:	4670      	mov	r0, lr
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80021da:	699a      	ldr	r2, [r3, #24]
 80021dc:	0791      	lsls	r1, r2, #30
 80021de:	d501      	bpl.n	80021e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x78>
    hi2c->Instance->TXDR = 0x00U;
 80021e0:	2200      	movs	r2, #0
 80021e2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021e4:	699a      	ldr	r2, [r3, #24]
 80021e6:	07d2      	lsls	r2, r2, #31
 80021e8:	d403      	bmi.n	80021f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x86>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80021ea:	699a      	ldr	r2, [r3, #24]
 80021ec:	f042 0201 	orr.w	r2, r2, #1
 80021f0:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021f2:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
    hi2c->State = HAL_I2C_STATE_READY;
 80021f4:	2420      	movs	r4, #32
    I2C_RESET_CR2(hi2c);
 80021f6:	4d48      	ldr	r5, [pc, #288]	@ (8002318 <I2C_WaitOnSTOPFlagUntilTimeout+0x1ac>)
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021f8:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 80021fa:	402a      	ands	r2, r5
 80021fc:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 80021fe:	f8d9 3044 	ldr.w	r3, [r9, #68]	@ 0x44
 8002202:	4303      	orrs	r3, r0
 8002204:	f8c9 3044 	str.w	r3, [r9, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002208:	f889 4041 	strb.w	r4, [r9, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800220c:	f889 1042 	strb.w	r1, [r9, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002210:	2300      	movs	r3, #0
      return HAL_ERROR;
 8002212:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 8002214:	f889 3040 	strb.w	r3, [r9, #64]	@ 0x40
}
 8002218:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800221c:	699a      	ldr	r2, [r3, #24]
 800221e:	0692      	lsls	r2, r2, #26
 8002220:	d4bf      	bmi.n	80021a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x36>
 8002222:	2c00      	cmp	r4, #0
 8002224:	d1c0      	bne.n	80021a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002226:	f7ff f9cd 	bl	80015c4 <HAL_GetTick>
 800222a:	eba0 0008 	sub.w	r0, r0, r8
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800222e:	f8d9 3000 	ldr.w	r3, [r9]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002232:	4285      	cmp	r5, r0
 8002234:	d301      	bcc.n	800223a <I2C_WaitOnSTOPFlagUntilTimeout+0xce>
 8002236:	2d00      	cmp	r5, #0
 8002238:	d1f0      	bne.n	800221c <I2C_WaitOnSTOPFlagUntilTimeout+0xb0>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800223a:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 800223c:	f899 2042 	ldrb.w	r2, [r9, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002240:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 8002242:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002244:	0409      	lsls	r1, r1, #16
 8002246:	d50f      	bpl.n	8002268 <I2C_WaitOnSTOPFlagUntilTimeout+0xfc>
              (tmp1 != I2C_CR2_STOP) && \
 8002248:	0447      	lsls	r7, r0, #17
 800224a:	d40d      	bmi.n	8002268 <I2C_WaitOnSTOPFlagUntilTimeout+0xfc>
 800224c:	2a20      	cmp	r2, #32
 800224e:	d00b      	beq.n	8002268 <I2C_WaitOnSTOPFlagUntilTimeout+0xfc>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002256:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8002258:	f7ff f9b4 	bl	80015c4 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800225c:	f8d9 3000 	ldr.w	r3, [r9]
            tickstart = HAL_GetTick();
 8002260:	4680      	mov	r8, r0
 8002262:	e001      	b.n	8002268 <I2C_WaitOnSTOPFlagUntilTimeout+0xfc>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002264:	f8d9 3000 	ldr.w	r3, [r9]
 8002268:	699f      	ldr	r7, [r3, #24]
 800226a:	f017 0720 	ands.w	r7, r7, #32
 800226e:	d191      	bne.n	8002194 <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002270:	f7ff f9a8 	bl	80015c4 <HAL_GetTick>
 8002274:	eba0 0008 	sub.w	r0, r0, r8
 8002278:	2819      	cmp	r0, #25
 800227a:	d9f3      	bls.n	8002264 <I2C_WaitOnSTOPFlagUntilTimeout+0xf8>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800227c:	f8d9 3044 	ldr.w	r3, [r9, #68]	@ 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002280:	2220      	movs	r2, #32
              status = HAL_ERROR;
 8002282:	2401      	movs	r4, #1
              __HAL_UNLOCK(hi2c);
 8002284:	f889 7040 	strb.w	r7, [r9, #64]	@ 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002288:	4313      	orrs	r3, r2
 800228a:	f8c9 3044 	str.w	r3, [r9, #68]	@ 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800228e:	f889 2041 	strb.w	r2, [r9, #65]	@ 0x41
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002292:	f8d9 3000 	ldr.w	r3, [r9]
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002296:	f889 7042 	strb.w	r7, [r9, #66]	@ 0x42
              status = HAL_ERROR;
 800229a:	e7e5      	b.n	8002268 <I2C_WaitOnSTOPFlagUntilTimeout+0xfc>
  itflag = hi2c->Instance->ISR;
 800229c:	6999      	ldr	r1, [r3, #24]
 800229e:	f04f 0c02 	mov.w	ip, #2
 80022a2:	2008      	movs	r0, #8
 80022a4:	2409      	movs	r4, #9
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80022a6:	f411 7f80 	tst.w	r1, #256	@ 0x100
 80022aa:	f04f 0703 	mov.w	r7, #3
 80022ae:	f04f 0e01 	mov.w	lr, #1
  HAL_StatusTypeDef status = HAL_OK;
 80022b2:	4690      	mov	r8, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80022b4:	d188      	bne.n	80021c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x5c>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80022b6:	054f      	lsls	r7, r1, #21
 80022b8:	d407      	bmi.n	80022ca <I2C_WaitOnSTOPFlagUntilTimeout+0x15e>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80022ba:	0588      	lsls	r0, r1, #22
 80022bc:	d50d      	bpl.n	80022da <I2C_WaitOnSTOPFlagUntilTimeout+0x16e>
 80022be:	4660      	mov	r0, ip
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80022c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022c4:	61da      	str	r2, [r3, #28]
  if (status != HAL_OK)
 80022c6:	e788      	b.n	80021da <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80022c8:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80022ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80022ce:	058c      	lsls	r4, r1, #22
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80022d0:	61da      	str	r2, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80022d2:	d582      	bpl.n	80021da <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    error_code |= HAL_I2C_ERROR_ARLO;
 80022d4:	f040 0002 	orr.w	r0, r0, #2
 80022d8:	e7f2      	b.n	80022c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x154>
  if (status != HAL_OK)
 80022da:	f1b8 0f00 	cmp.w	r8, #0
 80022de:	d118      	bne.n	8002312 <I2C_WaitOnSTOPFlagUntilTimeout+0x1a6>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022e0:	f7ff f970 	bl	80015c4 <HAL_GetTick>
 80022e4:	1b80      	subs	r0, r0, r6
 80022e6:	42a8      	cmp	r0, r5
 80022e8:	d802      	bhi.n	80022f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x184>
 80022ea:	2d00      	cmp	r5, #0
 80022ec:	f47f af43 	bne.w	8002176 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022f0:	f8d9 3044 	ldr.w	r3, [r9, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80022f4:	2120      	movs	r1, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022f6:	2200      	movs	r2, #0
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022f8:	430b      	orrs	r3, r1
 80022fa:	f8c9 3044 	str.w	r3, [r9, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80022fe:	f889 1041 	strb.w	r1, [r9, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002302:	f889 2042 	strb.w	r2, [r9, #66]	@ 0x42
      return HAL_ERROR;
 8002306:	e783      	b.n	8002210 <I2C_WaitOnSTOPFlagUntilTimeout+0xa4>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002308:	4638      	mov	r0, r7
 800230a:	e7d9      	b.n	80022c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x154>
  return HAL_OK;
 800230c:	2000      	movs	r0, #0
}
 800230e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002312:	4610      	mov	r0, r2
 8002314:	e761      	b.n	80021da <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
 8002316:	bf00      	nop
 8002318:	fe00e800 	.word	0xfe00e800

0800231c <HAL_I2C_Init>:
  if (hi2c == NULL)
 800231c:	2800      	cmp	r0, #0
 800231e:	d04e      	beq.n	80023be <HAL_I2C_Init+0xa2>
{
 8002320:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002322:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002326:	4604      	mov	r4, r0
 8002328:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800232c:	2b00      	cmp	r3, #0
 800232e:	d041      	beq.n	80023b4 <HAL_I2C_Init+0x98>
  __HAL_I2C_DISABLE(hi2c);
 8002330:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002332:	2124      	movs	r1, #36	@ 0x24
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002334:	6862      	ldr	r2, [r4, #4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002336:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 800233a:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800233c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002340:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8002342:	f021 0101 	bic.w	r1, r1, #1
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002346:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
 8002348:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800234a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800234c:	689a      	ldr	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800234e:	68a1      	ldr	r1, [r4, #8]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002350:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002354:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002356:	d029      	beq.n	80023ac <HAL_I2C_Init+0x90>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002358:	f441 4104 	orr.w	r1, r1, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800235c:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800235e:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002360:	d102      	bne.n	8002368 <HAL_I2C_Init+0x4c>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002362:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002366:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002368:	6858      	ldr	r0, [r3, #4]
  hi2c->State = HAL_I2C_STATE_READY;
 800236a:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800236e:	4915      	ldr	r1, [pc, #84]	@ (80023c4 <HAL_I2C_Init+0xa8>)
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002370:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002372:	4301      	orrs	r1, r0
 8002374:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002376:	68d9      	ldr	r1, [r3, #12]
 8002378:	f421 4100 	bic.w	r1, r1, #32768	@ 0x8000
 800237c:	60d9      	str	r1, [r3, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
 800237e:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002382:	4302      	orrs	r2, r0
 8002384:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002388:	e9d4 1007 	ldrd	r1, r0, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800238c:	60da      	str	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800238e:	2200      	movs	r2, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002390:	4301      	orrs	r1, r0
  return HAL_OK;
 8002392:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002394:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002396:	6819      	ldr	r1, [r3, #0]
 8002398:	f041 0101 	orr.w	r1, r1, #1
 800239c:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800239e:	6462      	str	r2, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80023a0:	f884 c041 	strb.w	ip, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80023a4:	6322      	str	r2, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023a6:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
}
 80023aa:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80023ac:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 80023b0:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80023b2:	e7d9      	b.n	8002368 <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
 80023b4:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 80023b8:	f7fe fcbe 	bl	8000d38 <HAL_I2C_MspInit>
 80023bc:	e7b8      	b.n	8002330 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 80023be:	2001      	movs	r0, #1
}
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	02008000 	.word	0x02008000

080023c8 <HAL_I2C_Master_Transmit>:
{
 80023c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023cc:	461c      	mov	r4, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80023ce:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 80023d2:	9d08      	ldr	r5, [sp, #32]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80023d4:	2b20      	cmp	r3, #32
 80023d6:	f040 8095 	bne.w	8002504 <HAL_I2C_Master_Transmit+0x13c>
    __HAL_LOCK(hi2c);
 80023da:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80023de:	4680      	mov	r8, r0
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	f000 808f 	beq.w	8002504 <HAL_I2C_Master_Transmit+0x13c>
 80023e6:	2301      	movs	r3, #1
 80023e8:	460f      	mov	r7, r1
 80023ea:	4691      	mov	r9, r2
 80023ec:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 80023f0:	f7ff f8e8 	bl	80015c4 <HAL_GetTick>
 80023f4:	4606      	mov	r6, r0
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
 80023f6:	e005      	b.n	8002404 <HAL_I2C_Master_Transmit+0x3c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023f8:	f7ff f8e4 	bl	80015c4 <HAL_GetTick>
 80023fc:	1b83      	subs	r3, r0, r6
 80023fe:	2b19      	cmp	r3, #25
 8002400:	f200 8083 	bhi.w	800250a <HAL_I2C_Master_Transmit+0x142>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002404:	f8d8 3000 	ldr.w	r3, [r8]
 8002408:	6998      	ldr	r0, [r3, #24]
 800240a:	f410 4000 	ands.w	r0, r0, #32768	@ 0x8000
 800240e:	d1f3      	bne.n	80023f8 <HAL_I2C_Master_Transmit+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002410:	2221      	movs	r2, #33	@ 0x21
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002412:	f3c7 0709 	ubfx	r7, r7, #0, #10
    hi2c->pBuffPtr  = pData;
 8002416:	f8c8 9024 	str.w	r9, [r8, #36]	@ 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800241a:	f888 2041 	strb.w	r2, [r8, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800241e:	2210      	movs	r2, #16
    hi2c->XferISR   = NULL;
 8002420:	f8c8 0034 	str.w	r0, [r8, #52]	@ 0x34
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002424:	f888 2042 	strb.w	r2, [r8, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002428:	f8c8 0044 	str.w	r0, [r8, #68]	@ 0x44
    hi2c->XferCount = Size;
 800242c:	f8a8 402a 	strh.w	r4, [r8, #42]	@ 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002430:	f8b8 202a 	ldrh.w	r2, [r8, #42]	@ 0x2a
 8002434:	b292      	uxth	r2, r2
 8002436:	2aff      	cmp	r2, #255	@ 0xff
 8002438:	f200 80b7 	bhi.w	80025aa <HAL_I2C_Master_Transmit+0x1e2>
      hi2c->XferSize = hi2c->XferCount;
 800243c:	f8b8 202a 	ldrh.w	r2, [r8, #42]	@ 0x2a
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002440:	48b0      	ldr	r0, [pc, #704]	@ (8002704 <HAL_I2C_Master_Transmit+0x33c>)
      hi2c->XferSize = hi2c->XferCount;
 8002442:	b292      	uxth	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, \
 8002444:	6859      	ldr	r1, [r3, #4]
      hi2c->XferSize = hi2c->XferCount;
 8002446:	f8a8 2028 	strh.w	r2, [r8, #40]	@ 0x28
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800244a:	b2d2      	uxtb	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, \
 800244c:	4001      	ands	r1, r0
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800244e:	ea47 4202 	orr.w	r2, r7, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8002452:	430a      	orrs	r2, r1
 8002454:	49ac      	ldr	r1, [pc, #688]	@ (8002708 <HAL_I2C_Master_Transmit+0x340>)
 8002456:	4311      	orrs	r1, r2
 8002458:	6059      	str	r1, [r3, #4]
    while (hi2c->XferCount > 0U)
 800245a:	f8b8 202a 	ldrh.w	r2, [r8, #42]	@ 0x2a
 800245e:	b292      	uxth	r2, r2
 8002460:	2a00      	cmp	r2, #0
 8002462:	f000 80b2 	beq.w	80025ca <HAL_I2C_Master_Transmit+0x202>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002466:	699c      	ldr	r4, [r3, #24]
 8002468:	f014 0402 	ands.w	r4, r4, #2
 800246c:	f040 80f6 	bne.w	800265c <HAL_I2C_Master_Transmit+0x294>
  uint32_t itflag   = hi2c->Instance->ISR;
 8002470:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002472:	f012 0210 	ands.w	r2, r2, #16
 8002476:	f000 80c7 	beq.w	8002608 <HAL_I2C_Master_Transmit+0x240>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800247a:	2210      	movs	r2, #16
  uint32_t tickstart = Tickstart;
 800247c:	46b1      	mov	r9, r6
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800247e:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002480:	1c68      	adds	r0, r5, #1
 8002482:	d001      	beq.n	8002488 <HAL_I2C_Master_Transmit+0xc0>
 8002484:	e051      	b.n	800252a <HAL_I2C_Master_Transmit+0x162>
 8002486:	b92c      	cbnz	r4, 8002494 <HAL_I2C_Master_Transmit+0xcc>
 8002488:	699a      	ldr	r2, [r3, #24]
 800248a:	0691      	lsls	r1, r2, #26
 800248c:	d5fb      	bpl.n	8002486 <HAL_I2C_Master_Transmit+0xbe>
    if (status == HAL_OK)
 800248e:	b90c      	cbnz	r4, 8002494 <HAL_I2C_Master_Transmit+0xcc>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002490:	2220      	movs	r2, #32
 8002492:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8002494:	f04f 0e06 	mov.w	lr, #6
 8002498:	200c      	movs	r0, #12
 800249a:	240d      	movs	r4, #13
 800249c:	f04f 0c07 	mov.w	ip, #7
 80024a0:	f04f 0905 	mov.w	r9, #5
    error_code |= HAL_I2C_ERROR_AF;
 80024a4:	2204      	movs	r2, #4
    status = HAL_ERROR;
 80024a6:	f04f 0a01 	mov.w	sl, #1
  itflag = hi2c->Instance->ISR;
 80024aa:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80024ac:	f411 7f80 	tst.w	r1, #256	@ 0x100
 80024b0:	f000 80a1 	beq.w	80025f6 <HAL_I2C_Master_Transmit+0x22e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80024b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80024b8:	054e      	lsls	r6, r1, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80024ba:	61da      	str	r2, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80024bc:	f100 80ae 	bmi.w	800261c <HAL_I2C_Master_Transmit+0x254>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80024c0:	058d      	lsls	r5, r1, #22
 80024c2:	f100 80fc 	bmi.w	80026be <HAL_I2C_Master_Transmit+0x2f6>
 80024c6:	4648      	mov	r0, r9
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80024c8:	699a      	ldr	r2, [r3, #24]
 80024ca:	0796      	lsls	r6, r2, #30
 80024cc:	d501      	bpl.n	80024d2 <HAL_I2C_Master_Transmit+0x10a>
    hi2c->Instance->TXDR = 0x00U;
 80024ce:	2200      	movs	r2, #0
 80024d0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024d2:	699a      	ldr	r2, [r3, #24]
 80024d4:	07d5      	lsls	r5, r2, #31
 80024d6:	d403      	bmi.n	80024e0 <HAL_I2C_Master_Transmit+0x118>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80024d8:	699a      	ldr	r2, [r3, #24]
 80024da:	f042 0201 	orr.w	r2, r2, #1
 80024de:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
 80024e0:	685a      	ldr	r2, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024e2:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 80024e4:	4d89      	ldr	r5, [pc, #548]	@ (800270c <HAL_I2C_Master_Transmit+0x344>)
    hi2c->State = HAL_I2C_STATE_READY;
 80024e6:	2420      	movs	r4, #32
    I2C_RESET_CR2(hi2c);
 80024e8:	402a      	ands	r2, r5
 80024ea:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 80024ec:	f8d8 3044 	ldr.w	r3, [r8, #68]	@ 0x44
    __HAL_UNLOCK(hi2c);
 80024f0:	f888 1040 	strb.w	r1, [r8, #64]	@ 0x40
    hi2c->ErrorCode |= error_code;
 80024f4:	4303      	orrs	r3, r0
 80024f6:	f8c8 3044 	str.w	r3, [r8, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80024fa:	f888 4041 	strb.w	r4, [r8, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024fe:	f888 1042 	strb.w	r1, [r8, #66]	@ 0x42
  return status;
 8002502:	e00f      	b.n	8002524 <HAL_I2C_Master_Transmit+0x15c>
    __HAL_LOCK(hi2c);
 8002504:	2002      	movs	r0, #2
}
 8002506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800250a:	f8d8 3044 	ldr.w	r3, [r8, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800250e:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002510:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002512:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8002514:	f888 2040 	strb.w	r2, [r8, #64]	@ 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002518:	f8c8 3044 	str.w	r3, [r8, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800251c:	f888 1041 	strb.w	r1, [r8, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002520:	f888 2042 	strb.w	r2, [r8, #66]	@ 0x42
      return HAL_ERROR;
 8002524:	2001      	movs	r0, #1
}
 8002526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800252a:	699a      	ldr	r2, [r3, #24]
 800252c:	0692      	lsls	r2, r2, #26
 800252e:	d4ae      	bmi.n	800248e <HAL_I2C_Master_Transmit+0xc6>
 8002530:	2c00      	cmp	r4, #0
 8002532:	d1af      	bne.n	8002494 <HAL_I2C_Master_Transmit+0xcc>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002534:	f7ff f846 	bl	80015c4 <HAL_GetTick>
 8002538:	eba0 0009 	sub.w	r0, r0, r9
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800253c:	f8d8 3000 	ldr.w	r3, [r8]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002540:	4285      	cmp	r5, r0
 8002542:	d301      	bcc.n	8002548 <HAL_I2C_Master_Transmit+0x180>
 8002544:	2d00      	cmp	r5, #0
 8002546:	d1f0      	bne.n	800252a <HAL_I2C_Master_Transmit+0x162>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002548:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 800254a:	f898 2042 	ldrb.w	r2, [r8, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800254e:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 8002550:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002552:	0409      	lsls	r1, r1, #16
 8002554:	d50f      	bpl.n	8002576 <HAL_I2C_Master_Transmit+0x1ae>
              (tmp1 != I2C_CR2_STOP) && \
 8002556:	0441      	lsls	r1, r0, #17
 8002558:	d40d      	bmi.n	8002576 <HAL_I2C_Master_Transmit+0x1ae>
 800255a:	2a20      	cmp	r2, #32
 800255c:	d00b      	beq.n	8002576 <HAL_I2C_Master_Transmit+0x1ae>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800255e:	685a      	ldr	r2, [r3, #4]
 8002560:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002564:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8002566:	f7ff f82d 	bl	80015c4 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800256a:	f8d8 3000 	ldr.w	r3, [r8]
            tickstart = HAL_GetTick();
 800256e:	4681      	mov	r9, r0
 8002570:	e001      	b.n	8002576 <HAL_I2C_Master_Transmit+0x1ae>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002572:	f8d8 3000 	ldr.w	r3, [r8]
 8002576:	699a      	ldr	r2, [r3, #24]
 8002578:	f012 0a20 	ands.w	sl, r2, #32
 800257c:	d180      	bne.n	8002480 <HAL_I2C_Master_Transmit+0xb8>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800257e:	f7ff f821 	bl	80015c4 <HAL_GetTick>
 8002582:	eba0 0009 	sub.w	r0, r0, r9
 8002586:	2819      	cmp	r0, #25
 8002588:	d9f3      	bls.n	8002572 <HAL_I2C_Master_Transmit+0x1aa>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800258a:	f8d8 2044 	ldr.w	r2, [r8, #68]	@ 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800258e:	2120      	movs	r1, #32
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002590:	f8d8 3000 	ldr.w	r3, [r8]
              status = HAL_ERROR;
 8002594:	2401      	movs	r4, #1
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002596:	430a      	orrs	r2, r1
              __HAL_UNLOCK(hi2c);
 8002598:	f888 a040 	strb.w	sl, [r8, #64]	@ 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800259c:	f8c8 2044 	str.w	r2, [r8, #68]	@ 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80025a0:	f888 1041 	strb.w	r1, [r8, #65]	@ 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80025a4:	f888 a042 	strb.w	sl, [r8, #66]	@ 0x42
              status = HAL_ERROR;
 80025a8:	e7e5      	b.n	8002576 <HAL_I2C_Master_Transmit+0x1ae>
  MODIFY_REG(hi2c->Instance->CR2, \
 80025aa:	685a      	ldr	r2, [r3, #4]
 80025ac:	4955      	ldr	r1, [pc, #340]	@ (8002704 <HAL_I2C_Master_Transmit+0x33c>)
 80025ae:	400a      	ands	r2, r1
 80025b0:	4957      	ldr	r1, [pc, #348]	@ (8002710 <HAL_I2C_Master_Transmit+0x348>)
 80025b2:	433a      	orrs	r2, r7
 80025b4:	4311      	orrs	r1, r2
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80025b6:	22ff      	movs	r2, #255	@ 0xff
 80025b8:	f8a8 2028 	strh.w	r2, [r8, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 80025bc:	6059      	str	r1, [r3, #4]
    while (hi2c->XferCount > 0U)
 80025be:	f8b8 202a 	ldrh.w	r2, [r8, #42]	@ 0x2a
 80025c2:	b292      	uxth	r2, r2
 80025c4:	2a00      	cmp	r2, #0
 80025c6:	f47f af4e 	bne.w	8002466 <HAL_I2C_Master_Transmit+0x9e>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ca:	4632      	mov	r2, r6
 80025cc:	4629      	mov	r1, r5
 80025ce:	4640      	mov	r0, r8
 80025d0:	f7ff fdcc 	bl	800216c <I2C_WaitOnSTOPFlagUntilTimeout>
 80025d4:	2800      	cmp	r0, #0
 80025d6:	d1a5      	bne.n	8002524 <HAL_I2C_Master_Transmit+0x15c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025d8:	f8d8 3000 	ldr.w	r3, [r8]
 80025dc:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 80025de:	4c4b      	ldr	r4, [pc, #300]	@ (800270c <HAL_I2C_Master_Transmit+0x344>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025e0:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80025e2:	685a      	ldr	r2, [r3, #4]
 80025e4:	4022      	ands	r2, r4
 80025e6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80025e8:	f888 1041 	strb.w	r1, [r8, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 80025ec:	f888 0040 	strb.w	r0, [r8, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80025f0:	f888 0042 	strb.w	r0, [r8, #66]	@ 0x42
    return HAL_OK;
 80025f4:	e787      	b.n	8002506 <HAL_I2C_Master_Transmit+0x13e>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80025f6:	054c      	lsls	r4, r1, #21
 80025f8:	d411      	bmi.n	800261e <HAL_I2C_Master_Transmit+0x256>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80025fa:	0589      	lsls	r1, r1, #22
 80025fc:	d518      	bpl.n	8002630 <HAL_I2C_Master_Transmit+0x268>
 80025fe:	4670      	mov	r0, lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002600:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002604:	61da      	str	r2, [r3, #28]
  if (status != HAL_OK)
 8002606:	e75f      	b.n	80024c8 <HAL_I2C_Master_Transmit+0x100>
 8002608:	f04f 0e02 	mov.w	lr, #2
 800260c:	2008      	movs	r0, #8
 800260e:	2409      	movs	r4, #9
 8002610:	f04f 0c03 	mov.w	ip, #3
 8002614:	f04f 0901 	mov.w	r9, #1
  HAL_StatusTypeDef status = HAL_OK;
 8002618:	4692      	mov	sl, r2
 800261a:	e746      	b.n	80024aa <HAL_I2C_Master_Transmit+0xe2>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800261c:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800261e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002622:	058c      	lsls	r4, r1, #22
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002624:	61da      	str	r2, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002626:	f57f af4f 	bpl.w	80024c8 <HAL_I2C_Master_Transmit+0x100>
    error_code |= HAL_I2C_ERROR_ARLO;
 800262a:	f040 0002 	orr.w	r0, r0, #2
 800262e:	e7e7      	b.n	8002600 <HAL_I2C_Master_Transmit+0x238>
  if (status != HAL_OK)
 8002630:	f1ba 0f00 	cmp.w	sl, #0
 8002634:	d154      	bne.n	80026e0 <HAL_I2C_Master_Transmit+0x318>
    if (Timeout != HAL_MAX_DELAY)
 8002636:	1c6c      	adds	r4, r5, #1
 8002638:	f43f af15 	beq.w	8002466 <HAL_I2C_Master_Transmit+0x9e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800263c:	f7fe ffc2 	bl	80015c4 <HAL_GetTick>
 8002640:	1b83      	subs	r3, r0, r6
 8002642:	429d      	cmp	r5, r3
 8002644:	f4ff af61 	bcc.w	800250a <HAL_I2C_Master_Transmit+0x142>
 8002648:	2d00      	cmp	r5, #0
 800264a:	f43f af5e 	beq.w	800250a <HAL_I2C_Master_Transmit+0x142>
 800264e:	f8d8 3000 	ldr.w	r3, [r8]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002652:	699c      	ldr	r4, [r3, #24]
 8002654:	f014 0402 	ands.w	r4, r4, #2
 8002658:	f43f af0a 	beq.w	8002470 <HAL_I2C_Master_Transmit+0xa8>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800265c:	f8d8 0024 	ldr.w	r0, [r8, #36]	@ 0x24
      hi2c->XferSize--;
 8002660:	f8b8 2028 	ldrh.w	r2, [r8, #40]	@ 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002664:	f810 1b01 	ldrb.w	r1, [r0], #1
      hi2c->XferSize--;
 8002668:	3a01      	subs	r2, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800266a:	6299      	str	r1, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800266c:	f8b8 102a 	ldrh.w	r1, [r8, #42]	@ 0x2a
      hi2c->XferSize--;
 8002670:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 8002672:	f8c8 0024 	str.w	r0, [r8, #36]	@ 0x24
      hi2c->XferCount--;
 8002676:	3901      	subs	r1, #1
      hi2c->XferSize--;
 8002678:	f8a8 2028 	strh.w	r2, [r8, #40]	@ 0x28
      hi2c->XferCount--;
 800267c:	b289      	uxth	r1, r1
 800267e:	f8a8 102a 	strh.w	r1, [r8, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002682:	f8b8 102a 	ldrh.w	r1, [r8, #42]	@ 0x2a
 8002686:	b289      	uxth	r1, r1
 8002688:	2900      	cmp	r1, #0
 800268a:	f43f aee6 	beq.w	800245a <HAL_I2C_Master_Transmit+0x92>
 800268e:	2a00      	cmp	r2, #0
 8002690:	f47f aee3 	bne.w	800245a <HAL_I2C_Master_Transmit+0x92>
 8002694:	1c68      	adds	r0, r5, #1
 8002696:	d11f      	bne.n	80026d8 <HAL_I2C_Master_Transmit+0x310>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002698:	699a      	ldr	r2, [r3, #24]
 800269a:	0611      	lsls	r1, r2, #24
 800269c:	d5fc      	bpl.n	8002698 <HAL_I2C_Master_Transmit+0x2d0>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800269e:	f8b8 202a 	ldrh.w	r2, [r8, #42]	@ 0x2a
 80026a2:	b292      	uxth	r2, r2
 80026a4:	2aff      	cmp	r2, #255	@ 0xff
 80026a6:	d91d      	bls.n	80026e4 <HAL_I2C_Master_Transmit+0x31c>
  MODIFY_REG(hi2c->Instance->CR2, \
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	491a      	ldr	r1, [pc, #104]	@ (8002714 <HAL_I2C_Master_Transmit+0x34c>)
 80026ac:	400a      	ands	r2, r1
 80026ae:	491a      	ldr	r1, [pc, #104]	@ (8002718 <HAL_I2C_Master_Transmit+0x350>)
 80026b0:	433a      	orrs	r2, r7
 80026b2:	4311      	orrs	r1, r2
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026b4:	22ff      	movs	r2, #255	@ 0xff
 80026b6:	f8a8 2028 	strh.w	r2, [r8, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 80026ba:	6059      	str	r1, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80026bc:	e6cd      	b.n	800245a <HAL_I2C_Master_Transmit+0x92>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80026be:	4660      	mov	r0, ip
 80026c0:	e79e      	b.n	8002600 <HAL_I2C_Master_Transmit+0x238>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026c2:	f7fe ff7f 	bl	80015c4 <HAL_GetTick>
 80026c6:	1b83      	subs	r3, r0, r6
 80026c8:	429d      	cmp	r5, r3
 80026ca:	f4ff af1e 	bcc.w	800250a <HAL_I2C_Master_Transmit+0x142>
 80026ce:	2d00      	cmp	r5, #0
 80026d0:	f43f af1b 	beq.w	800250a <HAL_I2C_Master_Transmit+0x142>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026d4:	f8d8 3000 	ldr.w	r3, [r8]
 80026d8:	699a      	ldr	r2, [r3, #24]
 80026da:	0612      	lsls	r2, r2, #24
 80026dc:	d5f1      	bpl.n	80026c2 <HAL_I2C_Master_Transmit+0x2fa>
 80026de:	e7de      	b.n	800269e <HAL_I2C_Master_Transmit+0x2d6>
 80026e0:	4610      	mov	r0, r2
 80026e2:	e6f1      	b.n	80024c8 <HAL_I2C_Master_Transmit+0x100>
          hi2c->XferSize = hi2c->XferCount;
 80026e4:	f8b8 202a 	ldrh.w	r2, [r8, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 80026e8:	480a      	ldr	r0, [pc, #40]	@ (8002714 <HAL_I2C_Master_Transmit+0x34c>)
          hi2c->XferSize = hi2c->XferCount;
 80026ea:	b292      	uxth	r2, r2
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80026ec:	b2d1      	uxtb	r1, r2
          hi2c->XferSize = hi2c->XferCount;
 80026ee:	f8a8 2028 	strh.w	r2, [r8, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	4002      	ands	r2, r0
 80026f6:	433a      	orrs	r2, r7
 80026f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80026fc:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8002700:	605a      	str	r2, [r3, #4]
}
 8002702:	e6aa      	b.n	800245a <HAL_I2C_Master_Transmit+0x92>
 8002704:	fc009800 	.word	0xfc009800
 8002708:	02002000 	.word	0x02002000
 800270c:	fe00e800 	.word	0xfe00e800
 8002710:	01ff2000 	.word	0x01ff2000
 8002714:	fc009c00 	.word	0xfc009c00
 8002718:	01ff0000 	.word	0x01ff0000

0800271c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800271c:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8002720:	2a20      	cmp	r2, #32
 8002722:	d123      	bne.n	800276c <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8002724:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002728:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800272c:	4603      	mov	r3, r0
 800272e:	2a01      	cmp	r2, #1
 8002730:	d01c      	beq.n	800276c <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002732:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002734:	2024      	movs	r0, #36	@ 0x24
{
 8002736:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002738:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800273c:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_DISABLE(hi2c);
 8002740:	6810      	ldr	r0, [r2, #0]
 8002742:	f020 0001 	bic.w	r0, r0, #1
 8002746:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002748:	6810      	ldr	r0, [r2, #0]
 800274a:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 800274e:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8002750:	6810      	ldr	r0, [r2, #0]
 8002752:	4301      	orrs	r1, r0

    return HAL_OK;
 8002754:	4670      	mov	r0, lr
    hi2c->Instance->CR1 |= AnalogFilter;
 8002756:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002758:	6811      	ldr	r1, [r2, #0]
 800275a:	f041 0101 	orr.w	r1, r1, #1
 800275e:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002760:	f883 c041 	strb.w	ip, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8002764:	f883 e040 	strb.w	lr, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002768:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 800276c:	2002      	movs	r0, #2
}
 800276e:	4770      	bx	lr

08002770 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002770:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8002774:	2a20      	cmp	r2, #32
 8002776:	d122      	bne.n	80027be <HAL_I2CEx_ConfigDigitalFilter+0x4e>
 8002778:	4603      	mov	r3, r0
{
 800277a:	b500      	push	{lr}
 800277c:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002780:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8002784:	2a01      	cmp	r2, #1
 8002786:	d01c      	beq.n	80027c2 <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002788:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800278a:	2024      	movs	r0, #36	@ 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800278c:	f04f 0c00 	mov.w	ip, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002790:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_DISABLE(hi2c);
 8002794:	6810      	ldr	r0, [r2, #0]
 8002796:	f020 0001 	bic.w	r0, r0, #1
 800279a:	6010      	str	r0, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 800279c:	6810      	ldr	r0, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 800279e:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00
    tmpreg |= DigitalFilter << 8U;
 80027a2:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    return HAL_OK;
 80027a6:	4660      	mov	r0, ip
    hi2c->Instance->CR1 = tmpreg;
 80027a8:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 80027aa:	6811      	ldr	r1, [r2, #0]
 80027ac:	f041 0101 	orr.w	r1, r1, #1
 80027b0:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80027b2:	f883 e041 	strb.w	lr, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 80027b6:	f883 c040 	strb.w	ip, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 80027ba:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 80027be:	2002      	movs	r0, #2
}
 80027c0:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80027c2:	2002      	movs	r0, #2
}
 80027c4:	f85d fb04 	ldr.w	pc, [sp], #4

080027c8 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80027c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002834 <HAL_PWREx_EnableOverDrive+0x6c>)
 80027ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027cc:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
{
 80027d0:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80027d2:	641a      	str	r2, [r3, #64]	@ 0x40
{
 80027d4:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 80027d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80027d8:	4c17      	ldr	r4, [pc, #92]	@ (8002838 <HAL_PWREx_EnableOverDrive+0x70>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80027da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027de:	9301      	str	r3, [sp, #4]
 80027e0:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80027e2:	6823      	ldr	r3, [r4, #0]
 80027e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027e8:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027ea:	f7fe feeb 	bl	80015c4 <HAL_GetTick>
 80027ee:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80027f0:	e005      	b.n	80027fe <HAL_PWREx_EnableOverDrive+0x36>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80027f2:	f7fe fee7 	bl	80015c4 <HAL_GetTick>
 80027f6:	1b40      	subs	r0, r0, r5
 80027f8:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80027fc:	d817      	bhi.n	800282e <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80027fe:	6863      	ldr	r3, [r4, #4]
 8002800:	03da      	lsls	r2, r3, #15
 8002802:	d5f6      	bpl.n	80027f2 <HAL_PWREx_EnableOverDrive+0x2a>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002804:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002806:	4d0c      	ldr	r5, [pc, #48]	@ (8002838 <HAL_PWREx_EnableOverDrive+0x70>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002808:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800280c:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800280e:	f7fe fed9 	bl	80015c4 <HAL_GetTick>
 8002812:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002814:	e005      	b.n	8002822 <HAL_PWREx_EnableOverDrive+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002816:	f7fe fed5 	bl	80015c4 <HAL_GetTick>
 800281a:	1b00      	subs	r0, r0, r4
 800281c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8002820:	d805      	bhi.n	800282e <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002822:	686b      	ldr	r3, [r5, #4]
 8002824:	039b      	lsls	r3, r3, #14
 8002826:	d5f6      	bpl.n	8002816 <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8002828:	2000      	movs	r0, #0
}
 800282a:	b003      	add	sp, #12
 800282c:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 800282e:	2003      	movs	r0, #3
}
 8002830:	b003      	add	sp, #12
 8002832:	bd30      	pop	{r4, r5, pc}
 8002834:	40023800 	.word	0x40023800
 8002838:	40007000 	.word	0x40007000

0800283c <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800283c:	2800      	cmp	r0, #0
 800283e:	f000 81bd 	beq.w	8002bbc <HAL_RCC_OscConfig+0x380>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002842:	6803      	ldr	r3, [r0, #0]
{
 8002844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002848:	07dd      	lsls	r5, r3, #31
{
 800284a:	b082      	sub	sp, #8
 800284c:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800284e:	d535      	bpl.n	80028bc <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002850:	499a      	ldr	r1, [pc, #616]	@ (8002abc <HAL_RCC_OscConfig+0x280>)
 8002852:	688a      	ldr	r2, [r1, #8]
 8002854:	f002 020c 	and.w	r2, r2, #12
 8002858:	2a04      	cmp	r2, #4
 800285a:	f000 80e0 	beq.w	8002a1e <HAL_RCC_OscConfig+0x1e2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800285e:	688a      	ldr	r2, [r1, #8]
 8002860:	f002 020c 	and.w	r2, r2, #12
 8002864:	2a08      	cmp	r2, #8
 8002866:	f000 80d6 	beq.w	8002a16 <HAL_RCC_OscConfig+0x1da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800286a:	6863      	ldr	r3, [r4, #4]
 800286c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002870:	d010      	beq.n	8002894 <HAL_RCC_OscConfig+0x58>
 8002872:	2b00      	cmp	r3, #0
 8002874:	f000 80fd 	beq.w	8002a72 <HAL_RCC_OscConfig+0x236>
 8002878:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800287c:	4b8f      	ldr	r3, [pc, #572]	@ (8002abc <HAL_RCC_OscConfig+0x280>)
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	f000 818c 	beq.w	8002b9c <HAL_RCC_OscConfig+0x360>
 8002884:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002888:	601a      	str	r2, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002890:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002892:	e004      	b.n	800289e <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002894:	4a89      	ldr	r2, [pc, #548]	@ (8002abc <HAL_RCC_OscConfig+0x280>)
 8002896:	6813      	ldr	r3, [r2, #0]
 8002898:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800289c:	6013      	str	r3, [r2, #0]
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289e:	f7fe fe91 	bl	80015c4 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028a2:	4e86      	ldr	r6, [pc, #536]	@ (8002abc <HAL_RCC_OscConfig+0x280>)
        tickstart = HAL_GetTick();
 80028a4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028a6:	e005      	b.n	80028b4 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028a8:	f7fe fe8c 	bl	80015c4 <HAL_GetTick>
 80028ac:	1b40      	subs	r0, r0, r5
 80028ae:	2864      	cmp	r0, #100	@ 0x64
 80028b0:	f200 80db 	bhi.w	8002a6a <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b4:	6833      	ldr	r3, [r6, #0]
 80028b6:	039b      	lsls	r3, r3, #14
 80028b8:	d5f6      	bpl.n	80028a8 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ba:	6823      	ldr	r3, [r4, #0]
 80028bc:	079d      	lsls	r5, r3, #30
 80028be:	d527      	bpl.n	8002910 <HAL_RCC_OscConfig+0xd4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028c0:	4a7e      	ldr	r2, [pc, #504]	@ (8002abc <HAL_RCC_OscConfig+0x280>)
 80028c2:	6891      	ldr	r1, [r2, #8]
 80028c4:	f011 0f0c 	tst.w	r1, #12
 80028c8:	d07e      	beq.n	80029c8 <HAL_RCC_OscConfig+0x18c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ca:	6891      	ldr	r1, [r2, #8]
 80028cc:	f001 010c 	and.w	r1, r1, #12
 80028d0:	2908      	cmp	r1, #8
 80028d2:	d076      	beq.n	80029c2 <HAL_RCC_OscConfig+0x186>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80028d4:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028d6:	4d79      	ldr	r5, [pc, #484]	@ (8002abc <HAL_RCC_OscConfig+0x280>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 8104 	beq.w	8002ae6 <HAL_RCC_OscConfig+0x2aa>
        __HAL_RCC_HSI_ENABLE();
 80028de:	682b      	ldr	r3, [r5, #0]
 80028e0:	f043 0301 	orr.w	r3, r3, #1
 80028e4:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e6:	f7fe fe6d 	bl	80015c4 <HAL_GetTick>
 80028ea:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ec:	e005      	b.n	80028fa <HAL_RCC_OscConfig+0xbe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ee:	f7fe fe69 	bl	80015c4 <HAL_GetTick>
 80028f2:	1b80      	subs	r0, r0, r6
 80028f4:	2802      	cmp	r0, #2
 80028f6:	f200 80b8 	bhi.w	8002a6a <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028fa:	682b      	ldr	r3, [r5, #0]
 80028fc:	079f      	lsls	r7, r3, #30
 80028fe:	d5f6      	bpl.n	80028ee <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002900:	682b      	ldr	r3, [r5, #0]
 8002902:	6922      	ldr	r2, [r4, #16]
 8002904:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002908:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800290c:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800290e:	6823      	ldr	r3, [r4, #0]
 8002910:	071a      	lsls	r2, r3, #28
 8002912:	d41f      	bmi.n	8002954 <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002914:	075e      	lsls	r6, r3, #29
 8002916:	d534      	bpl.n	8002982 <HAL_RCC_OscConfig+0x146>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002918:	4b68      	ldr	r3, [pc, #416]	@ (8002abc <HAL_RCC_OscConfig+0x280>)
 800291a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800291c:	00d5      	lsls	r5, r2, #3
 800291e:	d56f      	bpl.n	8002a00 <HAL_RCC_OscConfig+0x1c4>
  FlagStatus pwrclkchanged = RESET;
 8002920:	2500      	movs	r5, #0
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002922:	4e67      	ldr	r6, [pc, #412]	@ (8002ac0 <HAL_RCC_OscConfig+0x284>)
 8002924:	6833      	ldr	r3, [r6, #0]
 8002926:	05d8      	lsls	r0, r3, #23
 8002928:	f140 808f 	bpl.w	8002a4a <HAL_RCC_OscConfig+0x20e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800292c:	68a3      	ldr	r3, [r4, #8]
 800292e:	2b01      	cmp	r3, #1
 8002930:	f000 80eb 	beq.w	8002b0a <HAL_RCC_OscConfig+0x2ce>
 8002934:	2b00      	cmp	r3, #0
 8002936:	f000 80b2 	beq.w	8002a9e <HAL_RCC_OscConfig+0x262>
 800293a:	2b05      	cmp	r3, #5
 800293c:	4b5f      	ldr	r3, [pc, #380]	@ (8002abc <HAL_RCC_OscConfig+0x280>)
 800293e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002940:	f000 8134 	beq.w	8002bac <HAL_RCC_OscConfig+0x370>
 8002944:	f022 0201 	bic.w	r2, r2, #1
 8002948:	671a      	str	r2, [r3, #112]	@ 0x70
 800294a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800294c:	f022 0204 	bic.w	r2, r2, #4
 8002950:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002952:	e0df      	b.n	8002b14 <HAL_RCC_OscConfig+0x2d8>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002954:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8002956:	4d59      	ldr	r5, [pc, #356]	@ (8002abc <HAL_RCC_OscConfig+0x280>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002958:	2b00      	cmp	r3, #0
 800295a:	d040      	beq.n	80029de <HAL_RCC_OscConfig+0x1a2>
      __HAL_RCC_LSI_ENABLE();
 800295c:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800295e:	f043 0301 	orr.w	r3, r3, #1
 8002962:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8002964:	f7fe fe2e 	bl	80015c4 <HAL_GetTick>
 8002968:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800296a:	e004      	b.n	8002976 <HAL_RCC_OscConfig+0x13a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800296c:	f7fe fe2a 	bl	80015c4 <HAL_GetTick>
 8002970:	1b80      	subs	r0, r0, r6
 8002972:	2802      	cmp	r0, #2
 8002974:	d879      	bhi.n	8002a6a <HAL_RCC_OscConfig+0x22e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002976:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8002978:	079b      	lsls	r3, r3, #30
 800297a:	d5f7      	bpl.n	800296c <HAL_RCC_OscConfig+0x130>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800297c:	6823      	ldr	r3, [r4, #0]
 800297e:	075e      	lsls	r6, r3, #29
 8002980:	d4ca      	bmi.n	8002918 <HAL_RCC_OscConfig+0xdc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002982:	69a3      	ldr	r3, [r4, #24]
 8002984:	b1cb      	cbz	r3, 80029ba <HAL_RCC_OscConfig+0x17e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002986:	4d4d      	ldr	r5, [pc, #308]	@ (8002abc <HAL_RCC_OscConfig+0x280>)
 8002988:	68aa      	ldr	r2, [r5, #8]
 800298a:	f002 020c 	and.w	r2, r2, #12
 800298e:	2a08      	cmp	r2, #8
 8002990:	f000 80d3 	beq.w	8002b3a <HAL_RCC_OscConfig+0x2fe>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002994:	2b02      	cmp	r3, #2
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002996:	682b      	ldr	r3, [r5, #0]
 8002998:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800299c:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800299e:	f000 810f 	beq.w	8002bc0 <HAL_RCC_OscConfig+0x384>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a2:	f7fe fe0f 	bl	80015c4 <HAL_GetTick>
 80029a6:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029a8:	e004      	b.n	80029b4 <HAL_RCC_OscConfig+0x178>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029aa:	f7fe fe0b 	bl	80015c4 <HAL_GetTick>
 80029ae:	1b00      	subs	r0, r0, r4
 80029b0:	2802      	cmp	r0, #2
 80029b2:	d85a      	bhi.n	8002a6a <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029b4:	682b      	ldr	r3, [r5, #0]
 80029b6:	019b      	lsls	r3, r3, #6
 80029b8:	d4f7      	bmi.n	80029aa <HAL_RCC_OscConfig+0x16e>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80029ba:	2000      	movs	r0, #0
}
 80029bc:	b002      	add	sp, #8
 80029be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029c2:	6852      	ldr	r2, [r2, #4]
 80029c4:	0251      	lsls	r1, r2, #9
 80029c6:	d485      	bmi.n	80028d4 <HAL_RCC_OscConfig+0x98>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029c8:	4a3c      	ldr	r2, [pc, #240]	@ (8002abc <HAL_RCC_OscConfig+0x280>)
 80029ca:	6812      	ldr	r2, [r2, #0]
 80029cc:	0792      	lsls	r2, r2, #30
 80029ce:	d530      	bpl.n	8002a32 <HAL_RCC_OscConfig+0x1f6>
 80029d0:	68e2      	ldr	r2, [r4, #12]
 80029d2:	2a01      	cmp	r2, #1
 80029d4:	d02d      	beq.n	8002a32 <HAL_RCC_OscConfig+0x1f6>
    return HAL_ERROR;
 80029d6:	2001      	movs	r0, #1
}
 80029d8:	b002      	add	sp, #8
 80029da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80029de:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80029e0:	f023 0301 	bic.w	r3, r3, #1
 80029e4:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 80029e6:	f7fe fded 	bl	80015c4 <HAL_GetTick>
 80029ea:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029ec:	e004      	b.n	80029f8 <HAL_RCC_OscConfig+0x1bc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029ee:	f7fe fde9 	bl	80015c4 <HAL_GetTick>
 80029f2:	1b80      	subs	r0, r0, r6
 80029f4:	2802      	cmp	r0, #2
 80029f6:	d838      	bhi.n	8002a6a <HAL_RCC_OscConfig+0x22e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029f8:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80029fa:	079f      	lsls	r7, r3, #30
 80029fc:	d4f7      	bmi.n	80029ee <HAL_RCC_OscConfig+0x1b2>
 80029fe:	e7bd      	b.n	800297c <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
      pwrclkchanged = SET;
 8002a02:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a04:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002a08:	641a      	str	r2, [r3, #64]	@ 0x40
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a10:	9301      	str	r3, [sp, #4]
 8002a12:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002a14:	e785      	b.n	8002922 <HAL_RCC_OscConfig+0xe6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a16:	684a      	ldr	r2, [r1, #4]
 8002a18:	0251      	lsls	r1, r2, #9
 8002a1a:	f57f af26 	bpl.w	800286a <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a1e:	4a27      	ldr	r2, [pc, #156]	@ (8002abc <HAL_RCC_OscConfig+0x280>)
 8002a20:	6812      	ldr	r2, [r2, #0]
 8002a22:	0392      	lsls	r2, r2, #14
 8002a24:	f57f af4a 	bpl.w	80028bc <HAL_RCC_OscConfig+0x80>
 8002a28:	6862      	ldr	r2, [r4, #4]
 8002a2a:	2a00      	cmp	r2, #0
 8002a2c:	f47f af46 	bne.w	80028bc <HAL_RCC_OscConfig+0x80>
 8002a30:	e7d1      	b.n	80029d6 <HAL_RCC_OscConfig+0x19a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a32:	4922      	ldr	r1, [pc, #136]	@ (8002abc <HAL_RCC_OscConfig+0x280>)
 8002a34:	6920      	ldr	r0, [r4, #16]
 8002a36:	680a      	ldr	r2, [r1, #0]
 8002a38:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 8002a3c:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8002a40:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a42:	071a      	lsls	r2, r3, #28
 8002a44:	f57f af66 	bpl.w	8002914 <HAL_RCC_OscConfig+0xd8>
 8002a48:	e784      	b.n	8002954 <HAL_RCC_OscConfig+0x118>
      PWR->CR1 |= PWR_CR1_DBP;
 8002a4a:	6833      	ldr	r3, [r6, #0]
 8002a4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a50:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002a52:	f7fe fdb7 	bl	80015c4 <HAL_GetTick>
 8002a56:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a58:	6833      	ldr	r3, [r6, #0]
 8002a5a:	05d9      	lsls	r1, r3, #23
 8002a5c:	f53f af66 	bmi.w	800292c <HAL_RCC_OscConfig+0xf0>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a60:	f7fe fdb0 	bl	80015c4 <HAL_GetTick>
 8002a64:	1bc0      	subs	r0, r0, r7
 8002a66:	2864      	cmp	r0, #100	@ 0x64
 8002a68:	d9f6      	bls.n	8002a58 <HAL_RCC_OscConfig+0x21c>
            return HAL_TIMEOUT;
 8002a6a:	2003      	movs	r0, #3
}
 8002a6c:	b002      	add	sp, #8
 8002a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a72:	4d12      	ldr	r5, [pc, #72]	@ (8002abc <HAL_RCC_OscConfig+0x280>)
 8002a74:	682b      	ldr	r3, [r5, #0]
 8002a76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a7a:	602b      	str	r3, [r5, #0]
 8002a7c:	682b      	ldr	r3, [r5, #0]
 8002a7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a82:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002a84:	f7fe fd9e 	bl	80015c4 <HAL_GetTick>
 8002a88:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a8a:	e004      	b.n	8002a96 <HAL_RCC_OscConfig+0x25a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a8c:	f7fe fd9a 	bl	80015c4 <HAL_GetTick>
 8002a90:	1b80      	subs	r0, r0, r6
 8002a92:	2864      	cmp	r0, #100	@ 0x64
 8002a94:	d8e9      	bhi.n	8002a6a <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a96:	682b      	ldr	r3, [r5, #0]
 8002a98:	039f      	lsls	r7, r3, #14
 8002a9a:	d4f7      	bmi.n	8002a8c <HAL_RCC_OscConfig+0x250>
 8002a9c:	e70d      	b.n	80028ba <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a9e:	4e07      	ldr	r6, [pc, #28]	@ (8002abc <HAL_RCC_OscConfig+0x280>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aa0:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aa4:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8002aa6:	f023 0301 	bic.w	r3, r3, #1
 8002aaa:	6733      	str	r3, [r6, #112]	@ 0x70
 8002aac:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8002aae:	f023 0304 	bic.w	r3, r3, #4
 8002ab2:	6733      	str	r3, [r6, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8002ab4:	f7fe fd86 	bl	80015c4 <HAL_GetTick>
 8002ab8:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0x292>
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	40007000 	.word	0x40007000
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ac4:	f7fe fd7e 	bl	80015c4 <HAL_GetTick>
 8002ac8:	1bc0      	subs	r0, r0, r7
 8002aca:	4540      	cmp	r0, r8
 8002acc:	d8cd      	bhi.n	8002a6a <HAL_RCC_OscConfig+0x22e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ace:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8002ad0:	079b      	lsls	r3, r3, #30
 8002ad2:	d4f7      	bmi.n	8002ac4 <HAL_RCC_OscConfig+0x288>
    if (pwrclkchanged == SET)
 8002ad4:	2d00      	cmp	r5, #0
 8002ad6:	f43f af54 	beq.w	8002982 <HAL_RCC_OscConfig+0x146>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ada:	4a52      	ldr	r2, [pc, #328]	@ (8002c24 <HAL_RCC_OscConfig+0x3e8>)
 8002adc:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8002ade:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ae2:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ae4:	e74d      	b.n	8002982 <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_HSI_DISABLE();
 8002ae6:	682b      	ldr	r3, [r5, #0]
 8002ae8:	f023 0301 	bic.w	r3, r3, #1
 8002aec:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002aee:	f7fe fd69 	bl	80015c4 <HAL_GetTick>
 8002af2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002af4:	e004      	b.n	8002b00 <HAL_RCC_OscConfig+0x2c4>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002af6:	f7fe fd65 	bl	80015c4 <HAL_GetTick>
 8002afa:	1b80      	subs	r0, r0, r6
 8002afc:	2802      	cmp	r0, #2
 8002afe:	d8b4      	bhi.n	8002a6a <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b00:	682b      	ldr	r3, [r5, #0]
 8002b02:	0799      	lsls	r1, r3, #30
 8002b04:	d4f7      	bmi.n	8002af6 <HAL_RCC_OscConfig+0x2ba>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b06:	6823      	ldr	r3, [r4, #0]
 8002b08:	e702      	b.n	8002910 <HAL_RCC_OscConfig+0xd4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b0a:	4a46      	ldr	r2, [pc, #280]	@ (8002c24 <HAL_RCC_OscConfig+0x3e8>)
 8002b0c:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8002b0e:	f043 0301 	orr.w	r3, r3, #1
 8002b12:	6713      	str	r3, [r2, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8002b14:	f7fe fd56 	bl	80015c4 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b18:	4f42      	ldr	r7, [pc, #264]	@ (8002c24 <HAL_RCC_OscConfig+0x3e8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b1a:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8002b1e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b20:	e004      	b.n	8002b2c <HAL_RCC_OscConfig+0x2f0>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b22:	f7fe fd4f 	bl	80015c4 <HAL_GetTick>
 8002b26:	1b80      	subs	r0, r0, r6
 8002b28:	4540      	cmp	r0, r8
 8002b2a:	d89e      	bhi.n	8002a6a <HAL_RCC_OscConfig+0x22e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b2c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b2e:	079a      	lsls	r2, r3, #30
 8002b30:	d5f7      	bpl.n	8002b22 <HAL_RCC_OscConfig+0x2e6>
    if (pwrclkchanged == SET)
 8002b32:	2d00      	cmp	r5, #0
 8002b34:	f43f af25 	beq.w	8002982 <HAL_RCC_OscConfig+0x146>
 8002b38:	e7cf      	b.n	8002ada <HAL_RCC_OscConfig+0x29e>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b3a:	2b01      	cmp	r3, #1
      pll_config = RCC->PLLCFGR;
 8002b3c:	686a      	ldr	r2, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b3e:	f43f af4a 	beq.w	80029d6 <HAL_RCC_OscConfig+0x19a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b42:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b46:	69e1      	ldr	r1, [r4, #28]
 8002b48:	428b      	cmp	r3, r1
 8002b4a:	f47f af44 	bne.w	80029d6 <HAL_RCC_OscConfig+0x19a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b4e:	f002 033f 	and.w	r3, r2, #63	@ 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b52:	6a21      	ldr	r1, [r4, #32]
 8002b54:	428b      	cmp	r3, r1
 8002b56:	f47f af3e 	bne.w	80029d6 <HAL_RCC_OscConfig+0x19a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b5a:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b5e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002b60:	4013      	ands	r3, r2
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b62:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 8002b66:	f47f af36 	bne.w	80029d6 <HAL_RCC_OscConfig+0x19a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002b6a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002b6c:	f402 3140 	and.w	r1, r2, #196608	@ 0x30000
 8002b70:	085b      	lsrs	r3, r3, #1
 8002b72:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b74:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 8002b78:	f47f af2d 	bne.w	80029d6 <HAL_RCC_OscConfig+0x19a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b7c:	f002 6370 	and.w	r3, r2, #251658240	@ 0xf000000
 8002b80:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002b82:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 8002b86:	f47f af26 	bne.w	80029d6 <HAL_RCC_OscConfig+0x19a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002b8a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002b8c:	f002 42e0 	and.w	r2, r2, #1879048192	@ 0x70000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b90:	ebb2 7f03 	cmp.w	r2, r3, lsl #28
 8002b94:	bf14      	ite	ne
 8002b96:	2001      	movne	r0, #1
 8002b98:	2000      	moveq	r0, #0
 8002b9a:	e70f      	b.n	80029bc <HAL_RCC_OscConfig+0x180>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b9c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002ba0:	601a      	str	r2, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002ba8:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002baa:	e678      	b.n	800289e <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bac:	f042 0204 	orr.w	r2, r2, #4
 8002bb0:	671a      	str	r2, [r3, #112]	@ 0x70
 8002bb2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002bb4:	f042 0201 	orr.w	r2, r2, #1
 8002bb8:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bba:	e7ab      	b.n	8002b14 <HAL_RCC_OscConfig+0x2d8>
    return HAL_ERROR;
 8002bbc:	2001      	movs	r0, #1
}
 8002bbe:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8002bc0:	f7fe fd00 	bl	80015c4 <HAL_GetTick>
 8002bc4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bc6:	e005      	b.n	8002bd4 <HAL_RCC_OscConfig+0x398>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bc8:	f7fe fcfc 	bl	80015c4 <HAL_GetTick>
 8002bcc:	1b80      	subs	r0, r0, r6
 8002bce:	2802      	cmp	r0, #2
 8002bd0:	f63f af4b 	bhi.w	8002a6a <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bd4:	682b      	ldr	r3, [r5, #0]
 8002bd6:	0199      	lsls	r1, r3, #6
 8002bd8:	d4f6      	bmi.n	8002bc8 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bda:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8002bde:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002be0:	430b      	orrs	r3, r1
 8002be2:	6b21      	ldr	r1, [r4, #48]	@ 0x30
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002be4:	4e0f      	ldr	r6, [pc, #60]	@ (8002c24 <HAL_RCC_OscConfig+0x3e8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002be6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002bea:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	@ 0x28
 8002bee:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002bf2:	0852      	lsrs	r2, r2, #1
 8002bf4:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002bf8:	3a01      	subs	r2, #1
 8002bfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002bfe:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002c00:	682b      	ldr	r3, [r5, #0]
 8002c02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c06:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002c08:	f7fe fcdc 	bl	80015c4 <HAL_GetTick>
 8002c0c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c0e:	e005      	b.n	8002c1c <HAL_RCC_OscConfig+0x3e0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c10:	f7fe fcd8 	bl	80015c4 <HAL_GetTick>
 8002c14:	1b00      	subs	r0, r0, r4
 8002c16:	2802      	cmp	r0, #2
 8002c18:	f63f af27 	bhi.w	8002a6a <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c1c:	6833      	ldr	r3, [r6, #0]
 8002c1e:	019a      	lsls	r2, r3, #6
 8002c20:	d5f6      	bpl.n	8002c10 <HAL_RCC_OscConfig+0x3d4>
 8002c22:	e6ca      	b.n	80029ba <HAL_RCC_OscConfig+0x17e>
 8002c24:	40023800 	.word	0x40023800

08002c28 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c28:	2800      	cmp	r0, #0
 8002c2a:	f000 80b3 	beq.w	8002d94 <HAL_RCC_ClockConfig+0x16c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c2e:	4a61      	ldr	r2, [pc, #388]	@ (8002db4 <HAL_RCC_ClockConfig+0x18c>)
 8002c30:	6813      	ldr	r3, [r2, #0]
 8002c32:	f003 030f 	and.w	r3, r3, #15
 8002c36:	428b      	cmp	r3, r1
{
 8002c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c3c:	4604      	mov	r4, r0
 8002c3e:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c40:	d20c      	bcs.n	8002c5c <HAL_RCC_ClockConfig+0x34>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c42:	6813      	ldr	r3, [r2, #0]
 8002c44:	f023 030f 	bic.w	r3, r3, #15
 8002c48:	430b      	orrs	r3, r1
 8002c4a:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4c:	6813      	ldr	r3, [r2, #0]
 8002c4e:	f003 030f 	and.w	r3, r3, #15
 8002c52:	428b      	cmp	r3, r1
 8002c54:	d002      	beq.n	8002c5c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8002c56:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);

  return HAL_OK;
}
 8002c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c5c:	6823      	ldr	r3, [r4, #0]
 8002c5e:	0798      	lsls	r0, r3, #30
 8002c60:	d514      	bpl.n	8002c8c <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c62:	0759      	lsls	r1, r3, #29
 8002c64:	d504      	bpl.n	8002c70 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c66:	4954      	ldr	r1, [pc, #336]	@ (8002db8 <HAL_RCC_ClockConfig+0x190>)
 8002c68:	688a      	ldr	r2, [r1, #8]
 8002c6a:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 8002c6e:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c70:	071a      	lsls	r2, r3, #28
 8002c72:	d504      	bpl.n	8002c7e <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c74:	4950      	ldr	r1, [pc, #320]	@ (8002db8 <HAL_RCC_ClockConfig+0x190>)
 8002c76:	688a      	ldr	r2, [r1, #8]
 8002c78:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 8002c7c:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c7e:	494e      	ldr	r1, [pc, #312]	@ (8002db8 <HAL_RCC_ClockConfig+0x190>)
 8002c80:	68a0      	ldr	r0, [r4, #8]
 8002c82:	688a      	ldr	r2, [r1, #8]
 8002c84:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8002c88:	4302      	orrs	r2, r0
 8002c8a:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c8c:	07df      	lsls	r7, r3, #31
 8002c8e:	d520      	bpl.n	8002cd2 <HAL_RCC_ClockConfig+0xaa>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c90:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c92:	4b49      	ldr	r3, [pc, #292]	@ (8002db8 <HAL_RCC_ClockConfig+0x190>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c94:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c96:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c98:	d07e      	beq.n	8002d98 <HAL_RCC_ClockConfig+0x170>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c9a:	2a02      	cmp	r2, #2
 8002c9c:	d077      	beq.n	8002d8e <HAL_RCC_ClockConfig+0x166>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c9e:	0799      	lsls	r1, r3, #30
 8002ca0:	d5d9      	bpl.n	8002c56 <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ca2:	4e45      	ldr	r6, [pc, #276]	@ (8002db8 <HAL_RCC_ClockConfig+0x190>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ca4:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ca8:	68b3      	ldr	r3, [r6, #8]
 8002caa:	f023 0303 	bic.w	r3, r3, #3
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002cb2:	f7fe fc87 	bl	80015c4 <HAL_GetTick>
 8002cb6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cb8:	e004      	b.n	8002cc4 <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cba:	f7fe fc83 	bl	80015c4 <HAL_GetTick>
 8002cbe:	1bc0      	subs	r0, r0, r7
 8002cc0:	4540      	cmp	r0, r8
 8002cc2:	d86c      	bhi.n	8002d9e <HAL_RCC_ClockConfig+0x176>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cc4:	68b3      	ldr	r3, [r6, #8]
 8002cc6:	6862      	ldr	r2, [r4, #4]
 8002cc8:	f003 030c 	and.w	r3, r3, #12
 8002ccc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002cd0:	d1f3      	bne.n	8002cba <HAL_RCC_ClockConfig+0x92>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cd2:	4a38      	ldr	r2, [pc, #224]	@ (8002db4 <HAL_RCC_ClockConfig+0x18c>)
 8002cd4:	6813      	ldr	r3, [r2, #0]
 8002cd6:	f003 030f 	and.w	r3, r3, #15
 8002cda:	42ab      	cmp	r3, r5
 8002cdc:	d909      	bls.n	8002cf2 <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cde:	6813      	ldr	r3, [r2, #0]
 8002ce0:	f023 030f 	bic.w	r3, r3, #15
 8002ce4:	432b      	orrs	r3, r5
 8002ce6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ce8:	6813      	ldr	r3, [r2, #0]
 8002cea:	f003 030f 	and.w	r3, r3, #15
 8002cee:	42ab      	cmp	r3, r5
 8002cf0:	d1b1      	bne.n	8002c56 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cf2:	6823      	ldr	r3, [r4, #0]
 8002cf4:	075a      	lsls	r2, r3, #29
 8002cf6:	d506      	bpl.n	8002d06 <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cf8:	492f      	ldr	r1, [pc, #188]	@ (8002db8 <HAL_RCC_ClockConfig+0x190>)
 8002cfa:	68e0      	ldr	r0, [r4, #12]
 8002cfc:	688a      	ldr	r2, [r1, #8]
 8002cfe:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 8002d02:	4302      	orrs	r2, r0
 8002d04:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d06:	071b      	lsls	r3, r3, #28
 8002d08:	d431      	bmi.n	8002d6e <HAL_RCC_ClockConfig+0x146>
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d0a:	492b      	ldr	r1, [pc, #172]	@ (8002db8 <HAL_RCC_ClockConfig+0x190>)
 8002d0c:	688b      	ldr	r3, [r1, #8]
 8002d0e:	f003 030c 	and.w	r3, r3, #12
 8002d12:	2b04      	cmp	r3, #4
 8002d14:	d039      	beq.n	8002d8a <HAL_RCC_ClockConfig+0x162>
 8002d16:	2b08      	cmp	r3, #8
 8002d18:	d118      	bne.n	8002d4c <HAL_RCC_ClockConfig+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d1a:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002d1c:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d1e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d22:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002d24:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
 8002d28:	d03b      	beq.n	8002da2 <HAL_RCC_ClockConfig+0x17a>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d2a:	4824      	ldr	r0, [pc, #144]	@ (8002dbc <HAL_RCC_ClockConfig+0x194>)
 8002d2c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002d30:	2300      	movs	r3, #0
 8002d32:	fba1 0100 	umull	r0, r1, r1, r0
 8002d36:	f7fd fa7f 	bl	8000238 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002d3a:	4b1f      	ldr	r3, [pc, #124]	@ (8002db8 <HAL_RCC_ClockConfig+0x190>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002d42:	3301      	adds	r3, #1
 8002d44:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8002d46:	fbb0 f3f3 	udiv	r3, r0, r3
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 8002d4a:	e000      	b.n	8002d4e <HAL_RCC_ClockConfig+0x126>
      sysclockfreq = HSI_VALUE;
 8002d4c:	4b1c      	ldr	r3, [pc, #112]	@ (8002dc0 <HAL_RCC_ClockConfig+0x198>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d4e:	4a1a      	ldr	r2, [pc, #104]	@ (8002db8 <HAL_RCC_ClockConfig+0x190>)
 8002d50:	4c1c      	ldr	r4, [pc, #112]	@ (8002dc4 <HAL_RCC_ClockConfig+0x19c>)
 8002d52:	6892      	ldr	r2, [r2, #8]
  HAL_InitTick(uwTickPrio);
 8002d54:	481c      	ldr	r0, [pc, #112]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1a0>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d56:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002d5a:	491c      	ldr	r1, [pc, #112]	@ (8002dcc <HAL_RCC_ClockConfig+0x1a4>)
  HAL_InitTick(uwTickPrio);
 8002d5c:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d5e:	5ca2      	ldrb	r2, [r4, r2]
 8002d60:	40d3      	lsrs	r3, r2
 8002d62:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 8002d64:	f7fe fbf2 	bl	800154c <HAL_InitTick>
  return HAL_OK;
 8002d68:	2000      	movs	r0, #0
}
 8002d6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d6e:	4a12      	ldr	r2, [pc, #72]	@ (8002db8 <HAL_RCC_ClockConfig+0x190>)
 8002d70:	6921      	ldr	r1, [r4, #16]
 8002d72:	6893      	ldr	r3, [r2, #8]
 8002d74:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8002d78:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d7c:	490e      	ldr	r1, [pc, #56]	@ (8002db8 <HAL_RCC_ClockConfig+0x190>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d7e:	6093      	str	r3, [r2, #8]
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d80:	688b      	ldr	r3, [r1, #8]
 8002d82:	f003 030c 	and.w	r3, r3, #12
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	d1c5      	bne.n	8002d16 <HAL_RCC_ClockConfig+0xee>
 8002d8a:	4b0c      	ldr	r3, [pc, #48]	@ (8002dbc <HAL_RCC_ClockConfig+0x194>)
 8002d8c:	e7df      	b.n	8002d4e <HAL_RCC_ClockConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d8e:	0198      	lsls	r0, r3, #6
 8002d90:	d487      	bmi.n	8002ca2 <HAL_RCC_ClockConfig+0x7a>
 8002d92:	e760      	b.n	8002c56 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8002d94:	2001      	movs	r0, #1
}
 8002d96:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d98:	039e      	lsls	r6, r3, #14
 8002d9a:	d482      	bmi.n	8002ca2 <HAL_RCC_ClockConfig+0x7a>
 8002d9c:	e75b      	b.n	8002c56 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8002d9e:	2003      	movs	r0, #3
 8002da0:	e75a      	b.n	8002c58 <HAL_RCC_ClockConfig+0x30>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002da2:	4807      	ldr	r0, [pc, #28]	@ (8002dc0 <HAL_RCC_ClockConfig+0x198>)
 8002da4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002da8:	fba1 0100 	umull	r0, r1, r1, r0
 8002dac:	f7fd fa44 	bl	8000238 <__aeabi_uldivmod>
 8002db0:	e7c3      	b.n	8002d3a <HAL_RCC_ClockConfig+0x112>
 8002db2:	bf00      	nop
 8002db4:	40023c00 	.word	0x40023c00
 8002db8:	40023800 	.word	0x40023800
 8002dbc:	017d7840 	.word	0x017d7840
 8002dc0:	00f42400 	.word	0x00f42400
 8002dc4:	08003f1c 	.word	0x08003f1c
 8002dc8:	200000d8 	.word	0x200000d8
 8002dcc:	200000d0 	.word	0x200000d0

08002dd0 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002dd0:	6803      	ldr	r3, [r0, #0]
{
 8002dd2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002dd6:	f013 0601 	ands.w	r6, r3, #1
{
 8002dda:	b083      	sub	sp, #12
 8002ddc:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002dde:	d00b      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002de0:	4a94      	ldr	r2, [pc, #592]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002de2:	6891      	ldr	r1, [r2, #8]
 8002de4:	f421 0100 	bic.w	r1, r1, #8388608	@ 0x800000
 8002de8:	6091      	str	r1, [r2, #8]
 8002dea:	6b46      	ldr	r6, [r0, #52]	@ 0x34
 8002dec:	6891      	ldr	r1, [r2, #8]
 8002dee:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002df0:	fab6 f686 	clz	r6, r6
 8002df4:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002df6:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002df8:	f413 2500 	ands.w	r5, r3, #524288	@ 0x80000
 8002dfc:	d010      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x50>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002dfe:	498d      	ldr	r1, [pc, #564]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e00:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 8002e02:	f8d1 208c 	ldr.w	r2, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002e06:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e0a:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8002e0e:	ea42 0205 	orr.w	r2, r2, r5
 8002e12:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002e16:	f000 8239 	beq.w	800328c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002e1a:	fab5 f585 	clz	r5, r5
 8002e1e:	096d      	lsrs	r5, r5, #5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002e20:	02d9      	lsls	r1, r3, #11
 8002e22:	d510      	bpl.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e24:	4883      	ldr	r0, [pc, #524]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e26:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8002e28:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002e2c:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e30:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8002e34:	ea42 0201 	orr.w	r2, r2, r1
 8002e38:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002e3c:	f000 8229 	beq.w	8003292 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8002e40:	2900      	cmp	r1, #0
 8002e42:	bf08      	it	eq
 8002e44:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8002e46:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8002e4a:	bf18      	it	ne
 8002e4c:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e4e:	069a      	lsls	r2, r3, #26
 8002e50:	f100 81d7 	bmi.w	8003202 <HAL_RCCEx_PeriphCLKConfig+0x432>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002e54:	06da      	lsls	r2, r3, #27
 8002e56:	d50c      	bpl.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002e58:	4a76      	ldr	r2, [pc, #472]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e5a:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
 8002e5e:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 8002e62:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
 8002e66:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
 8002e6a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8002e6c:	4301      	orrs	r1, r0
 8002e6e:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e72:	045f      	lsls	r7, r3, #17
 8002e74:	d508      	bpl.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e76:	496f      	ldr	r1, [pc, #444]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e78:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8002e7a:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002e7e:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8002e82:	4302      	orrs	r2, r0
 8002e84:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e88:	0418      	lsls	r0, r3, #16
 8002e8a:	d508      	bpl.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e8c:	4969      	ldr	r1, [pc, #420]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e8e:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8002e90:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002e94:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 8002e98:	4302      	orrs	r2, r0
 8002e9a:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e9e:	03d9      	lsls	r1, r3, #15
 8002ea0:	d508      	bpl.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ea2:	4964      	ldr	r1, [pc, #400]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ea4:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8002ea6:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002eaa:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8002eae:	4302      	orrs	r2, r0
 8002eb0:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002eb4:	039a      	lsls	r2, r3, #14
 8002eb6:	d508      	bpl.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002eb8:	495e      	ldr	r1, [pc, #376]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002eba:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8002ebc:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002ec0:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8002ec4:	4302      	orrs	r2, r0
 8002ec6:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002eca:	065f      	lsls	r7, r3, #25
 8002ecc:	d508      	bpl.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ece:	4959      	ldr	r1, [pc, #356]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ed0:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8002ed2:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002ed6:	f022 0203 	bic.w	r2, r2, #3
 8002eda:	4302      	orrs	r2, r0
 8002edc:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ee0:	0618      	lsls	r0, r3, #24
 8002ee2:	d508      	bpl.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ee4:	4953      	ldr	r1, [pc, #332]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ee6:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8002ee8:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002eec:	f022 020c 	bic.w	r2, r2, #12
 8002ef0:	4302      	orrs	r2, r0
 8002ef2:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ef6:	05d9      	lsls	r1, r3, #23
 8002ef8:	d508      	bpl.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002efa:	494e      	ldr	r1, [pc, #312]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002efc:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8002efe:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002f02:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8002f06:	4302      	orrs	r2, r0
 8002f08:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f0c:	059a      	lsls	r2, r3, #22
 8002f0e:	d508      	bpl.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f10:	4948      	ldr	r1, [pc, #288]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f12:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8002f14:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002f18:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8002f1c:	4302      	orrs	r2, r0
 8002f1e:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f22:	055f      	lsls	r7, r3, #21
 8002f24:	d508      	bpl.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f26:	4943      	ldr	r1, [pc, #268]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f28:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8002f2a:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002f2e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002f32:	4302      	orrs	r2, r0
 8002f34:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002f38:	0518      	lsls	r0, r3, #20
 8002f3a:	d508      	bpl.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002f3c:	493d      	ldr	r1, [pc, #244]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f3e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002f40:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002f44:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002f48:	4302      	orrs	r2, r0
 8002f4a:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002f4e:	04d9      	lsls	r1, r3, #19
 8002f50:	d508      	bpl.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002f52:	4938      	ldr	r1, [pc, #224]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f54:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8002f56:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002f5a:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8002f5e:	4302      	orrs	r2, r0
 8002f60:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002f64:	049a      	lsls	r2, r3, #18
 8002f66:	d508      	bpl.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002f68:	4932      	ldr	r1, [pc, #200]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f6a:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8002f6c:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002f70:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8002f74:	4302      	orrs	r2, r0
 8002f76:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002f7a:	025f      	lsls	r7, r3, #9
 8002f7c:	d508      	bpl.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002f7e:	492d      	ldr	r1, [pc, #180]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f80:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8002f82:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002f86:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8002f8a:	4302      	orrs	r2, r0
 8002f8c:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002f90:	0298      	lsls	r0, r3, #10
 8002f92:	d50c      	bpl.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002f94:	4927      	ldr	r1, [pc, #156]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f96:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8002f98:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8002f9c:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002fa0:	f022 6200 	bic.w	r2, r2, #134217728	@ 0x8000000
      pllsaiused = 1;
 8002fa4:	bf08      	it	eq
 8002fa6:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002fa8:	4302      	orrs	r2, r0
 8002faa:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8002fae:	f013 0f08 	tst.w	r3, #8
 8002fb2:	bf18      	it	ne
 8002fb4:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002fb6:	0359      	lsls	r1, r3, #13
 8002fb8:	d508      	bpl.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002fba:	491e      	ldr	r1, [pc, #120]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002fbc:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8002fbe:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002fc2:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002fc6:	4302      	orrs	r2, r0
 8002fc8:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002fcc:	021a      	lsls	r2, r3, #8
 8002fce:	d509      	bpl.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002fd0:	4918      	ldr	r1, [pc, #96]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002fd2:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8002fd6:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002fda:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8002fde:	4302      	orrs	r2, r0
 8002fe0:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002fe4:	015f      	lsls	r7, r3, #5
 8002fe6:	d509      	bpl.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002fe8:	4912      	ldr	r1, [pc, #72]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002fea:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8002fee:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002ff2:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8002ff6:	4302      	orrs	r2, r0
 8002ff8:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ffc:	0118      	lsls	r0, r3, #4
 8002ffe:	d509      	bpl.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003000:	490c      	ldr	r1, [pc, #48]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003002:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8003006:	f8d1 208c 	ldr.w	r2, [r1, #140]	@ 0x8c
 800300a:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 800300e:	4302      	orrs	r2, r0
 8003010:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003014:	00d9      	lsls	r1, r3, #3
 8003016:	d46b      	bmi.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x320>
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003018:	2e01      	cmp	r6, #1
 800301a:	d001      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x250>
 800301c:	019a      	lsls	r2, r3, #6
 800301e:	d561      	bpl.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003020:	4e04      	ldr	r6, [pc, #16]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003022:	6833      	ldr	r3, [r6, #0]
 8003024:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003028:	6033      	str	r3, [r6, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800302a:	f7fe facb 	bl	80015c4 <HAL_GetTick>
 800302e:	4607      	mov	r7, r0

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003030:	e008      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003032:	bf00      	nop
 8003034:	40023800 	.word	0x40023800
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003038:	f7fe fac4 	bl	80015c4 <HAL_GetTick>
 800303c:	1bc3      	subs	r3, r0, r7
 800303e:	2b64      	cmp	r3, #100	@ 0x64
 8003040:	f200 80db 	bhi.w	80031fa <HAL_RCCEx_PeriphCLKConfig+0x42a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003044:	6833      	ldr	r3, [r6, #0]
 8003046:	011b      	lsls	r3, r3, #4
 8003048:	d4f6      	bmi.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x268>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800304a:	6823      	ldr	r3, [r4, #0]
 800304c:	07df      	lsls	r7, r3, #31
 800304e:	d512      	bpl.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003050:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8003052:	b982      	cbnz	r2, 8003076 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003054:	f8d6 2084 	ldr.w	r2, [r6, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003058:	f8d6 1084 	ldr.w	r1, [r6, #132]	@ 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800305c:	f402 3240 	and.w	r2, r2, #196608	@ 0x30000
 8003060:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 8003064:	430a      	orrs	r2, r1
 8003066:	6861      	ldr	r1, [r4, #4]
 8003068:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 800306c:	68a1      	ldr	r1, [r4, #8]
 800306e:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8003072:	f8c6 2084 	str.w	r2, [r6, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003076:	031e      	lsls	r6, r3, #12
 8003078:	d504      	bpl.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800307a:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800307c:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 8003080:	f000 8118 	beq.w	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003084:	02d8      	lsls	r0, r3, #11
 8003086:	d504      	bpl.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003088:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800308a:	f5b2 0f80 	cmp.w	r2, #4194304	@ 0x400000
 800308e:	f000 8111 	beq.w	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003092:	01d9      	lsls	r1, r3, #7
 8003094:	d511      	bpl.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x2ea>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003096:	49a8      	ldr	r1, [pc, #672]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8003098:	f8d1 2084 	ldr.w	r2, [r1, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800309c:	f8d1 0084 	ldr.w	r0, [r1, #132]	@ 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80030a0:	f002 6270 	and.w	r2, r2, #251658240	@ 0xf000000
 80030a4:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 80030a8:	4302      	orrs	r2, r0
 80030aa:	6860      	ldr	r0, [r4, #4]
 80030ac:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 80030b0:	6920      	ldr	r0, [r4, #16]
 80030b2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80030b6:	f8c1 2084 	str.w	r2, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80030ba:	019a      	lsls	r2, r3, #6
 80030bc:	f100 80eb 	bmi.w	8003296 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80030c0:	4e9d      	ldr	r6, [pc, #628]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80030c2:	6833      	ldr	r3, [r6, #0]
 80030c4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80030c8:	6033      	str	r3, [r6, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030ca:	f7fe fa7b 	bl	80015c4 <HAL_GetTick>
 80030ce:	4607      	mov	r7, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030d0:	e005      	b.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x30e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80030d2:	f7fe fa77 	bl	80015c4 <HAL_GetTick>
 80030d6:	1bc0      	subs	r0, r0, r7
 80030d8:	2864      	cmp	r0, #100	@ 0x64
 80030da:	f200 808e 	bhi.w	80031fa <HAL_RCCEx_PeriphCLKConfig+0x42a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030de:	6833      	ldr	r3, [r6, #0]
 80030e0:	011b      	lsls	r3, r3, #4
 80030e2:	d5f6      	bpl.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x302>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80030e4:	2d01      	cmp	r5, #1
 80030e6:	d00e      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x336>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80030e8:	2000      	movs	r0, #0
}
 80030ea:	b003      	add	sp, #12
 80030ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80030f0:	4991      	ldr	r1, [pc, #580]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80030f2:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 80030f6:	f8d1 208c 	ldr.w	r2, [r1, #140]	@ 0x8c
 80030fa:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 80030fe:	4302      	orrs	r2, r0
 8003100:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
 8003104:	e788      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x248>
    __HAL_RCC_PLLSAI_DISABLE();
 8003106:	4d8c      	ldr	r5, [pc, #560]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8003108:	682b      	ldr	r3, [r5, #0]
 800310a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800310e:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8003110:	f7fe fa58 	bl	80015c4 <HAL_GetTick>
 8003114:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003116:	e004      	b.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x352>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003118:	f7fe fa54 	bl	80015c4 <HAL_GetTick>
 800311c:	1b80      	subs	r0, r0, r6
 800311e:	2864      	cmp	r0, #100	@ 0x64
 8003120:	d86b      	bhi.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x42a>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003122:	682b      	ldr	r3, [r5, #0]
 8003124:	009f      	lsls	r7, r3, #2
 8003126:	d4f7      	bmi.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x348>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003128:	6823      	ldr	r3, [r4, #0]
 800312a:	031d      	lsls	r5, r3, #12
 800312c:	f140 80fb 	bpl.w	8003326 <HAL_RCCEx_PeriphCLKConfig+0x556>
 8003130:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8003132:	2a00      	cmp	r2, #0
 8003134:	f040 80f7 	bne.w	8003326 <HAL_RCCEx_PeriphCLKConfig+0x556>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003138:	497f      	ldr	r1, [pc, #508]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800313a:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800313e:	f8d1 0088 	ldr.w	r0, [r1, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003142:	f402 3240 	and.w	r2, r2, #196608	@ 0x30000
 8003146:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 800314a:	4302      	orrs	r2, r0
 800314c:	6960      	ldr	r0, [r4, #20]
 800314e:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8003152:	69a0      	ldr	r0, [r4, #24]
 8003154:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8003158:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800315c:	f8d1 208c 	ldr.w	r2, [r1, #140]	@ 0x8c
 8003160:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003162:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 8003166:	3801      	subs	r0, #1
 8003168:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800316c:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003170:	0299      	lsls	r1, r3, #10
 8003172:	d515      	bpl.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003174:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8003176:	f1b2 6f00 	cmp.w	r2, #134217728	@ 0x8000000
 800317a:	d111      	bne.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800317c:	496e      	ldr	r1, [pc, #440]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800317e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003182:	f8d1 0088 	ldr.w	r0, [r1, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003186:	f002 6270 	and.w	r2, r2, #251658240	@ 0xf000000
 800318a:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 800318e:	4302      	orrs	r2, r0
 8003190:	6960      	ldr	r0, [r4, #20]
 8003192:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8003196:	6a20      	ldr	r0, [r4, #32]
 8003198:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800319c:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80031a0:	071a      	lsls	r2, r3, #28
 80031a2:	d519      	bpl.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x408>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80031a4:	4a64      	ldr	r2, [pc, #400]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x568>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80031a6:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80031a8:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80031ac:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80031b0:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 80031b4:	69e0      	ldr	r0, [r4, #28]
 80031b6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031ba:	430b      	orrs	r3, r1
 80031bc:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 80031c0:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 80031c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80031c8:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 80031cc:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80031ce:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80031d2:	430b      	orrs	r3, r1
 80031d4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 80031d8:	4c57      	ldr	r4, [pc, #348]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80031da:	6823      	ldr	r3, [r4, #0]
 80031dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031e0:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80031e2:	f7fe f9ef 	bl	80015c4 <HAL_GetTick>
 80031e6:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80031e8:	6823      	ldr	r3, [r4, #0]
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	f53f af7c 	bmi.w	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x318>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80031f0:	f7fe f9e8 	bl	80015c4 <HAL_GetTick>
 80031f4:	1b40      	subs	r0, r0, r5
 80031f6:	2864      	cmp	r0, #100	@ 0x64
 80031f8:	d9f6      	bls.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x418>
        return HAL_TIMEOUT;
 80031fa:	2003      	movs	r0, #3
}
 80031fc:	b003      	add	sp, #12
 80031fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8003202:	4b4d      	ldr	r3, [pc, #308]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x568>)
    PWR->CR1 |= PWR_CR1_DBP;
 8003204:	4f4d      	ldr	r7, [pc, #308]	@ (800333c <HAL_RCCEx_PeriphCLKConfig+0x56c>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8003206:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003208:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800320c:	641a      	str	r2, [r3, #64]	@ 0x40
 800320e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003210:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003214:	9301      	str	r3, [sp, #4]
 8003216:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800321e:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8003220:	f7fe f9d0 	bl	80015c4 <HAL_GetTick>
 8003224:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003226:	e005      	b.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x464>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003228:	f7fe f9cc 	bl	80015c4 <HAL_GetTick>
 800322c:	eba0 0008 	sub.w	r0, r0, r8
 8003230:	2864      	cmp	r0, #100	@ 0x64
 8003232:	d8e2      	bhi.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x42a>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	05db      	lsls	r3, r3, #23
 8003238:	d5f6      	bpl.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x458>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800323a:	4f3f      	ldr	r7, [pc, #252]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x568>)
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800323c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800323e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003240:	f403 7140 	and.w	r1, r3, #768	@ 0x300
 8003244:	f412 7240 	ands.w	r2, r2, #768	@ 0x300
 8003248:	d010      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x49c>
 800324a:	428a      	cmp	r2, r1
 800324c:	d00e      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x49c>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800324e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8003250:	6f38      	ldr	r0, [r7, #112]	@ 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003252:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8003256:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 800325a:	6738      	str	r0, [r7, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800325c:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800325e:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
 8003262:	6738      	str	r0, [r7, #112]	@ 0x70
      RCC->BDCR = tmpreg0;
 8003264:	673a      	str	r2, [r7, #112]	@ 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003266:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003268:	07d0      	lsls	r0, r2, #31
 800326a:	d448      	bmi.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x52e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800326c:	f5b1 7f40 	cmp.w	r1, #768	@ 0x300
 8003270:	d03c      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x51c>
 8003272:	4931      	ldr	r1, [pc, #196]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8003274:	688a      	ldr	r2, [r1, #8]
 8003276:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 800327a:	608a      	str	r2, [r1, #8]
 800327c:	4a2e      	ldr	r2, [pc, #184]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800327e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003282:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8003284:	430b      	orrs	r3, r1
 8003286:	6713      	str	r3, [r2, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003288:	6823      	ldr	r3, [r4, #0]
 800328a:	e5e3      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x84>
  uint32_t pllsaiused = 0;
 800328c:	2500      	movs	r5, #0
      plli2sused = 1;
 800328e:	2601      	movs	r6, #1
 8003290:	e5c6      	b.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x50>
      plli2sused = 1;
 8003292:	2601      	movs	r6, #1
 8003294:	e5d7      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x76>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003296:	6923      	ldr	r3, [r4, #16]
 8003298:	6861      	ldr	r1, [r4, #4]
 800329a:	041b      	lsls	r3, r3, #16
 800329c:	68e2      	ldr	r2, [r4, #12]
 800329e:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80032a2:	68a1      	ldr	r1, [r4, #8]
 80032a4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80032a8:	4a23      	ldr	r2, [pc, #140]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80032aa:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80032ae:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
 80032b2:	e705      	b.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80032b4:	4920      	ldr	r1, [pc, #128]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80032b6:	f8d1 2084 	ldr.w	r2, [r1, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80032ba:	f8d1 0084 	ldr.w	r0, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80032be:	f402 3240 	and.w	r2, r2, #196608	@ 0x30000
 80032c2:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 80032c6:	4302      	orrs	r2, r0
 80032c8:	6860      	ldr	r0, [r4, #4]
 80032ca:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 80032ce:	68e0      	ldr	r0, [r4, #12]
 80032d0:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 80032d4:	f8c1 2084 	str.w	r2, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80032d8:	f8d1 008c 	ldr.w	r0, [r1, #140]	@ 0x8c
 80032dc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80032de:	f020 001f 	bic.w	r0, r0, #31
 80032e2:	3a01      	subs	r2, #1
 80032e4:	4302      	orrs	r2, r0
 80032e6:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
 80032ea:	e6d2      	b.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032ec:	4812      	ldr	r0, [pc, #72]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80032ee:	4914      	ldr	r1, [pc, #80]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 80032f0:	6882      	ldr	r2, [r0, #8]
 80032f2:	4019      	ands	r1, r3
 80032f4:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 80032f8:	430a      	orrs	r2, r1
 80032fa:	6082      	str	r2, [r0, #8]
 80032fc:	e7be      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x4ac>
        tickstart = HAL_GetTick();
 80032fe:	f7fe f961 	bl	80015c4 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003302:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8003306:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003308:	e006      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x548>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800330a:	f7fe f95b 	bl	80015c4 <HAL_GetTick>
 800330e:	eba0 0008 	sub.w	r0, r0, r8
 8003312:	4548      	cmp	r0, r9
 8003314:	f63f af71 	bhi.w	80031fa <HAL_RCCEx_PeriphCLKConfig+0x42a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003318:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800331a:	0799      	lsls	r1, r3, #30
 800331c:	d5f5      	bpl.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x53a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800331e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003320:	f403 7140 	and.w	r1, r3, #768	@ 0x300
 8003324:	e7a2      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x49c>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003326:	02d8      	lsls	r0, r3, #11
 8003328:	f57f af22 	bpl.w	8003170 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800332c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800332e:	2a00      	cmp	r2, #0
 8003330:	f47f af1e 	bne.w	8003170 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 8003334:	e700      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003336:	bf00      	nop
 8003338:	40023800 	.word	0x40023800
 800333c:	40007000 	.word	0x40007000
 8003340:	0ffffcff 	.word	0x0ffffcff

08003344 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8003344:	f5b0 2f00 	cmp.w	r0, #524288	@ 0x80000
 8003348:	d036      	beq.n	80033b8 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
        break;
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800334a:	f5b0 1f80 	cmp.w	r0, #1048576	@ 0x100000
 800334e:	d131      	bne.n	80033b4 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
  {
    saiclocksource = RCC->DCKCFGR1;
 8003350:	4a37      	ldr	r2, [pc, #220]	@ (8003430 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 8003352:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8003356:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
    switch (saiclocksource)
 800335a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800335e:	d044      	beq.n	80033ea <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8003360:	d838      	bhi.n	80033d4 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
 8003362:	2b00      	cmp	r3, #0
 8003364:	d043      	beq.n	80033ee <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8003366:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800336a:	d123      	bne.n	80033b4 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
      }
    case RCC_DCKCFGR1_SAI2SEL_0: /* PLLI2S is the clock source for SAI2 */
      {
        /* Configure the PLLI2S division factor */
        /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800336c:	6853      	ldr	r3, [r2, #4]
 800336e:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
        {
          /* In Case the PLL Source is HSI (Internal Clock) */
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003372:	6853      	ldr	r3, [r2, #4]
 8003374:	bf08      	it	eq
 8003376:	492f      	ldreq	r1, [pc, #188]	@ (8003434 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>)
        }
        else
        {
          /* In Case the PLL Source is HSE (External Clock) */
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003378:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800337c:	bf18      	it	ne
 800337e:	492e      	ldrne	r1, [pc, #184]	@ (8003438 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>)
 8003380:	fbb1 f1f3 	udiv	r1, r1, r3
        }

        /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
        /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8003384:	4b2a      	ldr	r3, [pc, #168]	@ (8003430 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 8003386:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800338a:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800338e:	f3c2 6203 	ubfx	r2, r2, #24, #4

        /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8003392:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8003396:	f3c0 1088 	ubfx	r0, r0, #6, #9
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800339a:	f003 031f 	and.w	r3, r3, #31
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800339e:	fb01 f000 	mul.w	r0, r1, r0
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80033a2:	3301      	adds	r3, #1
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80033a4:	fbb0 f0f2 	udiv	r0, r0, r2
        frequency = frequency/(tmpreg);
 80033a8:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 80033ac:	4770      	bx	lr
    switch (saiclocksource)
 80033ae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80033b2:	d012      	beq.n	80033da <HAL_RCCEx_GetPeriphCLKFreq+0x96>
 80033b4:	2000      	movs	r0, #0
 80033b6:	4770      	bx	lr
    saiclocksource = RCC->DCKCFGR1;
 80033b8:	4a1d      	ldr	r2, [pc, #116]	@ (8003430 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 80033ba:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80033be:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    switch (saiclocksource)
 80033c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033c6:	d010      	beq.n	80033ea <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80033c8:	d8f1      	bhi.n	80033ae <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 80033ca:	b183      	cbz	r3, 80033ee <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 80033cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033d0:	d0cc      	beq.n	800336c <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 80033d2:	e7ef      	b.n	80033b4 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
    switch (saiclocksource)
 80033d4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80033d8:	d1ec      	bne.n	80033b4 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
        break;
      }
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
    case RCC_DCKCFGR1_SAI2SEL: /* HSI or HSE is the clock source for SAI2 */
      {
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80033da:	6852      	ldr	r2, [r2, #4]
          frequency = HSI_VALUE;
 80033dc:	4b15      	ldr	r3, [pc, #84]	@ (8003434 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>)
 80033de:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
 80033e2:	4815      	ldr	r0, [pc, #84]	@ (8003438 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>)
 80033e4:	bf08      	it	eq
 80033e6:	4618      	moveq	r0, r3
 80033e8:	4770      	bx	lr
        frequency = EXTERNAL_CLOCK_VALUE;
 80033ea:	4814      	ldr	r0, [pc, #80]	@ (800343c <HAL_RCCEx_GetPeriphCLKFreq+0xf8>)
      }
    }
  }

  return frequency;
}
 80033ec:	4770      	bx	lr
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80033ee:	6853      	ldr	r3, [r2, #4]
 80033f0:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80033f4:	6853      	ldr	r3, [r2, #4]
 80033f6:	bf08      	it	eq
 80033f8:	490e      	ldreq	r1, [pc, #56]	@ (8003434 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>)
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80033fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033fe:	bf18      	it	ne
 8003400:	490d      	ldrne	r1, [pc, #52]	@ (8003438 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>)
 8003402:	fbb1 f1f3 	udiv	r1, r1, r3
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8003406:	4b0a      	ldr	r3, [pc, #40]	@ (8003430 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 8003408:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800340c:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8003410:	f3c2 6203 	ubfx	r2, r2, #24, #4
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8003414:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8003418:	f3c0 1088 	ubfx	r0, r0, #6, #9
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800341c:	f3c3 2304 	ubfx	r3, r3, #8, #5
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8003420:	fb01 f000 	mul.w	r0, r1, r0
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8003424:	3301      	adds	r3, #1
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8003426:	fbb0 f0f2 	udiv	r0, r0, r2
        frequency = frequency/(tmpreg);
 800342a:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 800342e:	4770      	bx	lr
 8003430:	40023800 	.word	0x40023800
 8003434:	00f42400 	.word	0x00f42400
 8003438:	017d7840 	.word	0x017d7840
 800343c:	00bb8000 	.word	0x00bb8000

08003440 <HAL_SAI_Init>:
  uint32_t tmpregisterGCR = 0;
  uint32_t ckstr_bits = 0;
  uint32_t syncen_bits = 0;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8003440:	2800      	cmp	r0, #0
 8003442:	f000 80f7 	beq.w	8003634 <HAL_SAI_Init+0x1f4>
{
 8003446:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8003448:	f890 307d 	ldrb.w	r3, [r0, #125]	@ 0x7d
 800344c:	4604      	mov	r4, r0
 800344e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003452:	2b00      	cmp	r3, #0
 8003454:	f000 80e3 	beq.w	800361e <HAL_SAI_Init+0x1de>
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8003458:	4b77      	ldr	r3, [pc, #476]	@ (8003638 <HAL_SAI_Init+0x1f8>)
  hsai->State = HAL_SAI_STATE_BUSY;
 800345a:	2002      	movs	r0, #2
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800345c:	4977      	ldr	r1, [pc, #476]	@ (800363c <HAL_SAI_Init+0x1fc>)
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800345e:	6822      	ldr	r2, [r4, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8003460:	681b      	ldr	r3, [r3, #0]
  hsai->State = HAL_SAI_STATE_BUSY;
 8003462:	f884 007d 	strb.w	r0, [r4, #125]	@ 0x7d
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8003466:	fba1 1303 	umull	r1, r3, r1, r3
  __HAL_SAI_DISABLE(hsai);
 800346a:	6811      	ldr	r1, [r2, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800346c:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
 800346e:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8003472:	4083      	lsls	r3, r0
  __HAL_SAI_DISABLE(hsai);
 8003474:	6011      	str	r1, [r2, #0]
 8003476:	e002      	b.n	800347e <HAL_SAI_Init+0x3e>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
      status = HAL_TIMEOUT;
      break;
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8003478:	6811      	ldr	r1, [r2, #0]
 800347a:	03cd      	lsls	r5, r1, #15
 800347c:	d507      	bpl.n	800348e <HAL_SAI_Init+0x4e>
    if (count-- == 0)
 800347e:	3b01      	subs	r3, #1
 8003480:	d2fa      	bcs.n	8003478 <HAL_SAI_Init+0x38>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8003482:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8003486:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800348a:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  switch (hsai->Init.SynchroExt)
 800348e:	68e3      	ldr	r3, [r4, #12]
 8003490:	2b01      	cmp	r3, #1
 8003492:	f000 80c1 	beq.w	8003618 <HAL_SAI_Init+0x1d8>
 8003496:	2b02      	cmp	r3, #2
 8003498:	bf0b      	itete	eq
 800349a:	2021      	moveq	r0, #33	@ 0x21
 800349c:	2001      	movne	r0, #1
 800349e:	2120      	moveq	r1, #32
 80034a0:	2100      	movne	r1, #0
  switch (hsai->Init.Synchro)
 80034a2:	68a3      	ldr	r3, [r4, #8]
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d058      	beq.n	800355a <HAL_SAI_Init+0x11a>
 80034a8:	2b03      	cmp	r3, #3
 80034aa:	d055      	beq.n	8003558 <HAL_SAI_Init+0x118>
 80034ac:	f1a3 0301 	sub.w	r3, r3, #1
 80034b0:	fab3 f383 	clz	r3, r3
 80034b4:	095b      	lsrs	r3, r3, #5
 80034b6:	029d      	lsls	r5, r3, #10
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80034b8:	4b61      	ldr	r3, [pc, #388]	@ (8003640 <HAL_SAI_Init+0x200>)
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80034ba:	69e0      	ldr	r0, [r4, #28]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80034bc:	429a      	cmp	r2, r3
 80034be:	d015      	beq.n	80034ec <HAL_SAI_Init+0xac>
 80034c0:	3320      	adds	r3, #32
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d012      	beq.n	80034ec <HAL_SAI_Init+0xac>
    SAI2->GCR = tmpregisterGCR;
 80034c6:	4b5f      	ldr	r3, [pc, #380]	@ (8003644 <HAL_SAI_Init+0x204>)
 80034c8:	f8c3 1c00 	str.w	r1, [r3, #3072]	@ 0xc00
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80034cc:	2800      	cmp	r0, #0
 80034ce:	d047      	beq.n	8003560 <HAL_SAI_Init+0x120>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80034d0:	4b5d      	ldr	r3, [pc, #372]	@ (8003648 <HAL_SAI_Init+0x208>)
 80034d2:	429a      	cmp	r2, r3
 80034d4:	f000 80a8 	beq.w	8003628 <HAL_SAI_Init+0x1e8>
 80034d8:	3320      	adds	r3, #32
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	fab3 f383 	clz	r3, r3
 80034e0:	095b      	lsrs	r3, r3, #5
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f040 80a0 	bne.w	8003628 <HAL_SAI_Init+0x1e8>
 80034e8:	4619      	mov	r1, r3
 80034ea:	e023      	b.n	8003534 <HAL_SAI_Init+0xf4>
    SAI1->GCR = tmpregisterGCR;
 80034ec:	4b55      	ldr	r3, [pc, #340]	@ (8003644 <HAL_SAI_Init+0x204>)
 80034ee:	f8c3 1800 	str.w	r1, [r3, #2048]	@ 0x800
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80034f2:	b3a8      	cbz	r0, 8003560 <HAL_SAI_Init+0x120>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80034f4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80034f8:	f7ff ff24 	bl	8003344 <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80034fc:	6822      	ldr	r2, [r4, #0]
 80034fe:	4b52      	ldr	r3, [pc, #328]	@ (8003648 <HAL_SAI_Init+0x208>)
 8003500:	429a      	cmp	r2, r3
 8003502:	f000 8091 	beq.w	8003628 <HAL_SAI_Init+0x1e8>
 8003506:	3320      	adds	r3, #32
 8003508:	429a      	cmp	r2, r3
 800350a:	f000 808d 	beq.w	8003628 <HAL_SAI_Init+0x1e8>
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800350e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003512:	69e1      	ldr	r1, [r4, #28]
 8003514:	0043      	lsls	r3, r0, #1
 8003516:	0249      	lsls	r1, r1, #9
 8003518:	fbb3 f3f1 	udiv	r3, r3, r1
    hsai->Init.Mckdiv = tmpval / 10;
 800351c:	494b      	ldr	r1, [pc, #300]	@ (800364c <HAL_SAI_Init+0x20c>)
 800351e:	fba1 0103 	umull	r0, r1, r1, r3
 8003522:	08c9      	lsrs	r1, r1, #3
    if ((tmpval % 10) > 8)
 8003524:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8003528:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 800352c:	2b09      	cmp	r3, #9
      hsai->Init.Mckdiv += 1;
 800352e:	bf08      	it	eq
 8003530:	3101      	addeq	r1, #1
 8003532:	460b      	mov	r3, r1
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8003534:	6b26      	ldr	r6, [r4, #48]	@ 0x30
    hsai->Init.Mckdiv = tmpval / 10;
 8003536:	6223      	str	r3, [r4, #32]
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8003538:	2e04      	cmp	r6, #4
 800353a:	d113      	bne.n	8003564 <HAL_SAI_Init+0x124>
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800353c:	6863      	ldr	r3, [r4, #4]
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800353e:	0849      	lsrs	r1, r1, #1
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8003540:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003542:	f033 0702 	bics.w	r7, r3, #2
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8003546:	6221      	str	r1, [r4, #32]
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003548:	d011      	beq.n	800356e <HAL_SAI_Init+0x12e>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800354a:	f1a0 0001 	sub.w	r0, r0, #1
 800354e:	fab0 f080 	clz	r0, r0
 8003552:	0940      	lsrs	r0, r0, #5
 8003554:	0240      	lsls	r0, r0, #9
 8003556:	e00e      	b.n	8003576 <HAL_SAI_Init+0x136>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8003558:	4601      	mov	r1, r0
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800355a:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 800355e:	e7ab      	b.n	80034b8 <HAL_SAI_Init+0x78>
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003560:	6b26      	ldr	r6, [r4, #48]	@ 0x30
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8003562:	6a21      	ldr	r1, [r4, #32]
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003564:	6863      	ldr	r3, [r4, #4]
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8003566:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003568:	f033 0702 	bics.w	r7, r3, #2
 800356c:	d1ed      	bne.n	800354a <HAL_SAI_Init+0x10a>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800356e:	3801      	subs	r0, #1
 8003570:	bf18      	it	ne
 8003572:	2001      	movne	r0, #1
 8003574:	0240      	lsls	r0, r0, #9
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003576:	6b67      	ldr	r7, [r4, #52]	@ 0x34
 8003578:	433b      	orrs	r3, r7
 800357a:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
 800357c:	433b      	orrs	r3, r7
 800357e:	6a67      	ldr	r7, [r4, #36]	@ 0x24
 8003580:	433b      	orrs	r3, r7
 8003582:	6927      	ldr	r7, [r4, #16]
 8003584:	433b      	orrs	r3, r7
 8003586:	6967      	ldr	r7, [r4, #20]
 8003588:	433b      	orrs	r3, r7
 800358a:	432b      	orrs	r3, r5
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800358c:	4d30      	ldr	r5, [pc, #192]	@ (8003650 <HAL_SAI_Init+0x210>)
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800358e:	4333      	orrs	r3, r6
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8003590:	6816      	ldr	r6, [r2, #0]
 8003592:	4035      	ands	r5, r6
 8003594:	6015      	str	r5, [r2, #0]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003596:	6815      	ldr	r5, [r2, #0]
 8003598:	432b      	orrs	r3, r5
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800359a:	4d2e      	ldr	r5, [pc, #184]	@ (8003654 <HAL_SAI_Init+0x214>)
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800359c:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80035a0:	69a1      	ldr	r1, [r4, #24]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80035a2:	4303      	orrs	r3, r0
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80035a4:	482c      	ldr	r0, [pc, #176]	@ (8003658 <HAL_SAI_Init+0x218>)
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80035a6:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80035a8:	6853      	ldr	r3, [r2, #4]
 80035aa:	401d      	ands	r5, r3
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80035ac:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80035ae:	4319      	orrs	r1, r3
 80035b0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80035b2:	6055      	str	r5, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80035b4:	4319      	orrs	r1, r3
 80035b6:	6855      	ldr	r5, [r2, #4]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80035b8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80035ba:	4329      	orrs	r1, r5
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 80035bc:	f24f 0520 	movw	r5, #61472	@ 0xf020
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80035c0:	6051      	str	r1, [r2, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80035c2:	6891      	ldr	r1, [r2, #8]
 80035c4:	4008      	ands	r0, r1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80035c6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80035c8:	430b      	orrs	r3, r1
 80035ca:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80035cc:	6090      	str	r0, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80035ce:	430b      	orrs	r3, r1
 80035d0:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80035d2:	6890      	ldr	r0, [r2, #8]
 80035d4:	3901      	subs	r1, #1
 80035d6:	430b      	orrs	r3, r1
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80035d8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80035da:	3901      	subs	r1, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80035dc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80035e0:	6d61      	ldr	r1, [r4, #84]	@ 0x54
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80035e2:	4303      	orrs	r3, r0
 80035e4:	6093      	str	r3, [r2, #8]
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80035e6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 80035e8:	68d0      	ldr	r0, [r2, #12]
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80035ea:	430b      	orrs	r3, r1
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 80035ec:	6e21      	ldr	r1, [r4, #96]	@ 0x60
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 80035ee:	4028      	ands	r0, r5
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80035f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 80035f4:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 80035f6:	60d0      	str	r0, [r2, #12]
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 80035f8:	3901      	subs	r1, #1
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80035fa:	68d0      	ldr	r0, [r2, #12]
 80035fc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8003600:	2100      	movs	r1, #0
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8003602:	4303      	orrs	r3, r0
  return HAL_OK;
 8003604:	4608      	mov	r0, r1
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8003606:	60d3      	str	r3, [r2, #12]
  hsai->State = HAL_SAI_STATE_READY;
 8003608:	2301      	movs	r3, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800360a:	f8c4 1080 	str.w	r1, [r4, #128]	@ 0x80
  __HAL_UNLOCK(hsai);
 800360e:	f884 107c 	strb.w	r1, [r4, #124]	@ 0x7c
  hsai->State = HAL_SAI_STATE_READY;
 8003612:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
}
 8003616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (hsai->Init.SynchroExt)
 8003618:	2011      	movs	r0, #17
 800361a:	2110      	movs	r1, #16
 800361c:	e741      	b.n	80034a2 <HAL_SAI_Init+0x62>
    hsai->Lock = HAL_UNLOCKED;
 800361e:	f880 207c 	strb.w	r2, [r0, #124]	@ 0x7c
    HAL_SAI_MspInit(hsai);
 8003622:	f7fd fdd7 	bl	80011d4 <HAL_SAI_MspInit>
 8003626:	e717      	b.n	8003458 <HAL_SAI_Init+0x18>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8003628:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800362c:	f7ff fe8a 	bl	8003344 <HAL_RCCEx_GetPeriphCLKFreq>
 8003630:	6822      	ldr	r2, [r4, #0]
 8003632:	e76c      	b.n	800350e <HAL_SAI_Init+0xce>
    return HAL_ERROR;
 8003634:	2001      	movs	r0, #1
}
 8003636:	4770      	bx	lr
 8003638:	200000d0 	.word	0x200000d0
 800363c:	95cbec1b 	.word	0x95cbec1b
 8003640:	40015804 	.word	0x40015804
 8003644:	40015000 	.word	0x40015000
 8003648:	40015c04 	.word	0x40015c04
 800364c:	cccccccd 	.word	0xcccccccd
 8003650:	ff05c010 	.word	0xff05c010
 8003654:	ffff1ff0 	.word	0xffff1ff0
 8003658:	fff88000 	.word	0xfff88000

0800365c <HAL_SAI_InitProtocol>:
  switch (protocol)
 800365c:	2902      	cmp	r1, #2
{
 800365e:	b430      	push	{r4, r5}
  switch (protocol)
 8003660:	d928      	bls.n	80036b4 <HAL_SAI_InitProtocol+0x58>
 8003662:	f1a1 0c03 	sub.w	ip, r1, #3
 8003666:	f1bc 0f01 	cmp.w	ip, #1
 800366a:	d820      	bhi.n	80036ae <HAL_SAI_InitProtocol+0x52>
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800366c:	2400      	movs	r4, #0
  hsai->SlotInit.SlotNumber      = nbslot;
 800366e:	65c3      	str	r3, [r0, #92]	@ 0x5c
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8003670:	6304      	str	r4, [r0, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8003672:	6384      	str	r4, [r0, #56]	@ 0x38
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8003674:	6484      	str	r4, [r0, #72]	@ 0x48
  hsai->SlotInit.FirstBitOffset  = 0;
 8003676:	6544      	str	r4, [r0, #84]	@ 0x54
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8003678:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 800367c:	6604      	str	r4, [r0, #96]	@ 0x60
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800367e:	6844      	ldr	r4, [r0, #4]
 8003680:	f034 0402 	bics.w	r4, r4, #2
 8003684:	bf0c      	ite	eq
 8003686:	2501      	moveq	r5, #1
 8003688:	2500      	movne	r5, #0
    hsai->FrameInit.ActiveFrameLength = 1;
 800368a:	2904      	cmp	r1, #4
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800368c:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8003690:	63c5      	str	r5, [r0, #60]	@ 0x3c
    hsai->FrameInit.ActiveFrameLength = 1;
 8003692:	bf14      	ite	ne
 8003694:	240d      	movne	r4, #13
 8003696:	2401      	moveq	r4, #1
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8003698:	64c1      	str	r1, [r0, #76]	@ 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800369a:	f44f 2180 	mov.w	r1, #262144	@ 0x40000
 800369e:	6444      	str	r4, [r0, #68]	@ 0x44
 80036a0:	6501      	str	r1, [r0, #80]	@ 0x50
  switch (datasize)
 80036a2:	2a03      	cmp	r2, #3
 80036a4:	d803      	bhi.n	80036ae <HAL_SAI_InitProtocol+0x52>
 80036a6:	e8df f002 	tbb	[pc, r2]
 80036aa:	3a33      	.short	0x3a33
 80036ac:	2a40      	.short	0x2a40
}
 80036ae:	2001      	movs	r0, #1
 80036b0:	bc30      	pop	{r4, r5}
 80036b2:	4770      	bx	lr
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80036b4:	2400      	movs	r4, #0
  hsai->SlotInit.SlotNumber      = nbslot;
 80036b6:	65c3      	str	r3, [r0, #92]	@ 0x5c
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80036b8:	6304      	str	r4, [r0, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80036ba:	6384      	str	r4, [r0, #56]	@ 0x38
  hsai->SlotInit.FirstBitOffset  = 0;
 80036bc:	6544      	str	r4, [r0, #84]	@ 0x54
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80036be:	6844      	ldr	r4, [r0, #4]
 80036c0:	f034 0402 	bics.w	r4, r4, #2
 80036c4:	bf14      	ite	ne
 80036c6:	2401      	movne	r4, #1
 80036c8:	2400      	moveq	r4, #0
  if ((nbslot & 0x1) != 0)
 80036ca:	07dd      	lsls	r5, r3, #31
 80036cc:	63c4      	str	r4, [r0, #60]	@ 0x3c
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80036ce:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 80036d2:	6484      	str	r4, [r0, #72]	@ 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_0 | SAI_SLOTACTIVE_2; //SAI_SLOTACTIVE_ALL;
 80036d4:	f04f 0405 	mov.w	r4, #5
 80036d8:	6604      	str	r4, [r0, #96]	@ 0x60
  if ((nbslot & 0x1) != 0)
 80036da:	d4e8      	bmi.n	80036ae <HAL_SAI_InitProtocol+0x52>
  if (protocol == SAI_I2S_STANDARD)
 80036dc:	2900      	cmp	r1, #0
 80036de:	bf14      	ite	ne
 80036e0:	f44f 3400 	movne.w	r4, #131072	@ 0x20000
 80036e4:	2400      	moveq	r4, #0
 80036e6:	64c4      	str	r4, [r0, #76]	@ 0x4c
 80036e8:	bf14      	ite	ne
 80036ea:	2400      	movne	r4, #0
 80036ec:	f44f 2480 	moveq.w	r4, #262144	@ 0x40000
 80036f0:	6504      	str	r4, [r0, #80]	@ 0x50
  switch (datasize)
 80036f2:	2a03      	cmp	r2, #3
 80036f4:	d8db      	bhi.n	80036ae <HAL_SAI_InitProtocol+0x52>
 80036f6:	e8df f002 	tbb	[pc, r2]
 80036fa:	3e2a      	.short	0x3e2a
 80036fc:	341a      	.short	0x341a
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80036fe:	21e0      	movs	r1, #224	@ 0xe0
      hsai->FrameInit.FrameLength = 32 * nbslot;
 8003700:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8003702:	2280      	movs	r2, #128	@ 0x80
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8003704:	6341      	str	r1, [r0, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 8003706:	6403      	str	r3, [r0, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8003708:	6582      	str	r2, [r0, #88]	@ 0x58
}
 800370a:	bc30      	pop	{r4, r5}
    status = HAL_SAI_Init(hsai);
 800370c:	f7ff be98 	b.w	8003440 <HAL_SAI_Init>
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8003710:	2180      	movs	r1, #128	@ 0x80
      hsai->FrameInit.FrameLength = 16 * nbslot;
 8003712:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8003714:	2240      	movs	r2, #64	@ 0x40
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8003716:	6341      	str	r1, [r0, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 16 * nbslot;
 8003718:	6403      	str	r3, [r0, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800371a:	6582      	str	r2, [r0, #88]	@ 0x58
  if (status == HAL_OK)
 800371c:	e7f5      	b.n	800370a <HAL_SAI_InitProtocol+0xae>
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800371e:	2280      	movs	r2, #128	@ 0x80
      hsai->FrameInit.FrameLength = 32 * nbslot;
 8003720:	015b      	lsls	r3, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8003722:	6342      	str	r2, [r0, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 8003724:	6403      	str	r3, [r0, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8003726:	6582      	str	r2, [r0, #88]	@ 0x58
  if (status == HAL_OK)
 8003728:	e7ef      	b.n	800370a <HAL_SAI_InitProtocol+0xae>
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800372a:	21c0      	movs	r1, #192	@ 0xc0
 800372c:	e7e8      	b.n	8003700 <HAL_SAI_InitProtocol+0xa4>
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 800372e:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8003730:	22c0      	movs	r2, #192	@ 0xc0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8003732:	2580      	movs	r5, #128	@ 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8003734:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 8003736:	ea4f 1483 	mov.w	r4, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800373a:	6342      	str	r2, [r0, #52]	@ 0x34
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 800373c:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8003740:	6585      	str	r5, [r0, #88]	@ 0x58
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 8003742:	6404      	str	r4, [r0, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 8003744:	6443      	str	r3, [r0, #68]	@ 0x44
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8003746:	d1e0      	bne.n	800370a <HAL_SAI_InitProtocol+0xae>
      hsai->SlotInit.FirstBitOffset = 8;
 8003748:	2308      	movs	r3, #8
 800374a:	6543      	str	r3, [r0, #84]	@ 0x54
  if (status == HAL_OK)
 800374c:	e7dd      	b.n	800370a <HAL_SAI_InitProtocol+0xae>
      hsai->FrameInit.FrameLength = 32 * (nbslot / 2);
 800374e:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8003750:	2480      	movs	r4, #128	@ 0x80
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8003752:	2140      	movs	r1, #64	@ 0x40
      hsai->FrameInit.FrameLength = 32 * (nbslot / 2);
 8003754:	015a      	lsls	r2, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8003756:	6344      	str	r4, [r0, #52]	@ 0x34
      hsai->FrameInit.ActiveFrameLength = 16 * (nbslot / 2);
 8003758:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800375a:	6581      	str	r1, [r0, #88]	@ 0x58
      hsai->FrameInit.ActiveFrameLength = 16 * (nbslot / 2);
 800375c:	e9c0 2310 	strd	r2, r3, [r0, #64]	@ 0x40
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8003760:	e7d3      	b.n	800370a <HAL_SAI_InitProtocol+0xae>
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 8003762:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8003764:	24e0      	movs	r4, #224	@ 0xe0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8003766:	2180      	movs	r1, #128	@ 0x80
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 8003768:	019a      	lsls	r2, r3, #6
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800376a:	6344      	str	r4, [r0, #52]	@ 0x34
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 800376c:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800376e:	6581      	str	r1, [r0, #88]	@ 0x58
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 8003770:	e9c0 2310 	strd	r2, r3, [r0, #64]	@ 0x40
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8003774:	e7c9      	b.n	800370a <HAL_SAI_InitProtocol+0xae>
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 8003776:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8003778:	2280      	movs	r2, #128	@ 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800377a:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 800377c:	ea4f 1483 	mov.w	r4, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8003780:	6342      	str	r2, [r0, #52]	@ 0x34
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 8003782:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8003786:	6582      	str	r2, [r0, #88]	@ 0x58
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 8003788:	e9c0 4310 	strd	r4, r3, [r0, #64]	@ 0x40
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800378c:	d1bd      	bne.n	800370a <HAL_SAI_InitProtocol+0xae>
      hsai->SlotInit.FirstBitOffset = 16;
 800378e:	2310      	movs	r3, #16
 8003790:	6543      	str	r3, [r0, #84]	@ 0x54
  if (status == HAL_OK)
 8003792:	e7ba      	b.n	800370a <HAL_SAI_InitProtocol+0xae>

08003794 <HAL_SAI_Transmit_DMA>:
{
 8003794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003798:	460f      	mov	r7, r1
 800379a:	4604      	mov	r4, r0
 800379c:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 800379e:	f7fd ff11 	bl	80015c4 <HAL_GetTick>
  if ((pData == NULL) || (Size == 0))
 80037a2:	2f00      	cmp	r7, #0
 80037a4:	d069      	beq.n	800387a <HAL_SAI_Transmit_DMA+0xe6>
 80037a6:	fab5 f885 	clz	r8, r5
 80037aa:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80037ae:	2d00      	cmp	r5, #0
 80037b0:	d063      	beq.n	800387a <HAL_SAI_Transmit_DMA+0xe6>
  if (hsai->State == HAL_SAI_STATE_READY)
 80037b2:	f894 307d 	ldrb.w	r3, [r4, #125]	@ 0x7d
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	b2da      	uxtb	r2, r3
 80037ba:	d14f      	bne.n	800385c <HAL_SAI_Transmit_DMA+0xc8>
    __HAL_LOCK(hsai);
 80037bc:	f894 307c 	ldrb.w	r3, [r4, #124]	@ 0x7c
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d04b      	beq.n	800385c <HAL_SAI_Transmit_DMA+0xc8>
    hsai->XferSize = Size;
 80037c4:	4643      	mov	r3, r8
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80037c6:	f8c4 8080 	str.w	r8, [r4, #128]	@ 0x80
 80037ca:	4606      	mov	r6, r0
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80037cc:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
    hsai->XferSize = Size;
 80037ce:	f365 030f 	bfi	r3, r5, #0, #16
    __HAL_LOCK(hsai);
 80037d2:	f884 207c 	strb.w	r2, [r4, #124]	@ 0x7c
    hsai->pBuffPtr = pData;
 80037d6:	6667      	str	r7, [r4, #100]	@ 0x64
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80037d8:	4639      	mov	r1, r7
    hsai->XferSize = Size;
 80037da:	f365 431f 	bfi	r3, r5, #16, #16
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80037de:	6822      	ldr	r2, [r4, #0]
    hsai->XferSize = Size;
 80037e0:	66a3      	str	r3, [r4, #104]	@ 0x68
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80037e2:	462b      	mov	r3, r5
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80037e4:	2512      	movs	r5, #18
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80037e6:	321c      	adds	r2, #28
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80037e8:	f884 507d 	strb.w	r5, [r4, #125]	@ 0x7d
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80037ec:	4d2b      	ldr	r5, [pc, #172]	@ (800389c <HAL_SAI_Transmit_DMA+0x108>)
    hsai->hdmatx->XferAbortCallback = NULL;
 80037ee:	f8c0 8050 	str.w	r8, [r0, #80]	@ 0x50
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80037f2:	6405      	str	r5, [r0, #64]	@ 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 80037f4:	4d2a      	ldr	r5, [pc, #168]	@ (80038a0 <HAL_SAI_Transmit_DMA+0x10c>)
 80037f6:	63c5      	str	r5, [r0, #60]	@ 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 80037f8:	4d2a      	ldr	r5, [pc, #168]	@ (80038a4 <HAL_SAI_Transmit_DMA+0x110>)
 80037fa:	64c5      	str	r5, [r0, #76]	@ 0x4c
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80037fc:	f7fe fa64 	bl	8001cc8 <HAL_DMA_Start_IT>
 8003800:	4607      	mov	r7, r0
 8003802:	2800      	cmp	r0, #0
 8003804:	d137      	bne.n	8003876 <HAL_SAI_Transmit_DMA+0xe2>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8003806:	6b22      	ldr	r2, [r4, #48]	@ 0x30
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8003808:	6863      	ldr	r3, [r4, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800380a:	2a08      	cmp	r2, #8
 800380c:	d02a      	beq.n	8003864 <HAL_SAI_Transmit_DMA+0xd0>
 800380e:	2205      	movs	r2, #5
 8003810:	2161      	movs	r1, #97	@ 0x61
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003812:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_WCKCFG;
 8003814:	2b01      	cmp	r3, #1
 8003816:	bf88      	it	hi
 8003818:	4611      	movhi	r1, r2
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800381a:	6822      	ldr	r2, [r4, #0]
 800381c:	6913      	ldr	r3, [r2, #16]
 800381e:	430b      	orrs	r3, r1
 8003820:	6113      	str	r3, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8003822:	6813      	ldr	r3, [r2, #0]
 8003824:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003828:	6013      	str	r3, [r2, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800382a:	e006      	b.n	800383a <HAL_SAI_Transmit_DMA+0xa6>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800382c:	f7fd feca 	bl	80015c4 <HAL_GetTick>
 8003830:	1b83      	subs	r3, r0, r6
 8003832:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003836:	d824      	bhi.n	8003882 <HAL_SAI_Transmit_DMA+0xee>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8003838:	6822      	ldr	r2, [r4, #0]
 800383a:	6955      	ldr	r5, [r2, #20]
 800383c:	f415 25e0 	ands.w	r5, r5, #458752	@ 0x70000
 8003840:	d0f4      	beq.n	800382c <HAL_SAI_Transmit_DMA+0x98>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8003842:	6813      	ldr	r3, [r2, #0]
 8003844:	03db      	lsls	r3, r3, #15
 8003846:	d403      	bmi.n	8003850 <HAL_SAI_Transmit_DMA+0xbc>
      __HAL_SAI_ENABLE(hsai);
 8003848:	6813      	ldr	r3, [r2, #0]
 800384a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800384e:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
 8003850:	2300      	movs	r3, #0
}
 8003852:	4638      	mov	r0, r7
    __HAL_UNLOCK(hsai);
 8003854:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
}
 8003858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_LOCK(hsai);
 800385c:	2702      	movs	r7, #2
}
 800385e:	4638      	mov	r0, r7
 8003860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8003864:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8003868:	2a01      	cmp	r2, #1
 800386a:	bf15      	itete	ne
 800386c:	2205      	movne	r2, #5
 800386e:	2215      	moveq	r2, #21
 8003870:	2161      	movne	r1, #97	@ 0x61
 8003872:	2171      	moveq	r1, #113	@ 0x71
 8003874:	e7cd      	b.n	8003812 <HAL_SAI_Transmit_DMA+0x7e>
      __HAL_UNLOCK(hsai);
 8003876:	f884 807c 	strb.w	r8, [r4, #124]	@ 0x7c
    return  HAL_ERROR;
 800387a:	2701      	movs	r7, #1
}
 800387c:	4638      	mov	r0, r7
 800387e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8003882:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
        return HAL_TIMEOUT;
 8003886:	2703      	movs	r7, #3
        __HAL_UNLOCK(hsai);
 8003888:	f884 507c 	strb.w	r5, [r4, #124]	@ 0x7c
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800388c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
}
 8003890:	4638      	mov	r0, r7
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8003892:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
}
 8003896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800389a:	bf00      	nop
 800389c:	080039dd 	.word	0x080039dd
 80038a0:	08003975 	.word	0x08003975
 80038a4:	08003a5d 	.word	0x08003a5d

080038a8 <HAL_SAI_Receive_DMA>:
  if ((pData == NULL) || (Size == 0))
 80038a8:	2900      	cmp	r1, #0
 80038aa:	d058      	beq.n	800395e <HAL_SAI_Receive_DMA+0xb6>
 80038ac:	4613      	mov	r3, r2
{
 80038ae:	b570      	push	{r4, r5, r6, lr}
  if ((pData == NULL) || (Size == 0))
 80038b0:	fab2 f582 	clz	r5, r2
 80038b4:	096d      	lsrs	r5, r5, #5
 80038b6:	2a00      	cmp	r2, #0
 80038b8:	d046      	beq.n	8003948 <HAL_SAI_Receive_DMA+0xa0>
  if (hsai->State == HAL_SAI_STATE_READY)
 80038ba:	f890 207d 	ldrb.w	r2, [r0, #125]	@ 0x7d
 80038be:	4604      	mov	r4, r0
 80038c0:	2a01      	cmp	r2, #1
 80038c2:	b2d0      	uxtb	r0, r2
 80038c4:	d13c      	bne.n	8003940 <HAL_SAI_Receive_DMA+0x98>
    __HAL_LOCK(hsai);
 80038c6:	f894 207c 	ldrb.w	r2, [r4, #124]	@ 0x7c
 80038ca:	2a01      	cmp	r2, #1
 80038cc:	d038      	beq.n	8003940 <HAL_SAI_Receive_DMA+0x98>
 80038ce:	f884 007c 	strb.w	r0, [r4, #124]	@ 0x7c
    hsai->XferSize = Size;
 80038d2:	4628      	mov	r0, r5
    hsai->pBuffPtr = pData;
 80038d4:	6661      	str	r1, [r4, #100]	@ 0x64
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 80038d6:	460a      	mov	r2, r1
    hsai->XferSize = Size;
 80038d8:	f363 000f 	bfi	r0, r3, #0, #16
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 80038dc:	2122      	movs	r1, #34	@ 0x22
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 80038de:	4e21      	ldr	r6, [pc, #132]	@ (8003964 <HAL_SAI_Receive_DMA+0xbc>)
    hsai->XferSize = Size;
 80038e0:	f363 401f 	bfi	r0, r3, #16, #16
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80038e4:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 80038e8:	f884 107d 	strb.w	r1, [r4, #125]	@ 0x7d
    hsai->XferSize = Size;
 80038ec:	66a0      	str	r0, [r4, #104]	@ 0x68
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 80038ee:	6f20      	ldr	r0, [r4, #112]	@ 0x70
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 80038f0:	6821      	ldr	r1, [r4, #0]
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 80038f2:	6406      	str	r6, [r0, #64]	@ 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 80038f4:	4e1c      	ldr	r6, [pc, #112]	@ (8003968 <HAL_SAI_Receive_DMA+0xc0>)
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 80038f6:	311c      	adds	r1, #28
    hsai->hdmarx->XferAbortCallback = NULL;
 80038f8:	6505      	str	r5, [r0, #80]	@ 0x50
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 80038fa:	63c6      	str	r6, [r0, #60]	@ 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 80038fc:	4e1b      	ldr	r6, [pc, #108]	@ (800396c <HAL_SAI_Receive_DMA+0xc4>)
 80038fe:	64c6      	str	r6, [r0, #76]	@ 0x4c
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8003900:	f7fe f9e2 	bl	8001cc8 <HAL_DMA_Start_IT>
 8003904:	b9f0      	cbnz	r0, 8003944 <HAL_SAI_Receive_DMA+0x9c>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8003906:	6b22      	ldr	r2, [r4, #48]	@ 0x30
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8003908:	6863      	ldr	r3, [r4, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800390a:	2a08      	cmp	r2, #8
 800390c:	d01e      	beq.n	800394c <HAL_SAI_Receive_DMA+0xa4>
 800390e:	2205      	movs	r2, #5
 8003910:	2161      	movs	r1, #97	@ 0x61
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003912:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_WCKCFG;
 8003914:	2b01      	cmp	r3, #1
 8003916:	bf88      	it	hi
 8003918:	4611      	movhi	r1, r2
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800391a:	6823      	ldr	r3, [r4, #0]
 800391c:	691a      	ldr	r2, [r3, #16]
 800391e:	430a      	orrs	r2, r1
 8003920:	611a      	str	r2, [r3, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8003928:	601a      	str	r2, [r3, #0]
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	03d2      	lsls	r2, r2, #15
 800392e:	d403      	bmi.n	8003938 <HAL_SAI_Receive_DMA+0x90>
      __HAL_SAI_ENABLE(hsai);
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003936:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 8003938:	2300      	movs	r3, #0
 800393a:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
}
 800393e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LOCK(hsai);
 8003940:	2002      	movs	r0, #2
}
 8003942:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_UNLOCK(hsai);
 8003944:	f884 507c 	strb.w	r5, [r4, #124]	@ 0x7c
    return  HAL_ERROR;
 8003948:	2001      	movs	r0, #1
}
 800394a:	bd70      	pop	{r4, r5, r6, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800394c:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8003950:	2a01      	cmp	r2, #1
 8003952:	bf15      	itete	ne
 8003954:	2205      	movne	r2, #5
 8003956:	2215      	moveq	r2, #21
 8003958:	2161      	movne	r1, #97	@ 0x61
 800395a:	2171      	moveq	r1, #113	@ 0x71
 800395c:	e7d9      	b.n	8003912 <HAL_SAI_Receive_DMA+0x6a>
    return  HAL_ERROR;
 800395e:	2001      	movs	r0, #1
}
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	08003a4d 	.word	0x08003a4d
 8003968:	080039e9 	.word	0x080039e9
 800396c:	08003a5d 	.word	0x08003a5d

08003970 <HAL_SAI_TxCpltCallback>:
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop

08003974 <SAI_DMATxCplt>:
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003974:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003976:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003978:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
{
 800397c:	b510      	push	{r4, lr}
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800397e:	d01b      	beq.n	80039b8 <SAI_DMATxCplt+0x44>
  {
    hsai->XferCount = 0;

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8003980:	6803      	ldr	r3, [r0, #0]
    hsai->XferCount = 0;
 8003982:	f04f 0c00 	mov.w	ip, #0
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8003986:	6b04      	ldr	r4, [r0, #48]	@ 0x30
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8003988:	6819      	ldr	r1, [r3, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800398a:	2c08      	cmp	r4, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800398c:	6842      	ldr	r2, [r0, #4]
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800398e:	f421 3100 	bic.w	r1, r1, #131072	@ 0x20000
    hsai->XferCount = 0;
 8003992:	f8a0 c06a 	strh.w	ip, [r0, #106]	@ 0x6a
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8003996:	6019      	str	r1, [r3, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8003998:	d011      	beq.n	80039be <SAI_DMATxCplt+0x4a>
 800399a:	f06f 0161 	mvn.w	r1, #97	@ 0x61
 800399e:	f06f 0405 	mvn.w	r4, #5
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80039a2:	3a02      	subs	r2, #2

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));

    hsai->State = HAL_SAI_STATE_READY;
 80039a4:	f04f 0c01 	mov.w	ip, #1
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80039a8:	2a01      	cmp	r2, #1
 80039aa:	bf88      	it	hi
 80039ac:	4621      	movhi	r1, r4
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80039ae:	691a      	ldr	r2, [r3, #16]
 80039b0:	400a      	ands	r2, r1
 80039b2:	611a      	str	r2, [r3, #16]
    hsai->State = HAL_SAI_STATE_READY;
 80039b4:	f880 c07d 	strb.w	ip, [r0, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 80039b8:	f7ff ffda 	bl	8003970 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80039bc:	bd10      	pop	{r4, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80039be:	f022 0102 	bic.w	r1, r2, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80039c2:	2901      	cmp	r1, #1
 80039c4:	bf15      	itete	ne
 80039c6:	f06f 0161 	mvnne.w	r1, #97	@ 0x61
 80039ca:	f06f 0171 	mvneq.w	r1, #113	@ 0x71
 80039ce:	f06f 0405 	mvnne.w	r4, #5
 80039d2:	f06f 0415 	mvneq.w	r4, #21
 80039d6:	e7e4      	b.n	80039a2 <SAI_DMATxCplt+0x2e>

080039d8 <HAL_SAI_TxHalfCpltCallback>:
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop

080039dc <SAI_DMATxHalfCplt>:
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 80039dc:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 80039de:	b508      	push	{r3, lr}
  HAL_SAI_TxHalfCpltCallback(hsai);
 80039e0:	f7ff fffa 	bl	80039d8 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80039e4:	bd08      	pop	{r3, pc}
 80039e6:	bf00      	nop

080039e8 <SAI_DMARxCplt>:
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80039e8:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039ea:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80039ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
{
 80039f0:	b510      	push	{r4, lr}
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80039f2:	d01b      	beq.n	8003a2c <SAI_DMARxCplt+0x44>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80039f4:	6803      	ldr	r3, [r0, #0]
    hsai->XferCount = 0;
 80039f6:	f04f 0c00 	mov.w	ip, #0
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80039fa:	6b04      	ldr	r4, [r0, #48]	@ 0x30
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80039fc:	6819      	ldr	r1, [r3, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80039fe:	2c08      	cmp	r4, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8003a00:	6842      	ldr	r2, [r0, #4]
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8003a02:	f421 3100 	bic.w	r1, r1, #131072	@ 0x20000
 8003a06:	6019      	str	r1, [r3, #0]
    hsai->XferCount = 0;
 8003a08:	f8a0 c06a 	strh.w	ip, [r0, #106]	@ 0x6a
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8003a0c:	d011      	beq.n	8003a32 <SAI_DMARxCplt+0x4a>
 8003a0e:	f06f 0161 	mvn.w	r1, #97	@ 0x61
 8003a12:	f06f 0405 	mvn.w	r4, #5
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003a16:	3a02      	subs	r2, #2

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));

    hsai->State = HAL_SAI_STATE_READY;
 8003a18:	f04f 0c01 	mov.w	ip, #1
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003a1c:	2a01      	cmp	r2, #1
 8003a1e:	bf88      	it	hi
 8003a20:	4621      	movhi	r1, r4
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8003a22:	691a      	ldr	r2, [r3, #16]
 8003a24:	400a      	ands	r2, r1
 8003a26:	611a      	str	r2, [r3, #16]
    hsai->State = HAL_SAI_STATE_READY;
 8003a28:	f880 c07d 	strb.w	ip, [r0, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8003a2c:	f7fd fa7c 	bl	8000f28 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8003a30:	bd10      	pop	{r4, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8003a32:	f022 0102 	bic.w	r1, r2, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8003a36:	2901      	cmp	r1, #1
 8003a38:	bf15      	itete	ne
 8003a3a:	f06f 0161 	mvnne.w	r1, #97	@ 0x61
 8003a3e:	f06f 0171 	mvneq.w	r1, #113	@ 0x71
 8003a42:	f06f 0405 	mvnne.w	r4, #5
 8003a46:	f06f 0415 	mvneq.w	r4, #21
 8003a4a:	e7e4      	b.n	8003a16 <SAI_DMARxCplt+0x2e>

08003a4c <SAI_DMARxHalfCplt>:
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8003a4c:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 8003a4e:	b508      	push	{r3, lr}
  HAL_SAI_RxHalfCpltCallback(hsai);
 8003a50:	f7fd fa52 	bl	8000ef8 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8003a54:	bd08      	pop	{r3, pc}
 8003a56:	bf00      	nop

08003a58 <HAL_SAI_ErrorCallback>:
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop

08003a5c <SAI_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a5c:	6b80      	ldr	r0, [r0, #56]	@ 0x38

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8003a5e:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8003a62:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8003a64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
{
 8003a68:	b510      	push	{r4, lr}
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8003a6a:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8003a6e:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d006      	beq.n	8003a82 <SAI_DMAError+0x26>
 8003a74:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 8003a76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d002      	beq.n	8003a82 <SAI_DMAError+0x26>
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8003a7c:	f7ff ffec 	bl	8003a58 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8003a80:	bd10      	pop	{r4, pc}
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8003a82:	6801      	ldr	r1, [r0, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8003a84:	4b11      	ldr	r3, [pc, #68]	@ (8003acc <SAI_DMAError+0x70>)
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8003a86:	680a      	ldr	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8003a88:	681b      	ldr	r3, [r3, #0]
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8003a8a:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8003a8e:	4c10      	ldr	r4, [pc, #64]	@ (8003ad0 <SAI_DMAError+0x74>)
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8003a90:	600a      	str	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8003a92:	fba4 4303 	umull	r4, r3, r4, r3
  __HAL_SAI_DISABLE(hsai);
 8003a96:	680a      	ldr	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8003a98:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
 8003a9a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8003a9e:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 8003aa0:	600a      	str	r2, [r1, #0]
 8003aa2:	e002      	b.n	8003aaa <SAI_DMAError+0x4e>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8003aa4:	680a      	ldr	r2, [r1, #0]
 8003aa6:	03d2      	lsls	r2, r2, #15
 8003aa8:	d507      	bpl.n	8003aba <SAI_DMAError+0x5e>
    if (count-- == 0)
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	d2fa      	bcs.n	8003aa4 <SAI_DMAError+0x48>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8003aae:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 8003ab2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ab6:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_READY;
 8003aba:	2201      	movs	r2, #1
    hsai->XferCount = 0U;
 8003abc:	2300      	movs	r3, #0
    hsai->State = HAL_SAI_STATE_READY;
 8003abe:	f880 207d 	strb.w	r2, [r0, #125]	@ 0x7d
    hsai->XferCount = 0U;
 8003ac2:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
  HAL_SAI_ErrorCallback(hsai);
 8003ac6:	f7ff ffc7 	bl	8003a58 <HAL_SAI_ErrorCallback>
}
 8003aca:	bd10      	pop	{r4, pc}
 8003acc:	200000d0 	.word	0x200000d0
 8003ad0:	95cbec1b 	.word	0x95cbec1b

08003ad4 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ad4:	2800      	cmp	r0, #0
 8003ad6:	f000 8089 	beq.w	8003bec <HAL_TIM_Base_Init+0x118>
{
 8003ada:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003adc:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003ae0:	4604      	mov	r4, r0
 8003ae2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d07b      	beq.n	8003be2 <HAL_TIM_Base_Init+0x10e>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003aea:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003aec:	2302      	movs	r3, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003aee:	4940      	ldr	r1, [pc, #256]	@ (8003bf0 <HAL_TIM_Base_Init+0x11c>)
 8003af0:	4840      	ldr	r0, [pc, #256]	@ (8003bf4 <HAL_TIM_Base_Init+0x120>)
 8003af2:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8003af6:	eba2 0101 	sub.w	r1, r2, r1
  htim->State = HAL_TIM_STATE_BUSY;
 8003afa:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003afe:	eba2 0e00 	sub.w	lr, r2, r0
  tmpcr1 = TIMx->CR1;
 8003b02:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b04:	fab1 f181 	clz	r1, r1
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b08:	69a7      	ldr	r7, [r4, #24]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b0a:	fabe fe8e 	clz	lr, lr

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b0e:	6865      	ldr	r5, [r4, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b10:	ea4f 1151 	mov.w	r1, r1, lsr #5
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b14:	68e6      	ldr	r6, [r4, #12]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b16:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8003b1a:	d04d      	beq.n	8003bb8 <HAL_TIM_Base_Init+0xe4>
 8003b1c:	2900      	cmp	r1, #0
 8003b1e:	d14b      	bne.n	8003bb8 <HAL_TIM_Base_Init+0xe4>
 8003b20:	f8df c0d8 	ldr.w	ip, [pc, #216]	@ 8003bfc <HAL_TIM_Base_Init+0x128>
 8003b24:	4562      	cmp	r2, ip
 8003b26:	d047      	beq.n	8003bb8 <HAL_TIM_Base_Init+0xe4>
 8003b28:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8003b2c:	4562      	cmp	r2, ip
 8003b2e:	d043      	beq.n	8003bb8 <HAL_TIM_Base_Init+0xe4>
 8003b30:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8003b34:	4562      	cmp	r2, ip
 8003b36:	d03f      	beq.n	8003bb8 <HAL_TIM_Base_Init+0xe4>
 8003b38:	f1be 0f00 	cmp.w	lr, #0
 8003b3c:	d13c      	bne.n	8003bb8 <HAL_TIM_Base_Init+0xe4>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b3e:	492e      	ldr	r1, [pc, #184]	@ (8003bf8 <HAL_TIM_Base_Init+0x124>)
 8003b40:	428a      	cmp	r2, r1
 8003b42:	d013      	beq.n	8003b6c <HAL_TIM_Base_Init+0x98>
 8003b44:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8003b48:	428a      	cmp	r2, r1
 8003b4a:	d00f      	beq.n	8003b6c <HAL_TIM_Base_Init+0x98>
 8003b4c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8003b50:	428a      	cmp	r2, r1
 8003b52:	d00b      	beq.n	8003b6c <HAL_TIM_Base_Init+0x98>
 8003b54:	f5a1 3198 	sub.w	r1, r1, #77824	@ 0x13000
 8003b58:	428a      	cmp	r2, r1
 8003b5a:	d007      	beq.n	8003b6c <HAL_TIM_Base_Init+0x98>
 8003b5c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8003b60:	428a      	cmp	r2, r1
 8003b62:	d003      	beq.n	8003b6c <HAL_TIM_Base_Init+0x98>
 8003b64:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8003b68:	428a      	cmp	r2, r1
 8003b6a:	d103      	bne.n	8003b74 <HAL_TIM_Base_Init+0xa0>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b70:	6921      	ldr	r1, [r4, #16]
 8003b72:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b78:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 8003b7a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b7c:	62d6      	str	r6, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003b7e:	6295      	str	r5, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b80:	2301      	movs	r3, #1
  return HAL_OK;
 8003b82:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8003b84:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b86:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b8a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8003b8e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003b92:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003b96:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8003b9a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003b9e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ba2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003ba6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8003baa:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8003bae:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8003bb2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8003bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 8003bb8:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003bbe:	4303      	orrs	r3, r0
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bc0:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bc6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bc8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bcc:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 8003bce:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bd0:	62d6      	str	r6, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003bd2:	6295      	str	r5, [r2, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bd4:	b911      	cbnz	r1, 8003bdc <HAL_TIM_Base_Init+0x108>
 8003bd6:	f1be 0f00 	cmp.w	lr, #0
 8003bda:	d0d1      	beq.n	8003b80 <HAL_TIM_Base_Init+0xac>
    TIMx->RCR = Structure->RepetitionCounter;
 8003bdc:	6963      	ldr	r3, [r4, #20]
 8003bde:	6313      	str	r3, [r2, #48]	@ 0x30
 8003be0:	e7ce      	b.n	8003b80 <HAL_TIM_Base_Init+0xac>
    htim->Lock = HAL_UNLOCKED;
 8003be2:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003be6:	f7fd fc25 	bl	8001434 <HAL_TIM_Base_MspInit>
 8003bea:	e77e      	b.n	8003aea <HAL_TIM_Base_Init+0x16>
    return HAL_ERROR;
 8003bec:	2001      	movs	r0, #1
}
 8003bee:	4770      	bx	lr
 8003bf0:	40010000 	.word	0x40010000
 8003bf4:	40010400 	.word	0x40010400
 8003bf8:	40014000 	.word	0x40014000
 8003bfc:	40000400 	.word	0x40000400

08003c00 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003c00:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d13d      	bne.n	8003c84 <HAL_TIM_Base_Start_IT+0x84>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c08:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003c0a:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c0c:	4b1e      	ldr	r3, [pc, #120]	@ (8003c88 <HAL_TIM_Base_Start_IT+0x88>)
 8003c0e:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8003c12:	bf18      	it	ne
 8003c14:	429a      	cmpne	r2, r3
{
 8003c16:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c18:	bf0c      	ite	eq
 8003c1a:	2301      	moveq	r3, #1
 8003c1c:	2300      	movne	r3, #0
 8003c1e:	4d1b      	ldr	r5, [pc, #108]	@ (8003c8c <HAL_TIM_Base_Start_IT+0x8c>)
 8003c20:	4c1b      	ldr	r4, [pc, #108]	@ (8003c90 <HAL_TIM_Base_Start_IT+0x90>)
 8003c22:	42aa      	cmp	r2, r5
 8003c24:	bf08      	it	eq
 8003c26:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003c2a:	f880 103d 	strb.w	r1, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c2e:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c30:	42a2      	cmp	r2, r4
 8003c32:	bf08      	it	eq
 8003c34:	f043 0301 	orreq.w	r3, r3, #1
 8003c38:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c3c:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c40:	4814      	ldr	r0, [pc, #80]	@ (8003c94 <HAL_TIM_Base_Start_IT+0x94>)
 8003c42:	42a2      	cmp	r2, r4
 8003c44:	bf08      	it	eq
 8003c46:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c4a:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c4c:	4282      	cmp	r2, r0
 8003c4e:	bf08      	it	eq
 8003c50:	f043 0301 	orreq.w	r3, r3, #1
 8003c54:	4910      	ldr	r1, [pc, #64]	@ (8003c98 <HAL_TIM_Base_Start_IT+0x98>)
 8003c56:	428a      	cmp	r2, r1
 8003c58:	bf08      	it	eq
 8003c5a:	f043 0301 	orreq.w	r3, r3, #1
 8003c5e:	b913      	cbnz	r3, 8003c66 <HAL_TIM_Base_Start_IT+0x66>
 8003c60:	4b0e      	ldr	r3, [pc, #56]	@ (8003c9c <HAL_TIM_Base_Start_IT+0x9c>)
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d107      	bne.n	8003c76 <HAL_TIM_Base_Start_IT+0x76>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c66:	6891      	ldr	r1, [r2, #8]
 8003c68:	4b0d      	ldr	r3, [pc, #52]	@ (8003ca0 <HAL_TIM_Base_Start_IT+0xa0>)
 8003c6a:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c6c:	2b06      	cmp	r3, #6
 8003c6e:	d006      	beq.n	8003c7e <HAL_TIM_Base_Start_IT+0x7e>
 8003c70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c74:	d003      	beq.n	8003c7e <HAL_TIM_Base_Start_IT+0x7e>
      __HAL_TIM_ENABLE(htim);
 8003c76:	6813      	ldr	r3, [r2, #0]
 8003c78:	f043 0301 	orr.w	r3, r3, #1
 8003c7c:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8003c7e:	2000      	movs	r0, #0
}
 8003c80:	bc30      	pop	{r4, r5}
 8003c82:	4770      	bx	lr
    return HAL_ERROR;
 8003c84:	2001      	movs	r0, #1
}
 8003c86:	4770      	bx	lr
 8003c88:	40010000 	.word	0x40010000
 8003c8c:	40000400 	.word	0x40000400
 8003c90:	40000800 	.word	0x40000800
 8003c94:	40010400 	.word	0x40010400
 8003c98:	40014000 	.word	0x40014000
 8003c9c:	40001800 	.word	0x40001800
 8003ca0:	00010007 	.word	0x00010007

08003ca4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003ca4:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d06f      	beq.n	8003d8c <HAL_TIM_ConfigClockSource+0xe8>
 8003cac:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8003cae:	2302      	movs	r3, #2
{
 8003cb0:	b430      	push	{r4, r5}
  tmpsmcr = htim->Instance->SMCR;
 8003cb2:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(htim);
 8003cb4:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003cb6:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_LOCK(htim);
 8003cba:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cbe:	4b4d      	ldr	r3, [pc, #308]	@ (8003df4 <HAL_TIM_ConfigClockSource+0x150>)
  tmpsmcr = htim->Instance->SMCR;
 8003cc0:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cc2:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8003cc4:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8003cc6:	680b      	ldr	r3, [r1, #0]
 8003cc8:	2b60      	cmp	r3, #96	@ 0x60
 8003cca:	d061      	beq.n	8003d90 <HAL_TIM_ConfigClockSource+0xec>
 8003ccc:	d824      	bhi.n	8003d18 <HAL_TIM_ConfigClockSource+0x74>
 8003cce:	2b40      	cmp	r3, #64	@ 0x40
 8003cd0:	d077      	beq.n	8003dc2 <HAL_TIM_ConfigClockSource+0x11e>
 8003cd2:	d94a      	bls.n	8003d6a <HAL_TIM_ConfigClockSource+0xc6>
 8003cd4:	2b50      	cmp	r3, #80	@ 0x50
 8003cd6:	d117      	bne.n	8003d08 <HAL_TIM_ConfigClockSource+0x64>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cd8:	684b      	ldr	r3, [r1, #4]
 8003cda:	68c8      	ldr	r0, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cdc:	6a21      	ldr	r1, [r4, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cde:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8003ce2:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ce4:	6a23      	ldr	r3, [r4, #32]
 8003ce6:	f023 0301 	bic.w	r3, r3, #1
 8003cea:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cec:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003cf2:	ea43 1300 	orr.w	r3, r3, r0, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cf6:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8003cf8:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003cfa:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cfc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d00:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d04:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003d06:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003d08:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8003d0a:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8003d0c:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8003d10:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 8003d14:	bc30      	pop	{r4, r5}
 8003d16:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8003d18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d1c:	d0f3      	beq.n	8003d06 <HAL_TIM_ConfigClockSource+0x62>
 8003d1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d22:	d110      	bne.n	8003d46 <HAL_TIM_ConfigClockSource+0xa2>
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d24:	68a0      	ldr	r0, [r4, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d26:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 8003d2a:	432b      	orrs	r3, r5
 8003d2c:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d2e:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  HAL_StatusTypeDef status = HAL_OK;
 8003d32:	2000      	movs	r0, #0
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d34:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8003d38:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d3a:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d3c:	68a3      	ldr	r3, [r4, #8]
 8003d3e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d42:	60a3      	str	r3, [r4, #8]
      break;
 8003d44:	e7e0      	b.n	8003d08 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 8003d46:	2b70      	cmp	r3, #112	@ 0x70
 8003d48:	d1de      	bne.n	8003d08 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr = TIMx->SMCR;
 8003d4a:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d4c:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 8003d50:	432b      	orrs	r3, r5
 8003d52:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d54:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d58:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8003d5c:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8003d5e:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8003d60:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d62:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003d66:	60a3      	str	r3, [r4, #8]
      break;
 8003d68:	e7cd      	b.n	8003d06 <HAL_TIM_ConfigClockSource+0x62>
  switch (sClockSourceConfig->ClockSource)
 8003d6a:	2b20      	cmp	r3, #32
 8003d6c:	d002      	beq.n	8003d74 <HAL_TIM_ConfigClockSource+0xd0>
 8003d6e:	d909      	bls.n	8003d84 <HAL_TIM_ConfigClockSource+0xe0>
 8003d70:	2b30      	cmp	r3, #48	@ 0x30
 8003d72:	d1c9      	bne.n	8003d08 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr = TIMx->SMCR;
 8003d74:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d76:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d7a:	430b      	orrs	r3, r1
 8003d7c:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8003d80:	60a3      	str	r3, [r4, #8]
}
 8003d82:	e7c0      	b.n	8003d06 <HAL_TIM_ConfigClockSource+0x62>
  switch (sClockSourceConfig->ClockSource)
 8003d84:	f033 0110 	bics.w	r1, r3, #16
 8003d88:	d1be      	bne.n	8003d08 <HAL_TIM_ConfigClockSource+0x64>
 8003d8a:	e7f3      	b.n	8003d74 <HAL_TIM_ConfigClockSource+0xd0>
  __HAL_LOCK(htim);
 8003d8c:	2002      	movs	r0, #2
}
 8003d8e:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d90:	6a23      	ldr	r3, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d92:	6848      	ldr	r0, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d94:	f023 0310 	bic.w	r3, r3, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d98:	68cd      	ldr	r5, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d9a:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d9c:	69a1      	ldr	r1, [r4, #24]
  tmpccer = TIMx->CCER;
 8003d9e:	6a23      	ldr	r3, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003da0:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003da4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003da8:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8003dac:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8003db0:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 8003db2:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8003db4:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003db6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dba:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8003dbe:	60a3      	str	r3, [r4, #8]
}
 8003dc0:	e7a1      	b.n	8003d06 <HAL_TIM_ConfigClockSource+0x62>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dc2:	684b      	ldr	r3, [r1, #4]
 8003dc4:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 8003dc6:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dc8:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8003dcc:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dce:	6a23      	ldr	r3, [r4, #32]
 8003dd0:	f023 0301 	bic.w	r3, r3, #1
 8003dd4:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dd6:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003dd8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ddc:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003de0:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8003de2:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8003de4:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003de6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dea:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8003dee:	60a3      	str	r3, [r4, #8]
}
 8003df0:	e789      	b.n	8003d06 <HAL_TIM_ConfigClockSource+0x62>
 8003df2:	bf00      	nop
 8003df4:	fffe0088 	.word	0xfffe0088

08003df8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003df8:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d04b      	beq.n	8003e98 <HAL_TIMEx_MasterConfigSynchronization+0xa0>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e00:	6803      	ldr	r3, [r0, #0]
 8003e02:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8003e04:	2002      	movs	r0, #2
{
 8003e06:	b430      	push	{r4, r5}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e08:	4d24      	ldr	r5, [pc, #144]	@ (8003e9c <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003e0a:	f882 003d 	strb.w	r0, [r2, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e0e:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8003e10:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8003e12:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e14:	d029      	beq.n	8003e6a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003e16:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003e1a:	42ab      	cmp	r3, r5
 8003e1c:	d025      	beq.n	8003e6a <HAL_TIMEx_MasterConfigSynchronization+0x72>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e1e:	4d20      	ldr	r5, [pc, #128]	@ (8003ea0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e20:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e24:	42ab      	cmp	r3, r5
 8003e26:	bf18      	it	ne
 8003e28:	f1b3 4f80 	cmpne.w	r3, #1073741824	@ 0x40000000
 8003e2c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003e30:	bf0c      	ite	eq
 8003e32:	f04f 0c01 	moveq.w	ip, #1
 8003e36:	f04f 0c00 	movne.w	ip, #0
 8003e3a:	42ab      	cmp	r3, r5
 8003e3c:	bf08      	it	eq
 8003e3e:	f04c 0c01 	orreq.w	ip, ip, #1
 8003e42:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003e46:	42ab      	cmp	r3, r5
 8003e48:	bf08      	it	eq
 8003e4a:	f04c 0c01 	orreq.w	ip, ip, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e4e:	680d      	ldr	r5, [r1, #0]
 8003e50:	4328      	orrs	r0, r5
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e52:	4d14      	ldr	r5, [pc, #80]	@ (8003ea4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
  htim->Instance->CR2 = tmpcr2;
 8003e54:	6058      	str	r0, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e56:	42ab      	cmp	r3, r5
 8003e58:	bf14      	ite	ne
 8003e5a:	4660      	movne	r0, ip
 8003e5c:	f04c 0001 	orreq.w	r0, ip, #1
 8003e60:	b960      	cbnz	r0, 8003e7c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8003e62:	4811      	ldr	r0, [pc, #68]	@ (8003ea8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003e64:	4283      	cmp	r3, r0
 8003e66:	d009      	beq.n	8003e7c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8003e68:	e00d      	b.n	8003e86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e6a:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e6c:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e70:	4328      	orrs	r0, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e72:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e74:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e78:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 8003e7a:	6058      	str	r0, [r3, #4]
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e7c:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e7e:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e82:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e84:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8003e86:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8003e88:	2101      	movs	r1, #1

  return HAL_OK;
 8003e8a:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 8003e8c:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8003e90:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 8003e94:	bc30      	pop	{r4, r5}
 8003e96:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003e98:	2002      	movs	r0, #2
}
 8003e9a:	4770      	bx	lr
 8003e9c:	40010000 	.word	0x40010000
 8003ea0:	40000400 	.word	0x40000400
 8003ea4:	40014000 	.word	0x40014000
 8003ea8:	40001800 	.word	0x40001800

08003eac <memset>:
 8003eac:	4402      	add	r2, r0
 8003eae:	4603      	mov	r3, r0
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d100      	bne.n	8003eb6 <memset+0xa>
 8003eb4:	4770      	bx	lr
 8003eb6:	f803 1b01 	strb.w	r1, [r3], #1
 8003eba:	e7f9      	b.n	8003eb0 <memset+0x4>

08003ebc <__libc_init_array>:
 8003ebc:	b570      	push	{r4, r5, r6, lr}
 8003ebe:	4d0d      	ldr	r5, [pc, #52]	@ (8003ef4 <__libc_init_array+0x38>)
 8003ec0:	4c0d      	ldr	r4, [pc, #52]	@ (8003ef8 <__libc_init_array+0x3c>)
 8003ec2:	1b64      	subs	r4, r4, r5
 8003ec4:	10a4      	asrs	r4, r4, #2
 8003ec6:	2600      	movs	r6, #0
 8003ec8:	42a6      	cmp	r6, r4
 8003eca:	d109      	bne.n	8003ee0 <__libc_init_array+0x24>
 8003ecc:	4d0b      	ldr	r5, [pc, #44]	@ (8003efc <__libc_init_array+0x40>)
 8003ece:	4c0c      	ldr	r4, [pc, #48]	@ (8003f00 <__libc_init_array+0x44>)
 8003ed0:	f000 f818 	bl	8003f04 <_init>
 8003ed4:	1b64      	subs	r4, r4, r5
 8003ed6:	10a4      	asrs	r4, r4, #2
 8003ed8:	2600      	movs	r6, #0
 8003eda:	42a6      	cmp	r6, r4
 8003edc:	d105      	bne.n	8003eea <__libc_init_array+0x2e>
 8003ede:	bd70      	pop	{r4, r5, r6, pc}
 8003ee0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ee4:	4798      	blx	r3
 8003ee6:	3601      	adds	r6, #1
 8003ee8:	e7ee      	b.n	8003ec8 <__libc_init_array+0xc>
 8003eea:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eee:	4798      	blx	r3
 8003ef0:	3601      	adds	r6, #1
 8003ef2:	e7f2      	b.n	8003eda <__libc_init_array+0x1e>
 8003ef4:	08003f3c 	.word	0x08003f3c
 8003ef8:	08003f3c 	.word	0x08003f3c
 8003efc:	08003f3c 	.word	0x08003f3c
 8003f00:	08003f40 	.word	0x08003f40

08003f04 <_init>:
 8003f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f06:	bf00      	nop
 8003f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f0a:	bc08      	pop	{r3}
 8003f0c:	469e      	mov	lr, r3
 8003f0e:	4770      	bx	lr

08003f10 <_fini>:
 8003f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f12:	bf00      	nop
 8003f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f16:	bc08      	pop	{r3}
 8003f18:	469e      	mov	lr, r3
 8003f1a:	4770      	bx	lr
