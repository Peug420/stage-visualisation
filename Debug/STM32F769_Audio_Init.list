
STM32F769_Audio_Init.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a88  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003c80  08003c80  00004c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c98  08003c98  000050d4  2**0
                  CONTENTS
  4 .ARM          00000008  08003c98  08003c98  00004c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ca0  08003ca0  000050d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ca0  08003ca0  00004ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ca4  08003ca4  00004ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  08003ca8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bf4  200000d4  08003d7c  000050d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000cc8  08003d7c  00005cc8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000050d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000188a1  00000000  00000000  00005102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003563  00000000  00000000  0001d9a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000b4db  00000000  00000000  00020f06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010b0  00000000  00000000  0002c3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d71  00000000  00000000  0002d498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002f7a3  00000000  00000000  0002e209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001da93  00000000  00000000  0005d9ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011cf88  00000000  00000000  0007b43f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001983c7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002d64  00000000  00000000  0019840c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  0019b170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	200000d4 	.word	0x200000d4
 8000214:	00000000 	.word	0x00000000
 8000218:	08003c68 	.word	0x08003c68

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	200000d8 	.word	0x200000d8
 8000234:	08003c68 	.word	0x08003c68

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <write_register>:
#include "stm32f7xx.h"

extern I2C_HandleTypeDef hi2c4;

void write_register(uint16_t register_pointer, uint16_t register_value)
{
 8000528:	b500      	push	{lr}
 800052a:	b085      	sub	sp, #20
    uint8_t data[4];

    data[0] = register_pointer>>8;  // MSB byte of 16bit register
 800052c:	0a03      	lsrs	r3, r0, #8
 800052e:	f88d 300c 	strb.w	r3, [sp, #12]
    data[1] = register_pointer;  // LSB byte of 16bit register
 8000532:	f88d 000d 	strb.w	r0, [sp, #13]
    data[2] = register_value>>8;    // MSB byte of 16bit data
 8000536:	0a0b      	lsrs	r3, r1, #8
 8000538:	f88d 300e 	strb.w	r3, [sp, #14]
    data[3] = register_value;       // LSB byte of 16bit data
 800053c:	f88d 100f 	strb.w	r1, [sp, #15]

    HAL_I2C_Master_Transmit(&hi2c4, CODECI2CADDRESS, data, 4, 100);  // data is the start pointer of our array
 8000540:	2364      	movs	r3, #100	@ 0x64
 8000542:	9300      	str	r3, [sp, #0]
 8000544:	2304      	movs	r3, #4
 8000546:	aa03      	add	r2, sp, #12
 8000548:	2134      	movs	r1, #52	@ 0x34
 800054a:	4803      	ldr	r0, [pc, #12]	@ (8000558 <write_register+0x30>)
 800054c:	f001 fdc8 	bl	80020e0 <HAL_I2C_Master_Transmit>
}
 8000550:	b005      	add	sp, #20
 8000552:	f85d fb04 	ldr.w	pc, [sp], #4
 8000556:	bf00      	nop
 8000558:	20000198 	.word	0x20000198

0800055c <Codec>:


void Codec(void){
 800055c:	b508      	push	{r3, lr}

	/*Reset all Registers*/
	write_register(0x0000, 0x0000);
 800055e:	2100      	movs	r1, #0
 8000560:	4608      	mov	r0, r1
 8000562:	f7ff ffe1 	bl	8000528 <write_register>

	/* wm8994 Errata Work-Arounds */
	write_register(0x102, 0x0003);
 8000566:	2103      	movs	r1, #3
 8000568:	f44f 7081 	mov.w	r0, #258	@ 0x102
 800056c:	f7ff ffdc 	bl	8000528 <write_register>
	write_register(0x817, 0x0000);
 8000570:	2100      	movs	r1, #0
 8000572:	f640 0017 	movw	r0, #2071	@ 0x817
 8000576:	f7ff ffd7 	bl	8000528 <write_register>
	write_register(0x102, 0x0000);
 800057a:	2100      	movs	r1, #0
 800057c:	f44f 7081 	mov.w	r0, #258	@ 0x102
 8000580:	f7ff ffd2 	bl	8000528 <write_register>

	/* Enable VMID soft start (fast), Start-up Bias Current Enabled */
	write_register(0x39, 0x006C);
 8000584:	216c      	movs	r1, #108	@ 0x6c
 8000586:	2039      	movs	r0, #57	@ 0x39
 8000588:	f7ff ffce 	bl	8000528 <write_register>


	/* Enable bias generator, Enable VMID */
	write_register(0x01, 0x0013);
 800058c:	2113      	movs	r1, #19
 800058e:	2001      	movs	r0, #1
 8000590:	f7ff ffca 	bl	8000528 <write_register>


	/* Add Delay */
	HAL_Delay(50);
 8000594:	2032      	movs	r0, #50	@ 0x32
 8000596:	f000 fdcb 	bl	8001130 <HAL_Delay>

	/*Headphones Out*/
    /* Disable DAC2 (Left), Disable DAC2 (Right),
    Enable DAC1 (Left), Enable DAC1 (Right)*/
	write_register(0x05, 0x0303);
 800059a:	f240 3103 	movw	r1, #771	@ 0x303
 800059e:	2005      	movs	r0, #5
 80005a0:	f7ff ffc2 	bl	8000528 <write_register>

    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
	write_register(0x601, 0x0001);
 80005a4:	2101      	movs	r1, #1
 80005a6:	f240 6001 	movw	r0, #1537	@ 0x601
 80005aa:	f7ff ffbd 	bl	8000528 <write_register>

    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
	write_register(0x602, 0x0001);
 80005ae:	2101      	movs	r1, #1
 80005b0:	f240 6002 	movw	r0, #1538	@ 0x602
 80005b4:	f7ff ffb8 	bl	8000528 <write_register>

    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
	write_register(0x604, 0x0000);
 80005b8:	2100      	movs	r1, #0
 80005ba:	f240 6004 	movw	r0, #1540	@ 0x604
 80005be:	f7ff ffb3 	bl	8000528 <write_register>

    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
	write_register(0x605, 0x0000);
 80005c2:	2100      	movs	r1, #0
 80005c4:	f240 6005 	movw	r0, #1541	@ 0x605
 80005c8:	f7ff ffae 	bl	8000528 <write_register>

	//Input Line In

    /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
	write_register(0x28, 0x0011);
 80005cc:	2111      	movs	r1, #17
 80005ce:	2028      	movs	r0, #40	@ 0x28
 80005d0:	f7ff ffaa 	bl	8000528 <write_register>

    /* Disable mute on IN1L_TO_MIXINL and +0dB on IN1L PGA output */
	write_register(0x29, 0x0020);
 80005d4:	2120      	movs	r1, #32
 80005d6:	2029      	movs	r0, #41	@ 0x29
 80005d8:	f7ff ffa6 	bl	8000528 <write_register>

    /* Disable mute on IN1R_TO_MIXINR +0dB on IN1R PGA output */

	write_register(0x2A, 0x0020);
 80005dc:	2120      	movs	r1, #32
 80005de:	202a      	movs	r0, #42	@ 0x2a
 80005e0:	f7ff ffa2 	bl	8000528 <write_register>

    /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
     * Enable Left ADC, Enable Right ADC */
	write_register(0x04, 0x0303);
 80005e4:	f240 3103 	movw	r1, #771	@ 0x303
 80005e8:	2004      	movs	r0, #4
 80005ea:	f7ff ff9d 	bl	8000528 <write_register>

    /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
    //counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
	write_register(0x440, 0x200);
 80005ee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005f2:	f44f 6088 	mov.w	r0, #1088	@ 0x440
 80005f6:	f7ff ff97 	bl	8000528 <write_register>

    /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
	write_register(0x02, 0x6350);
 80005fa:	f246 3150 	movw	r1, #25424	@ 0x6350
 80005fe:	2002      	movs	r0, #2
 8000600:	f7ff ff92 	bl	8000528 <write_register>

    /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
	write_register(0x606, 0x0002);
 8000604:	2102      	movs	r1, #2
 8000606:	f240 6006 	movw	r0, #1542	@ 0x606
 800060a:	f7ff ff8d 	bl	8000528 <write_register>

    /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
	write_register(0x607, 0x0002);
 800060e:	2102      	movs	r1, #2
 8000610:	f240 6007 	movw	r0, #1543	@ 0x607
 8000614:	f7ff ff88 	bl	8000528 <write_register>

    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
	write_register(0x700, 0x000D);
 8000618:	210d      	movs	r1, #13
 800061a:	f44f 60e0 	mov.w	r0, #1792	@ 0x700
 800061e:	f7ff ff83 	bl	8000528 <write_register>

	/*Audio Frequency*/

    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */
	write_register(0x210, 0x0083);
 8000622:	2183      	movs	r1, #131	@ 0x83
 8000624:	f44f 7004 	mov.w	r0, #528	@ 0x210
 8000628:	f7ff ff7e 	bl	8000528 <write_register>

	/* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
	write_register(0x300, 0x4010);
 800062c:	f244 0110 	movw	r1, #16400	@ 0x4010
 8000630:	f44f 7040 	mov.w	r0, #768	@ 0x300
 8000634:	f7ff ff78 	bl	8000528 <write_register>


	/* slave mode */
	write_register(0x302, 0x0000);
 8000638:	2100      	movs	r1, #0
 800063a:	f240 3002 	movw	r0, #770	@ 0x302
 800063e:	f7ff ff73 	bl	8000528 <write_register>

	/* Enable the DSP processing clock for AIF1, Enable the core clock */
	write_register(0x208, 0x000A);
 8000642:	210a      	movs	r1, #10
 8000644:	f44f 7002 	mov.w	r0, #520	@ 0x208
 8000648:	f7ff ff6e 	bl	8000528 <write_register>

	/* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
	write_register(0x200, 0x0001);
 800064c:	2101      	movs	r1, #1
 800064e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000652:	f7ff ff69 	bl	8000528 <write_register>


    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
	write_register(0x03, 0x0300);
 8000656:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800065a:	2003      	movs	r0, #3
 800065c:	f7ff ff64 	bl	8000528 <write_register>

	/* Left Speaker Mixer Volume = 0dB */
	write_register(0x22, 0x0000);
 8000660:	2100      	movs	r1, #0
 8000662:	2022      	movs	r0, #34	@ 0x22
 8000664:	f7ff ff60 	bl	8000528 <write_register>

	/* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
	write_register(0x23, 0x0000);
 8000668:	2100      	movs	r1, #0
 800066a:	2023      	movs	r0, #35	@ 0x23
 800066c:	f7ff ff5c 	bl	8000528 <write_register>

	/* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
	    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
	write_register(0x36, 0x0300);
 8000670:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8000674:	2036      	movs	r0, #54	@ 0x36
 8000676:	f7ff ff57 	bl	8000528 <write_register>

	/* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
	write_register(0x01, 0x3003);
 800067a:	f243 0103 	movw	r1, #12291	@ 0x3003
 800067e:	2001      	movs	r0, #1
 8000680:	f7ff ff52 	bl	8000528 <write_register>


	 /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
	write_register(0x51, 0x0005);
 8000684:	2105      	movs	r1, #5
 8000686:	2051      	movs	r0, #81	@ 0x51
 8000688:	f7ff ff4e 	bl	8000528 <write_register>

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
	write_register(0x01, 0x3303);
 800068c:	f243 3103 	movw	r1, #13059	@ 0x3303
 8000690:	2001      	movs	r0, #1
 8000692:	f7ff ff49 	bl	8000528 <write_register>

	 /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
	write_register(0x60, 0x0022);
 8000696:	2122      	movs	r1, #34	@ 0x22
 8000698:	2060      	movs	r0, #96	@ 0x60
 800069a:	f7ff ff45 	bl	8000528 <write_register>

	/* Enable Charge Pump */
	write_register(0x4C, 0x9F25);
 800069e:	f649 7125 	movw	r1, #40741	@ 0x9f25
 80006a2:	204c      	movs	r0, #76	@ 0x4c
 80006a4:	f7ff ff40 	bl	8000528 <write_register>

    /* Add Delay */
	HAL_Delay(15);
 80006a8:	200f      	movs	r0, #15
 80006aa:	f000 fd41 	bl	8001130 <HAL_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    write_register(0x2D, 0x0001);
 80006ae:	2101      	movs	r1, #1
 80006b0:	202d      	movs	r0, #45	@ 0x2d
 80006b2:	f7ff ff39 	bl	8000528 <write_register>

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    write_register(0x2E, 0x0001);
 80006b6:	2101      	movs	r1, #1
 80006b8:	202e      	movs	r0, #46	@ 0x2e
 80006ba:	f7ff ff35 	bl	8000528 <write_register>

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
       /* idem for SPKOUTL and SPKOUTR */
    write_register(0x03, 0x0030 | 0x0300);
 80006be:	f44f 714c 	mov.w	r1, #816	@ 0x330
 80006c2:	2003      	movs	r0, #3
 80006c4:	f7ff ff30 	bl	8000528 <write_register>


    /* Enable DC Servo and trigger start-up mode on left and right channels */
    write_register(0x54, 0x0033);
 80006c8:	2133      	movs	r1, #51	@ 0x33
 80006ca:	2054      	movs	r0, #84	@ 0x54
 80006cc:	f7ff ff2c 	bl	8000528 <write_register>

    /* Add Delay */
    HAL_Delay(250);
 80006d0:	20fa      	movs	r0, #250	@ 0xfa
 80006d2:	f000 fd2d 	bl	8001130 <HAL_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    write_register(0x60, 0x00EE);
 80006d6:	21ee      	movs	r1, #238	@ 0xee
 80006d8:	2060      	movs	r0, #96	@ 0x60
 80006da:	f7ff ff25 	bl	8000528 <write_register>

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    write_register(0x610, 0x00C0);
 80006de:	21c0      	movs	r1, #192	@ 0xc0
 80006e0:	f44f 60c2 	mov.w	r0, #1552	@ 0x610
 80006e4:	f7ff ff20 	bl	8000528 <write_register>

    /* Unmute DAC 1 (Right) */
    write_register(0x611, 0x00C0);
 80006e8:	21c0      	movs	r1, #192	@ 0xc0
 80006ea:	f240 6011 	movw	r0, #1553	@ 0x611
 80006ee:	f7ff ff1b 	bl	8000528 <write_register>

    /* Unmute the AIF1 Timeslot 0 DAC path */
    write_register(0x420, 0x0000);
 80006f2:	2100      	movs	r1, #0
 80006f4:	f44f 6084 	mov.w	r0, #1056	@ 0x420
 80006f8:	f7ff ff16 	bl	8000528 <write_register>

    /* Unmute DAC 2 (Left) */
    write_register(0x612, 0x00C0);
 80006fc:	21c0      	movs	r1, #192	@ 0xc0
 80006fe:	f240 6012 	movw	r0, #1554	@ 0x612
 8000702:	f7ff ff11 	bl	8000528 <write_register>

    /* Unmute DAC 2 (Right) */
    write_register(0x613, 0x00C0);
 8000706:	21c0      	movs	r1, #192	@ 0xc0
 8000708:	f240 6013 	movw	r0, #1555	@ 0x613
 800070c:	f7ff ff0c 	bl	8000528 <write_register>

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    write_register(0x422, 0x0000);
 8000710:	2100      	movs	r1, #0
 8000712:	f240 4022 	movw	r0, #1058	@ 0x422
 8000716:	f7ff ff07 	bl	8000528 <write_register>


    /* Disable mute on IN1L, IN1L Volume = +0dB */
    write_register(0x18, 0x000B);
 800071a:	210b      	movs	r1, #11
 800071c:	2018      	movs	r0, #24
 800071e:	f7ff ff03 	bl	8000528 <write_register>

    /* Disable mute on IN1R, IN1R Volume = +0dB */
    write_register(0x1A, 0x000B);
 8000722:	210b      	movs	r1, #11
 8000724:	201a      	movs	r0, #26
 8000726:	f7ff feff 	bl	8000528 <write_register>

    /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
    write_register(0x410, 0x1800);
 800072a:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800072e:	f44f 6082 	mov.w	r0, #1040	@ 0x410
 8000732:	f7ff fef9 	bl	8000528 <write_register>


    /*Voulume Settings*/

    /* Left Headphone Volume */
    write_register(0x1C, 0x5B);
 8000736:	215b      	movs	r1, #91	@ 0x5b
 8000738:	201c      	movs	r0, #28
 800073a:	f7ff fef5 	bl	8000528 <write_register>

    /* Right Headphone Volume */
    write_register(0x1D, 0x5B);
 800073e:	215b      	movs	r1, #91	@ 0x5b
 8000740:	201d      	movs	r0, #29
 8000742:	f7ff fef1 	bl	8000528 <write_register>

    /* Left Speaker Volume */
    write_register(0x26, 0x5B);
 8000746:	215b      	movs	r1, #91	@ 0x5b
 8000748:	2026      	movs	r0, #38	@ 0x26
 800074a:	f7ff feed 	bl	8000528 <write_register>

    /* Right Speaker Volume */
    write_register(0x27, 0x5B);
 800074e:	215b      	movs	r1, #91	@ 0x5b
 8000750:	2027      	movs	r0, #39	@ 0x27
 8000752:	f7ff fee9 	bl	8000528 <write_register>

    /* Left AIF1 ADC1 volume */
    write_register(0x400, 0x99);
 8000756:	2199      	movs	r1, #153	@ 0x99
 8000758:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800075c:	f7ff fee4 	bl	8000528 <write_register>

    /* Right AIF1 ADC1 volume */
    write_register(0x401, 0x99);
 8000760:	2199      	movs	r1, #153	@ 0x99
 8000762:	f240 4001 	movw	r0, #1025	@ 0x401
 8000766:	f7ff fedf 	bl	8000528 <write_register>

    /* Left AIF1 ADC2 volume */
    write_register(0x404, 0x99);
 800076a:	2199      	movs	r1, #153	@ 0x99
 800076c:	f240 4004 	movw	r0, #1028	@ 0x404
 8000770:	f7ff feda 	bl	8000528 <write_register>

    /* Right AIF1 ADC2 volume */
    write_register(0x405, 0x99);
 8000774:	2199      	movs	r1, #153	@ 0x99
 8000776:	f240 4005 	movw	r0, #1029	@ 0x405
 800077a:	f7ff fed5 	bl	8000528 <write_register>

    /*Unmute Codec*/

    /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
    write_register(0x420, 0x0000);
 800077e:	2100      	movs	r1, #0
 8000780:	f44f 6084 	mov.w	r0, #1056	@ 0x420
 8000784:	f7ff fed0 	bl	8000528 <write_register>

    /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
    write_register(0x422, 0x0000);
 8000788:	2100      	movs	r1, #0
 800078a:	f240 4022 	movw	r0, #1058	@ 0x422
 800078e:	f7ff fecb 	bl	8000528 <write_register>


}
 8000792:	bd08      	pop	{r3, pc}

08000794 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000794:	b500      	push	{lr}
 8000796:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000798:	2300      	movs	r3, #0
 800079a:	9300      	str	r3, [sp, #0]
 800079c:	9301      	str	r3, [sp, #4]
 800079e:	9302      	str	r3, [sp, #8]
 80007a0:	9303      	str	r3, [sp, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007a2:	4823      	ldr	r0, [pc, #140]	@ (8000830 <MX_ADC1_Init+0x9c>)
 80007a4:	4a23      	ldr	r2, [pc, #140]	@ (8000834 <MX_ADC1_Init+0xa0>)
 80007a6:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007a8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80007ac:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007ae:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007b0:	2201      	movs	r2, #1
 80007b2:	6102      	str	r2, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007b4:	6183      	str	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007b6:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80007ba:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 80007be:	62c1      	str	r1, [r0, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T5_TRGO;
 80007c0:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 80007c4:	6281      	str	r1, [r0, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007c6:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 3;
 80007c8:	2103      	movs	r1, #3
 80007ca:	61c1      	str	r1, [r0, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80007cc:	f880 2030 	strb.w	r2, [r0, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80007d0:	6143      	str	r3, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007d2:	f000 fcc1 	bl	8001158 <HAL_ADC_Init>
 80007d6:	b9f8      	cbnz	r0, 8000818 <MX_ADC1_Init+0x84>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80007d8:	2306      	movs	r3, #6
 80007da:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007dc:	2301      	movs	r3, #1
 80007de:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80007e0:	2307      	movs	r3, #7
 80007e2:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e4:	4669      	mov	r1, sp
 80007e6:	4812      	ldr	r0, [pc, #72]	@ (8000830 <MX_ADC1_Init+0x9c>)
 80007e8:	f000 fe8a 	bl	8001500 <HAL_ADC_ConfigChannel>
 80007ec:	b9b8      	cbnz	r0, 800081e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80007ee:	2304      	movs	r3, #4
 80007f0:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80007f2:	2302      	movs	r3, #2
 80007f4:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007f6:	4669      	mov	r1, sp
 80007f8:	480d      	ldr	r0, [pc, #52]	@ (8000830 <MX_ADC1_Init+0x9c>)
 80007fa:	f000 fe81 	bl	8001500 <HAL_ADC_ConfigChannel>
 80007fe:	b988      	cbnz	r0, 8000824 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000800:	230c      	movs	r3, #12
 8000802:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000804:	2303      	movs	r3, #3
 8000806:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000808:	4669      	mov	r1, sp
 800080a:	4809      	ldr	r0, [pc, #36]	@ (8000830 <MX_ADC1_Init+0x9c>)
 800080c:	f000 fe78 	bl	8001500 <HAL_ADC_ConfigChannel>
 8000810:	b958      	cbnz	r0, 800082a <MX_ADC1_Init+0x96>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000812:	b005      	add	sp, #20
 8000814:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000818:	f000 fa92 	bl	8000d40 <Error_Handler>
 800081c:	e7dc      	b.n	80007d8 <MX_ADC1_Init+0x44>
    Error_Handler();
 800081e:	f000 fa8f 	bl	8000d40 <Error_Handler>
 8000822:	e7e4      	b.n	80007ee <MX_ADC1_Init+0x5a>
    Error_Handler();
 8000824:	f000 fa8c 	bl	8000d40 <Error_Handler>
 8000828:	e7ea      	b.n	8000800 <MX_ADC1_Init+0x6c>
    Error_Handler();
 800082a:	f000 fa89 	bl	8000d40 <Error_Handler>
}
 800082e:	e7f0      	b.n	8000812 <MX_ADC1_Init+0x7e>
 8000830:	20000150 	.word	0x20000150
 8000834:	40012000 	.word	0x40012000

08000838 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083c:	2300      	movs	r3, #0
 800083e:	9303      	str	r3, [sp, #12]
 8000840:	9304      	str	r3, [sp, #16]
 8000842:	9305      	str	r3, [sp, #20]
 8000844:	9306      	str	r3, [sp, #24]
 8000846:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC1)
 8000848:	6802      	ldr	r2, [r0, #0]
 800084a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800084e:	f503 3390 	add.w	r3, r3, #73728	@ 0x12000
 8000852:	429a      	cmp	r2, r3
 8000854:	d001      	beq.n	800085a <HAL_ADC_MspInit+0x22>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000856:	b009      	add	sp, #36	@ 0x24
 8000858:	bd30      	pop	{r4, r5, pc}
 800085a:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 800085c:	f503 338c 	add.w	r3, r3, #71680	@ 0x11800
 8000860:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000862:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000866:	645a      	str	r2, [r3, #68]	@ 0x44
 8000868:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800086a:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 800086e:	9200      	str	r2, [sp, #0]
 8000870:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000872:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000874:	f042 0204 	orr.w	r2, r2, #4
 8000878:	631a      	str	r2, [r3, #48]	@ 0x30
 800087a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800087c:	f002 0204 	and.w	r2, r2, #4
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000884:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000886:	f042 0201 	orr.w	r2, r2, #1
 800088a:	631a      	str	r2, [r3, #48]	@ 0x30
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	9302      	str	r3, [sp, #8]
 8000894:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000896:	2304      	movs	r3, #4
 8000898:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800089a:	2503      	movs	r5, #3
 800089c:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800089e:	a903      	add	r1, sp, #12
 80008a0:	4814      	ldr	r0, [pc, #80]	@ (80008f4 <HAL_ADC_MspInit+0xbc>)
 80008a2:	f001 f977 	bl	8001b94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80008a6:	2350      	movs	r3, #80	@ 0x50
 80008a8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008aa:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2500      	movs	r5, #0
 80008ae:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b0:	a903      	add	r1, sp, #12
 80008b2:	4811      	ldr	r0, [pc, #68]	@ (80008f8 <HAL_ADC_MspInit+0xc0>)
 80008b4:	f001 f96e 	bl	8001b94 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 80008b8:	4810      	ldr	r0, [pc, #64]	@ (80008fc <HAL_ADC_MspInit+0xc4>)
 80008ba:	4b11      	ldr	r3, [pc, #68]	@ (8000900 <HAL_ADC_MspInit+0xc8>)
 80008bc:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80008be:	6045      	str	r5, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008c0:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008c2:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80008c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008c8:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008ca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80008ce:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008d4:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80008d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008da:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80008dc:	6205      	str	r5, [r0, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80008de:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80008e0:	f000 ff84 	bl	80017ec <HAL_DMA_Init>
 80008e4:	b918      	cbnz	r0, 80008ee <HAL_ADC_MspInit+0xb6>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80008e6:	4b05      	ldr	r3, [pc, #20]	@ (80008fc <HAL_ADC_MspInit+0xc4>)
 80008e8:	63a3      	str	r3, [r4, #56]	@ 0x38
 80008ea:	639c      	str	r4, [r3, #56]	@ 0x38
}
 80008ec:	e7b3      	b.n	8000856 <HAL_ADC_MspInit+0x1e>
      Error_Handler();
 80008ee:	f000 fa27 	bl	8000d40 <Error_Handler>
 80008f2:	e7f8      	b.n	80008e6 <HAL_ADC_MspInit+0xae>
 80008f4:	40020800 	.word	0x40020800
 80008f8:	40020000 	.word	0x40020000
 80008fc:	200000f0 	.word	0x200000f0
 8000900:	40026410 	.word	0x40026410

08000904 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000904:	b500      	push	{lr}
 8000906:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000908:	4b12      	ldr	r3, [pc, #72]	@ (8000954 <MX_DMA_Init+0x50>)
 800090a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800090c:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8000910:	631a      	str	r2, [r3, #48]	@ 0x30
 8000912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000914:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000918:	9301      	str	r3, [sp, #4]
 800091a:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800091c:	2200      	movs	r2, #0
 800091e:	4611      	mov	r1, r2
 8000920:	2038      	movs	r0, #56	@ 0x38
 8000922:	f000 fef1 	bl	8001708 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000926:	2038      	movs	r0, #56	@ 0x38
 8000928:	f000 ff22 	bl	8001770 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800092c:	2200      	movs	r2, #0
 800092e:	4611      	mov	r1, r2
 8000930:	2039      	movs	r0, #57	@ 0x39
 8000932:	f000 fee9 	bl	8001708 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000936:	2039      	movs	r0, #57	@ 0x39
 8000938:	f000 ff1a 	bl	8001770 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 800093c:	2200      	movs	r2, #0
 800093e:	4611      	mov	r1, r2
 8000940:	203c      	movs	r0, #60	@ 0x3c
 8000942:	f000 fee1 	bl	8001708 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000946:	203c      	movs	r0, #60	@ 0x3c
 8000948:	f000 ff12 	bl	8001770 <HAL_NVIC_EnableIRQ>

}
 800094c:	b003      	add	sp, #12
 800094e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000952:	bf00      	nop
 8000954:	40023800 	.word	0x40023800

08000958 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000958:	b530      	push	{r4, r5, lr}
 800095a:	b08f      	sub	sp, #60	@ 0x3c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095c:	2400      	movs	r4, #0
 800095e:	9409      	str	r4, [sp, #36]	@ 0x24
 8000960:	940a      	str	r4, [sp, #40]	@ 0x28
 8000962:	940b      	str	r4, [sp, #44]	@ 0x2c
 8000964:	940c      	str	r4, [sp, #48]	@ 0x30
 8000966:	940d      	str	r4, [sp, #52]	@ 0x34

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000968:	4b2d      	ldr	r3, [pc, #180]	@ (8000a20 <MX_GPIO_Init+0xc8>)
 800096a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800096c:	f042 0210 	orr.w	r2, r2, #16
 8000970:	631a      	str	r2, [r3, #48]	@ 0x30
 8000972:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000974:	f002 0210 	and.w	r2, r2, #16
 8000978:	9201      	str	r2, [sp, #4]
 800097a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800097e:	f042 0202 	orr.w	r2, r2, #2
 8000982:	631a      	str	r2, [r3, #48]	@ 0x30
 8000984:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000986:	f002 0202 	and.w	r2, r2, #2
 800098a:	9202      	str	r2, [sp, #8]
 800098c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800098e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000990:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000994:	631a      	str	r2, [r3, #48]	@ 0x30
 8000996:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000998:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 800099c:	9203      	str	r2, [sp, #12]
 800099e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80009a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80009a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80009a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80009aa:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80009ae:	9204      	str	r2, [sp, #16]
 80009b0:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80009b4:	f042 0204 	orr.w	r2, r2, #4
 80009b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80009ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80009bc:	f002 0204 	and.w	r2, r2, #4
 80009c0:	9205      	str	r2, [sp, #20]
 80009c2:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80009c6:	f042 0208 	orr.w	r2, r2, #8
 80009ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80009cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80009ce:	f002 0208 	and.w	r2, r2, #8
 80009d2:	9206      	str	r2, [sp, #24]
 80009d4:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80009d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80009d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80009dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80009de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80009e0:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 80009e4:	9207      	str	r2, [sp, #28]
 80009e6:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80009ea:	f042 0201 	orr.w	r2, r2, #1
 80009ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	9308      	str	r3, [sp, #32]
 80009f8:	9b08      	ldr	r3, [sp, #32]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_5, GPIO_PIN_RESET);
 80009fa:	4d0a      	ldr	r5, [pc, #40]	@ (8000a24 <MX_GPIO_Init+0xcc>)
 80009fc:	4622      	mov	r2, r4
 80009fe:	2120      	movs	r1, #32
 8000a00:	4628      	mov	r0, r5
 8000a02:	f001 f9c3 	bl	8001d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PJ5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a06:	2320      	movs	r3, #32
 8000a08:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	930a      	str	r3, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	940c      	str	r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000a12:	a909      	add	r1, sp, #36	@ 0x24
 8000a14:	4628      	mov	r0, r5
 8000a16:	f001 f8bd 	bl	8001b94 <HAL_GPIO_Init>

}
 8000a1a:	b00f      	add	sp, #60	@ 0x3c
 8000a1c:	bd30      	pop	{r4, r5, pc}
 8000a1e:	bf00      	nop
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40022400 	.word	0x40022400

08000a28 <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8000a28:	b508      	push	{r3, lr}
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000a2a:	4812      	ldr	r0, [pc, #72]	@ (8000a74 <MX_I2C4_Init+0x4c>)
 8000a2c:	4b12      	ldr	r3, [pc, #72]	@ (8000a78 <MX_I2C4_Init+0x50>)
 8000a2e:	6003      	str	r3, [r0, #0]
  hi2c4.Init.Timing = 0x20404768;
 8000a30:	4b12      	ldr	r3, [pc, #72]	@ (8000a7c <MX_I2C4_Init+0x54>)
 8000a32:	6043      	str	r3, [r0, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	6083      	str	r3, [r0, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a38:	2201      	movs	r2, #1
 8000a3a:	60c2      	str	r2, [r0, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a3c:	6103      	str	r3, [r0, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000a3e:	6143      	str	r3, [r0, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a40:	6183      	str	r3, [r0, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a42:	61c3      	str	r3, [r0, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a44:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000a46:	f001 faf1 	bl	800202c <HAL_I2C_Init>
 8000a4a:	b950      	cbnz	r0, 8000a62 <MX_I2C4_Init+0x3a>
  {
    Error_Handler();
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4809      	ldr	r0, [pc, #36]	@ (8000a74 <MX_I2C4_Init+0x4c>)
 8000a50:	f001 fc08 	bl	8002264 <HAL_I2CEx_ConfigAnalogFilter>
 8000a54:	b940      	cbnz	r0, 8000a68 <MX_I2C4_Init+0x40>
  {
    Error_Handler();
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000a56:	2100      	movs	r1, #0
 8000a58:	4806      	ldr	r0, [pc, #24]	@ (8000a74 <MX_I2C4_Init+0x4c>)
 8000a5a:	f001 fc31 	bl	80022c0 <HAL_I2CEx_ConfigDigitalFilter>
 8000a5e:	b930      	cbnz	r0, 8000a6e <MX_I2C4_Init+0x46>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000a60:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000a62:	f000 f96d 	bl	8000d40 <Error_Handler>
 8000a66:	e7f1      	b.n	8000a4c <MX_I2C4_Init+0x24>
    Error_Handler();
 8000a68:	f000 f96a 	bl	8000d40 <Error_Handler>
 8000a6c:	e7f3      	b.n	8000a56 <MX_I2C4_Init+0x2e>
    Error_Handler();
 8000a6e:	f000 f967 	bl	8000d40 <Error_Handler>
}
 8000a72:	e7f5      	b.n	8000a60 <MX_I2C4_Init+0x38>
 8000a74:	20000198 	.word	0x20000198
 8000a78:	40006000 	.word	0x40006000
 8000a7c:	20404768 	.word	0x20404768

08000a80 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a82:	b0ad      	sub	sp, #180	@ 0xb4
 8000a84:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a86:	2100      	movs	r1, #0
 8000a88:	9127      	str	r1, [sp, #156]	@ 0x9c
 8000a8a:	9128      	str	r1, [sp, #160]	@ 0xa0
 8000a8c:	9129      	str	r1, [sp, #164]	@ 0xa4
 8000a8e:	912a      	str	r1, [sp, #168]	@ 0xa8
 8000a90:	912b      	str	r1, [sp, #172]	@ 0xac
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a92:	2290      	movs	r2, #144	@ 0x90
 8000a94:	a803      	add	r0, sp, #12
 8000a96:	f003 f8bb 	bl	8003c10 <memset>
  if(i2cHandle->Instance==I2C4)
 8000a9a:	6822      	ldr	r2, [r4, #0]
 8000a9c:	4b23      	ldr	r3, [pc, #140]	@ (8000b2c <HAL_I2C_MspInit+0xac>)
 8000a9e:	429a      	cmp	r2, r3
 8000aa0:	d001      	beq.n	8000aa6 <HAL_I2C_MspInit+0x26>
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8000aa2:	b02d      	add	sp, #180	@ 0xb4
 8000aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000aa6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000aaa:	9303      	str	r3, [sp, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aac:	a803      	add	r0, sp, #12
 8000aae:	f001 ffa1 	bl	80029f4 <HAL_RCCEx_PeriphCLKConfig>
 8000ab2:	2800      	cmp	r0, #0
 8000ab4:	d136      	bne.n	8000b24 <HAL_I2C_MspInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab6:	4c1e      	ldr	r4, [pc, #120]	@ (8000b30 <HAL_I2C_MspInit+0xb0>)
 8000ab8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000aba:	f043 0302 	orr.w	r3, r3, #2
 8000abe:	6323      	str	r3, [r4, #48]	@ 0x30
 8000ac0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000ac2:	f003 0302 	and.w	r3, r3, #2
 8000ac6:	9300      	str	r3, [sp, #0]
 8000ac8:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aca:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000acc:	f043 0308 	orr.w	r3, r3, #8
 8000ad0:	6323      	str	r3, [r4, #48]	@ 0x30
 8000ad2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000ad4:	f003 0308 	and.w	r3, r3, #8
 8000ad8:	9301      	str	r3, [sp, #4]
 8000ada:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000adc:	2380      	movs	r3, #128	@ 0x80
 8000ade:	9327      	str	r3, [sp, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ae0:	2712      	movs	r7, #18
 8000ae2:	9728      	str	r7, [sp, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2600      	movs	r6, #0
 8000ae6:	9629      	str	r6, [sp, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae8:	2503      	movs	r5, #3
 8000aea:	952a      	str	r5, [sp, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 8000aec:	230b      	movs	r3, #11
 8000aee:	932b      	str	r3, [sp, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af0:	a927      	add	r1, sp, #156	@ 0x9c
 8000af2:	4810      	ldr	r0, [pc, #64]	@ (8000b34 <HAL_I2C_MspInit+0xb4>)
 8000af4:	f001 f84e 	bl	8001b94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000af8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000afc:	9327      	str	r3, [sp, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000afe:	9728      	str	r7, [sp, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	9629      	str	r6, [sp, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b02:	952a      	str	r5, [sp, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000b04:	2304      	movs	r3, #4
 8000b06:	932b      	str	r3, [sp, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b08:	a927      	add	r1, sp, #156	@ 0x9c
 8000b0a:	480b      	ldr	r0, [pc, #44]	@ (8000b38 <HAL_I2C_MspInit+0xb8>)
 8000b0c:	f001 f842 	bl	8001b94 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000b10:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000b12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000b16:	6423      	str	r3, [r4, #64]	@ 0x40
 8000b18:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000b1a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000b1e:	9302      	str	r3, [sp, #8]
 8000b20:	9b02      	ldr	r3, [sp, #8]
}
 8000b22:	e7be      	b.n	8000aa2 <HAL_I2C_MspInit+0x22>
      Error_Handler();
 8000b24:	f000 f90c 	bl	8000d40 <Error_Handler>
 8000b28:	e7c5      	b.n	8000ab6 <HAL_I2C_MspInit+0x36>
 8000b2a:	bf00      	nop
 8000b2c:	40006000 	.word	0x40006000
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40020400 	.word	0x40020400
 8000b38:	40020c00 	.word	0x40020c00

08000b3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b3c:	b500      	push	{lr}
 8000b3e:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b40:	2234      	movs	r2, #52	@ 0x34
 8000b42:	2100      	movs	r1, #0
 8000b44:	a807      	add	r0, sp, #28
 8000b46:	f003 f863 	bl	8003c10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	9302      	str	r3, [sp, #8]
 8000b4e:	9303      	str	r3, [sp, #12]
 8000b50:	9304      	str	r3, [sp, #16]
 8000b52:	9305      	str	r3, [sp, #20]
 8000b54:	9306      	str	r3, [sp, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b56:	4b24      	ldr	r3, [pc, #144]	@ (8000be8 <SystemClock_Config+0xac>)
 8000b58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b5a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000b5e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b66:	9300      	str	r3, [sp, #0]
 8000b68:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b6a:	4b20      	ldr	r3, [pc, #128]	@ (8000bec <SystemClock_Config+0xb0>)
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b7a:	9301      	str	r3, [sp, #4]
 8000b7c:	9b01      	ldr	r3, [sp, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b82:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b86:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b8c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000b90:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000b92:	2219      	movs	r2, #25
 8000b94:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000b96:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 8000b9a:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b9c:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b9e:	2204      	movs	r2, #4
 8000ba0:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ba2:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba4:	a807      	add	r0, sp, #28
 8000ba6:	f001 fbf5 	bl	8002394 <HAL_RCC_OscConfig>
 8000baa:	b9b0      	cbnz	r0, 8000bda <SystemClock_Config+0x9e>
  {
    Error_Handler();
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000bac:	f001 fbb4 	bl	8002318 <HAL_PWREx_EnableOverDrive>
 8000bb0:	b9a8      	cbnz	r0, 8000bde <SystemClock_Config+0xa2>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb2:	230f      	movs	r3, #15
 8000bb4:	9302      	str	r3, [sp, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bbe:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000bc2:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bc8:	9306      	str	r3, [sp, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000bca:	2107      	movs	r1, #7
 8000bcc:	a802      	add	r0, sp, #8
 8000bce:	f001 fe59 	bl	8002884 <HAL_RCC_ClockConfig>
 8000bd2:	b930      	cbnz	r0, 8000be2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
  }
}
 8000bd4:	b015      	add	sp, #84	@ 0x54
 8000bd6:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bda:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <SystemClock_Config+0xa0>
 8000bde:	b672      	cpsid	i
 8000be0:	e7fe      	b.n	8000be0 <SystemClock_Config+0xa4>
 8000be2:	b672      	cpsid	i
 8000be4:	e7fe      	b.n	8000be4 <SystemClock_Config+0xa8>
 8000be6:	bf00      	nop
 8000be8:	40023800 	.word	0x40023800
 8000bec:	40007000 	.word	0x40007000

08000bf0 <PeriphCommonClock_Config>:
{
 8000bf0:	b500      	push	{lr}
 8000bf2:	b0a5      	sub	sp, #148	@ 0x94
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bf4:	227c      	movs	r2, #124	@ 0x7c
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	a805      	add	r0, sp, #20
 8000bfa:	f003 f809 	bl	8003c10 <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8000bfe:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000c02:	9300      	str	r3, [sp, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 344;
 8000c04:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 8000c08:	9301      	str	r3, [sp, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c0e:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 7;
 8000c10:	2307      	movs	r3, #7
 8000c12:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000c14:	2301      	movs	r3, #1
 8000c16:	9309      	str	r3, [sp, #36]	@ 0x24
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLI2S;
 8000c18:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000c1c:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c1e:	4668      	mov	r0, sp
 8000c20:	f001 fee8 	bl	80029f4 <HAL_RCCEx_PeriphCLKConfig>
 8000c24:	b910      	cbnz	r0, 8000c2c <PeriphCommonClock_Config+0x3c>
}
 8000c26:	b025      	add	sp, #148	@ 0x94
 8000c28:	f85d fb04 	ldr.w	pc, [sp], #4
 8000c2c:	b672      	cpsid	i
  while (1)
 8000c2e:	e7fe      	b.n	8000c2e <PeriphCommonClock_Config+0x3e>

08000c30 <HAL_SAI_RxHalfCpltCallback>:
	dataReadyFlag = 1;
 8000c30:	4b01      	ldr	r3, [pc, #4]	@ (8000c38 <HAL_SAI_RxHalfCpltCallback+0x8>)
 8000c32:	2201      	movs	r2, #1
 8000c34:	701a      	strb	r2, [r3, #0]
}
 8000c36:	4770      	bx	lr
 8000c38:	200001f2 	.word	0x200001f2

08000c3c <HAL_SAI_RxCpltCallback>:
	dataReadyFlag = 1;
 8000c3c:	4b01      	ldr	r3, [pc, #4]	@ (8000c44 <HAL_SAI_RxCpltCallback+0x8>)
 8000c3e:	2201      	movs	r2, #1
 8000c40:	701a      	strb	r2, [r3, #0]
}
 8000c42:	4770      	bx	lr
 8000c44:	200001f2 	.word	0x200001f2

08000c48 <HAL_ADC_ConvCpltCallback>:
	AdcChannel1 = AdcValues[0];
 8000c48:	4b05      	ldr	r3, [pc, #20]	@ (8000c60 <HAL_ADC_ConvCpltCallback+0x18>)
 8000c4a:	8819      	ldrh	r1, [r3, #0]
 8000c4c:	4a05      	ldr	r2, [pc, #20]	@ (8000c64 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000c4e:	8011      	strh	r1, [r2, #0]
	AdcChannel2 = AdcValues[1];
 8000c50:	8859      	ldrh	r1, [r3, #2]
 8000c52:	4a05      	ldr	r2, [pc, #20]	@ (8000c68 <HAL_ADC_ConvCpltCallback+0x20>)
 8000c54:	8011      	strh	r1, [r2, #0]
	AdcChannel3 = AdcValues[2];
 8000c56:	889a      	ldrh	r2, [r3, #4]
 8000c58:	4b04      	ldr	r3, [pc, #16]	@ (8000c6c <HAL_ADC_ConvCpltCallback+0x24>)
 8000c5a:	801a      	strh	r2, [r3, #0]
}
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	200001ec 	.word	0x200001ec
 8000c64:	200001e8 	.word	0x200001e8
 8000c68:	200001e6 	.word	0x200001e6
 8000c6c:	200001e4 	.word	0x200001e4

08000c70 <ProcessData>:
void ProcessData(){
 8000c70:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_5, GPIO_PIN_SET);
 8000c72:	4c06      	ldr	r4, [pc, #24]	@ (8000c8c <ProcessData+0x1c>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	2120      	movs	r1, #32
 8000c78:	4620      	mov	r0, r4
 8000c7a:	f001 f887 	bl	8001d8c <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_5, GPIO_PIN_RESET);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2120      	movs	r1, #32
 8000c82:	4620      	mov	r0, r4
 8000c84:	f001 f882 	bl	8001d8c <HAL_GPIO_WritePin>
}
 8000c88:	bd10      	pop	{r4, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40022400 	.word	0x40022400

08000c90 <main>:
{
 8000c90:	b508      	push	{r3, lr}
	arm_biquad_cascade_df2T_init_f32(&IIR_L_kick, STAGES, ba_coeff, state_L_kick);
 8000c92:	4c1e      	ldr	r4, [pc, #120]	@ (8000d0c <main+0x7c>)
 8000c94:	4b1e      	ldr	r3, [pc, #120]	@ (8000d10 <main+0x80>)
 8000c96:	4622      	mov	r2, r4
 8000c98:	210a      	movs	r1, #10
 8000c9a:	481e      	ldr	r0, [pc, #120]	@ (8000d14 <main+0x84>)
 8000c9c:	f000 f9f9 	bl	8001092 <arm_biquad_cascade_df2T_init_f32>
	arm_biquad_cascade_df2T_init_f32(&IIR_R_kick, STAGES, ba_coeff, state_R_kick);
 8000ca0:	4b1d      	ldr	r3, [pc, #116]	@ (8000d18 <main+0x88>)
 8000ca2:	4622      	mov	r2, r4
 8000ca4:	210a      	movs	r1, #10
 8000ca6:	481d      	ldr	r0, [pc, #116]	@ (8000d1c <main+0x8c>)
 8000ca8:	f000 f9f3 	bl	8001092 <arm_biquad_cascade_df2T_init_f32>
  HAL_Init();
 8000cac:	f000 fa22 	bl	80010f4 <HAL_Init>
  SystemClock_Config();
 8000cb0:	f7ff ff44 	bl	8000b3c <SystemClock_Config>
  PeriphCommonClock_Config();
 8000cb4:	f7ff ff9c 	bl	8000bf0 <PeriphCommonClock_Config>
  MX_GPIO_Init();
 8000cb8:	f7ff fe4e 	bl	8000958 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cbc:	f7ff fe22 	bl	8000904 <MX_DMA_Init>
  MX_I2C4_Init();
 8000cc0:	f7ff feb2 	bl	8000a28 <MX_I2C4_Init>
  MX_SAI1_Init();
 8000cc4:	f000 f83e 	bl	8000d44 <MX_SAI1_Init>
  MX_ADC1_Init();
 8000cc8:	f7ff fd64 	bl	8000794 <MX_ADC1_Init>
  MX_TIM5_Init();
 8000ccc:	f000 f968 	bl	8000fa0 <MX_TIM5_Init>
  HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t*) PlaybackBuffer, RECORD_BUFFER_SIZE);
 8000cd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cd4:	4912      	ldr	r1, [pc, #72]	@ (8000d20 <main+0x90>)
 8000cd6:	4813      	ldr	r0, [pc, #76]	@ (8000d24 <main+0x94>)
 8000cd8:	f002 fc36 	bl	8003548 <HAL_SAI_Transmit_DMA>
  HAL_SAI_Receive_DMA(&hsai_BlockB1, (uint8_t*) RecordBuffer, RECORD_BUFFER_SIZE);
 8000cdc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ce0:	4911      	ldr	r1, [pc, #68]	@ (8000d28 <main+0x98>)
 8000ce2:	4812      	ldr	r0, [pc, #72]	@ (8000d2c <main+0x9c>)
 8000ce4:	f002 fcac 	bl	8003640 <HAL_SAI_Receive_DMA>
  HAL_TIM_Base_Start_IT(&htim5);
 8000ce8:	4811      	ldr	r0, [pc, #68]	@ (8000d30 <main+0xa0>)
 8000cea:	f002 fd73 	bl	80037d4 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) AdcValues, 3);
 8000cee:	2203      	movs	r2, #3
 8000cf0:	4910      	ldr	r1, [pc, #64]	@ (8000d34 <main+0xa4>)
 8000cf2:	4811      	ldr	r0, [pc, #68]	@ (8000d38 <main+0xa8>)
 8000cf4:	f000 faf2 	bl	80012dc <HAL_ADC_Start_DMA>
  Codec();
 8000cf8:	f7ff fc30 	bl	800055c <Codec>
	  if(dataReadyFlag){
 8000cfc:	4c0f      	ldr	r4, [pc, #60]	@ (8000d3c <main+0xac>)
 8000cfe:	7823      	ldrb	r3, [r4, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d0fd      	beq.n	8000d00 <main+0x70>
		  ProcessData();
 8000d04:	f7ff ffb4 	bl	8000c70 <ProcessData>
 8000d08:	e7f9      	b.n	8000cfe <main+0x6e>
 8000d0a:	bf00      	nop
 8000d0c:	20000000 	.word	0x20000000
 8000d10:	20000a5c 	.word	0x20000a5c
 8000d14:	20000a00 	.word	0x20000a00
 8000d18:	20000a0c 	.word	0x20000a0c
 8000d1c:	200009f4 	.word	0x200009f4
 8000d20:	200001f4 	.word	0x200001f4
 8000d24:	20000bf4 	.word	0x20000bf4
 8000d28:	200005f4 	.word	0x200005f4
 8000d2c:	20000b70 	.word	0x20000b70
 8000d30:	20000c78 	.word	0x20000c78
 8000d34:	200001ec 	.word	0x200001ec
 8000d38:	20000150 	.word	0x20000150
 8000d3c:	200001f2 	.word	0x200001f2

08000d40 <Error_Handler>:
 8000d40:	b672      	cpsid	i
  while (1)
 8000d42:	e7fe      	b.n	8000d42 <Error_Handler+0x2>

08000d44 <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8000d44:	b508      	push	{r3, lr}

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8000d46:	481a      	ldr	r0, [pc, #104]	@ (8000db0 <MX_SAI1_Init+0x6c>)
 8000d48:	4b1a      	ldr	r3, [pc, #104]	@ (8000db4 <MX_SAI1_Init+0x70>)
 8000d4a:	6003      	str	r3, [r0, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	6041      	str	r1, [r0, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000d50:	6081      	str	r1, [r0, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 8000d52:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d56:	6103      	str	r3, [r0, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000d58:	6141      	str	r1, [r0, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	6183      	str	r3, [r0, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000d5e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8000d62:	61c3      	str	r3, [r0, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000d64:	60c1      	str	r1, [r0, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000d66:	6241      	str	r1, [r0, #36]	@ 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000d68:	6281      	str	r1, [r0, #40]	@ 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000d6a:	62c1      	str	r1, [r0, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 4) != HAL_OK)
 8000d6c:	2304      	movs	r3, #4
 8000d6e:	460a      	mov	r2, r1
 8000d70:	f002 fb4c 	bl	800340c <HAL_SAI_InitProtocol>
 8000d74:	b9a8      	cbnz	r0, 8000da2 <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 8000d76:	4810      	ldr	r0, [pc, #64]	@ (8000db8 <MX_SAI1_Init+0x74>)
 8000d78:	4b10      	ldr	r3, [pc, #64]	@ (8000dbc <MX_SAI1_Init+0x78>)
 8000d7a:	6003      	str	r3, [r0, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	6043      	str	r3, [r0, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8000d80:	2301      	movs	r3, #1
 8000d82:	6083      	str	r3, [r0, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 8000d84:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d88:	6102      	str	r2, [r0, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8000d8a:	6183      	str	r3, [r0, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	60c1      	str	r1, [r0, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000d90:	6241      	str	r1, [r0, #36]	@ 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000d92:	6281      	str	r1, [r0, #40]	@ 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000d94:	62c1      	str	r1, [r0, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 4) != HAL_OK)
 8000d96:	2304      	movs	r3, #4
 8000d98:	460a      	mov	r2, r1
 8000d9a:	f002 fb37 	bl	800340c <HAL_SAI_InitProtocol>
 8000d9e:	b918      	cbnz	r0, 8000da8 <MX_SAI1_Init+0x64>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000da0:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000da2:	f7ff ffcd 	bl	8000d40 <Error_Handler>
 8000da6:	e7e6      	b.n	8000d76 <MX_SAI1_Init+0x32>
    Error_Handler();
 8000da8:	f7ff ffca 	bl	8000d40 <Error_Handler>
}
 8000dac:	e7f8      	b.n	8000da0 <MX_SAI1_Init+0x5c>
 8000dae:	bf00      	nop
 8000db0:	20000bf4 	.word	0x20000bf4
 8000db4:	40015804 	.word	0x40015804
 8000db8:	20000b70 	.word	0x20000b70
 8000dbc:	40015824 	.word	0x40015824

08000dc0 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8000dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dc2:	b089      	sub	sp, #36	@ 0x24
 8000dc4:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8000dc6:	6802      	ldr	r2, [r0, #0]
 8000dc8:	4b48      	ldr	r3, [pc, #288]	@ (8000eec <HAL_SAI_MspInit+0x12c>)
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d005      	beq.n	8000dda <HAL_SAI_MspInit+0x1a>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
    }
    if(saiHandle->Instance==SAI1_Block_B)
 8000dce:	6822      	ldr	r2, [r4, #0]
 8000dd0:	4b47      	ldr	r3, [pc, #284]	@ (8000ef0 <HAL_SAI_MspInit+0x130>)
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d04a      	beq.n	8000e6c <HAL_SAI_MspInit+0xac>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
    }
}
 8000dd6:	b009      	add	sp, #36	@ 0x24
 8000dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (SAI1_client == 0)
 8000dda:	4b46      	ldr	r3, [pc, #280]	@ (8000ef4 <HAL_SAI_MspInit+0x134>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	b94b      	cbnz	r3, 8000df4 <HAL_SAI_MspInit+0x34>
       __HAL_RCC_SAI1_CLK_ENABLE();
 8000de0:	4a45      	ldr	r2, [pc, #276]	@ (8000ef8 <HAL_SAI_MspInit+0x138>)
 8000de2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8000de4:	f441 0180 	orr.w	r1, r1, #4194304	@ 0x400000
 8000de8:	6451      	str	r1, [r2, #68]	@ 0x44
 8000dea:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8000dec:	f402 0280 	and.w	r2, r2, #4194304	@ 0x400000
 8000df0:	9201      	str	r2, [sp, #4]
 8000df2:	9a01      	ldr	r2, [sp, #4]
    SAI1_client ++;
 8000df4:	3301      	adds	r3, #1
 8000df6:	4a3f      	ldr	r2, [pc, #252]	@ (8000ef4 <HAL_SAI_MspInit+0x134>)
 8000df8:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000dfa:	2370      	movs	r3, #112	@ 0x70
 8000dfc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfe:	2702      	movs	r7, #2
 8000e00:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2500      	movs	r5, #0
 8000e04:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e06:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000e08:	2606      	movs	r6, #6
 8000e0a:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e0c:	a903      	add	r1, sp, #12
 8000e0e:	483b      	ldr	r0, [pc, #236]	@ (8000efc <HAL_SAI_MspInit+0x13c>)
 8000e10:	f000 fec0 	bl	8001b94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e14:	2380      	movs	r3, #128	@ 0x80
 8000e16:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1c:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000e1e:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e20:	a903      	add	r1, sp, #12
 8000e22:	4837      	ldr	r0, [pc, #220]	@ (8000f00 <HAL_SAI_MspInit+0x140>)
 8000e24:	f000 feb6 	bl	8001b94 <HAL_GPIO_Init>
    hdma_sai1_a.Instance = DMA2_Stream1;
 8000e28:	4836      	ldr	r0, [pc, #216]	@ (8000f04 <HAL_SAI_MspInit+0x144>)
 8000e2a:	4b37      	ldr	r3, [pc, #220]	@ (8000f08 <HAL_SAI_MspInit+0x148>)
 8000e2c:	6003      	str	r3, [r0, #0]
    hdma_sai1_a.Init.Channel = DMA_CHANNEL_0;
 8000e2e:	6045      	str	r5, [r0, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e30:	2340      	movs	r3, #64	@ 0x40
 8000e32:	6083      	str	r3, [r0, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e34:	60c5      	str	r5, [r0, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8000e36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e3a:	6103      	str	r3, [r0, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e3c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000e40:	6143      	str	r3, [r0, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e42:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e46:	6183      	str	r3, [r0, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8000e48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e4c:	61c3      	str	r3, [r0, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000e4e:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8000e52:	6203      	str	r3, [r0, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e54:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8000e56:	f000 fcc9 	bl	80017ec <HAL_DMA_Init>
 8000e5a:	b920      	cbnz	r0, 8000e66 <HAL_SAI_MspInit+0xa6>
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 8000e5c:	4b29      	ldr	r3, [pc, #164]	@ (8000f04 <HAL_SAI_MspInit+0x144>)
 8000e5e:	6723      	str	r3, [r4, #112]	@ 0x70
 8000e60:	639c      	str	r4, [r3, #56]	@ 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 8000e62:	66e3      	str	r3, [r4, #108]	@ 0x6c
 8000e64:	e7b3      	b.n	8000dce <HAL_SAI_MspInit+0xe>
      Error_Handler();
 8000e66:	f7ff ff6b 	bl	8000d40 <Error_Handler>
 8000e6a:	e7f7      	b.n	8000e5c <HAL_SAI_MspInit+0x9c>
      if (SAI1_client == 0)
 8000e6c:	4b21      	ldr	r3, [pc, #132]	@ (8000ef4 <HAL_SAI_MspInit+0x134>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	b94b      	cbnz	r3, 8000e86 <HAL_SAI_MspInit+0xc6>
       __HAL_RCC_SAI1_CLK_ENABLE();
 8000e72:	4a21      	ldr	r2, [pc, #132]	@ (8000ef8 <HAL_SAI_MspInit+0x138>)
 8000e74:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8000e76:	f441 0180 	orr.w	r1, r1, #4194304	@ 0x400000
 8000e7a:	6451      	str	r1, [r2, #68]	@ 0x44
 8000e7c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8000e7e:	f402 0280 	and.w	r2, r2, #4194304	@ 0x400000
 8000e82:	9202      	str	r2, [sp, #8]
 8000e84:	9a02      	ldr	r2, [sp, #8]
    SAI1_client ++;
 8000e86:	3301      	adds	r3, #1
 8000e88:	4a1a      	ldr	r2, [pc, #104]	@ (8000ef4 <HAL_SAI_MspInit+0x134>)
 8000e8a:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e8c:	2308      	movs	r3, #8
 8000e8e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2500      	movs	r5, #0
 8000e96:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e98:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000e9a:	2306      	movs	r3, #6
 8000e9c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e9e:	a903      	add	r1, sp, #12
 8000ea0:	4816      	ldr	r0, [pc, #88]	@ (8000efc <HAL_SAI_MspInit+0x13c>)
 8000ea2:	f000 fe77 	bl	8001b94 <HAL_GPIO_Init>
    hdma_sai1_b.Instance = DMA2_Stream4;
 8000ea6:	4819      	ldr	r0, [pc, #100]	@ (8000f0c <HAL_SAI_MspInit+0x14c>)
 8000ea8:	4b19      	ldr	r3, [pc, #100]	@ (8000f10 <HAL_SAI_MspInit+0x150>)
 8000eaa:	6003      	str	r3, [r0, #0]
    hdma_sai1_b.Init.Channel = DMA_CHANNEL_1;
 8000eac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000eb0:	6043      	str	r3, [r0, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000eb2:	6085      	str	r5, [r0, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eb4:	60c5      	str	r5, [r0, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8000eb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000eba:	6103      	str	r3, [r0, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ebc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000ec0:	6143      	str	r3, [r0, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ec2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ec6:	6183      	str	r3, [r0, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8000ec8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ecc:	61c3      	str	r3, [r0, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000ece:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8000ed2:	6203      	str	r3, [r0, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ed4:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8000ed6:	f000 fc89 	bl	80017ec <HAL_DMA_Init>
 8000eda:	b920      	cbnz	r0, 8000ee6 <HAL_SAI_MspInit+0x126>
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
 8000edc:	4b0b      	ldr	r3, [pc, #44]	@ (8000f0c <HAL_SAI_MspInit+0x14c>)
 8000ede:	6723      	str	r3, [r4, #112]	@ 0x70
 8000ee0:	639c      	str	r4, [r3, #56]	@ 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
 8000ee2:	66e3      	str	r3, [r4, #108]	@ 0x6c
}
 8000ee4:	e777      	b.n	8000dd6 <HAL_SAI_MspInit+0x16>
      Error_Handler();
 8000ee6:	f7ff ff2b 	bl	8000d40 <Error_Handler>
 8000eea:	e7f7      	b.n	8000edc <HAL_SAI_MspInit+0x11c>
 8000eec:	40015804 	.word	0x40015804
 8000ef0:	40015824 	.word	0x40015824
 8000ef4:	20000aac 	.word	0x20000aac
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	40021000 	.word	0x40021000
 8000f00:	40021800 	.word	0x40021800
 8000f04:	20000b10 	.word	0x20000b10
 8000f08:	40026428 	.word	0x40026428
 8000f0c:	20000ab0 	.word	0x20000ab0
 8000f10:	40026470 	.word	0x40026470

08000f14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f14:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f16:	4b0a      	ldr	r3, [pc, #40]	@ (8000f40 <HAL_MspInit+0x2c>)
 8000f18:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f1a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000f1e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f22:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8000f26:	9200      	str	r2, [sp, #0]
 8000f28:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000f2c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000f30:	645a      	str	r2, [r3, #68]	@ 0x44
 8000f32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f38:	9301      	str	r3, [sp, #4]
 8000f3a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f3c:	b002      	add	sp, #8
 8000f3e:	4770      	bx	lr
 8000f40:	40023800 	.word	0x40023800

08000f44 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <NMI_Handler>

08000f46 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f46:	e7fe      	b.n	8000f46 <HardFault_Handler>

08000f48 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <MemManage_Handler>

08000f4a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f4a:	e7fe      	b.n	8000f4a <BusFault_Handler>

08000f4c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f4c:	e7fe      	b.n	8000f4c <UsageFault_Handler>

08000f4e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f4e:	4770      	bx	lr

08000f50 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f50:	4770      	bx	lr

08000f52 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f52:	4770      	bx	lr

08000f54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f54:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f56:	f000 f8d9 	bl	800110c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f5a:	bd08      	pop	{r3, pc}

08000f5c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000f5c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f5e:	4802      	ldr	r0, [pc, #8]	@ (8000f68 <DMA2_Stream0_IRQHandler+0xc>)
 8000f60:	f000 fd2a 	bl	80019b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000f64:	bd08      	pop	{r3, pc}
 8000f66:	bf00      	nop
 8000f68:	200000f0 	.word	0x200000f0

08000f6c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000f6c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8000f6e:	4802      	ldr	r0, [pc, #8]	@ (8000f78 <DMA2_Stream1_IRQHandler+0xc>)
 8000f70:	f000 fd22 	bl	80019b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000f74:	bd08      	pop	{r3, pc}
 8000f76:	bf00      	nop
 8000f78:	20000b10 	.word	0x20000b10

08000f7c <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8000f7c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8000f7e:	4802      	ldr	r0, [pc, #8]	@ (8000f88 <DMA2_Stream4_IRQHandler+0xc>)
 8000f80:	f000 fd1a 	bl	80019b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8000f84:	bd08      	pop	{r3, pc}
 8000f86:	bf00      	nop
 8000f88:	20000ab0 	.word	0x20000ab0

08000f8c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f8c:	4a03      	ldr	r2, [pc, #12]	@ (8000f9c <SystemInit+0x10>)
 8000f8e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000f92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f96:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f9a:	4770      	bx	lr
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <MX_TIM5_Init>:

TIM_HandleTypeDef htim5;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8000fa0:	b500      	push	{lr}
 8000fa2:	b089      	sub	sp, #36	@ 0x24

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	9304      	str	r3, [sp, #16]
 8000fa8:	9305      	str	r3, [sp, #20]
 8000faa:	9306      	str	r3, [sp, #24]
 8000fac:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fae:	9301      	str	r3, [sp, #4]
 8000fb0:	9302      	str	r3, [sp, #8]
 8000fb2:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000fb4:	4815      	ldr	r0, [pc, #84]	@ (800100c <MX_TIM5_Init+0x6c>)
 8000fb6:	4a16      	ldr	r2, [pc, #88]	@ (8001010 <MX_TIM5_Init+0x70>)
 8000fb8:	6002      	str	r2, [r0, #0]
  htim5.Init.Prescaler = 108-1;
 8000fba:	226b      	movs	r2, #107	@ 0x6b
 8000fbc:	6042      	str	r2, [r0, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fbe:	6083      	str	r3, [r0, #8]
  htim5.Init.Period = 1332;
 8000fc0:	f240 5234 	movw	r2, #1332	@ 0x534
 8000fc4:	60c2      	str	r2, [r0, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc6:	6103      	str	r3, [r0, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fc8:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000fca:	f002 fccf 	bl	800396c <HAL_TIM_Base_Init>
 8000fce:	b998      	cbnz	r0, 8000ff8 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fd0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fd4:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000fd6:	a904      	add	r1, sp, #16
 8000fd8:	480c      	ldr	r0, [pc, #48]	@ (800100c <MX_TIM5_Init+0x6c>)
 8000fda:	f002 fd05 	bl	80039e8 <HAL_TIM_ConfigClockSource>
 8000fde:	b970      	cbnz	r0, 8000ffe <MX_TIM5_Init+0x5e>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000fe0:	2320      	movs	r3, #32
 8000fe2:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000fe8:	a901      	add	r1, sp, #4
 8000fea:	4808      	ldr	r0, [pc, #32]	@ (800100c <MX_TIM5_Init+0x6c>)
 8000fec:	f002 fdb2 	bl	8003b54 <HAL_TIMEx_MasterConfigSynchronization>
 8000ff0:	b940      	cbnz	r0, 8001004 <MX_TIM5_Init+0x64>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000ff2:	b009      	add	sp, #36	@ 0x24
 8000ff4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000ff8:	f7ff fea2 	bl	8000d40 <Error_Handler>
 8000ffc:	e7e8      	b.n	8000fd0 <MX_TIM5_Init+0x30>
    Error_Handler();
 8000ffe:	f7ff fe9f 	bl	8000d40 <Error_Handler>
 8001002:	e7ed      	b.n	8000fe0 <MX_TIM5_Init+0x40>
    Error_Handler();
 8001004:	f7ff fe9c 	bl	8000d40 <Error_Handler>
}
 8001008:	e7f3      	b.n	8000ff2 <MX_TIM5_Init+0x52>
 800100a:	bf00      	nop
 800100c:	20000c78 	.word	0x20000c78
 8001010:	40000c00 	.word	0x40000c00

08001014 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM5)
 8001014:	6802      	ldr	r2, [r0, #0]
 8001016:	4b09      	ldr	r3, [pc, #36]	@ (800103c <HAL_TIM_Base_MspInit+0x28>)
 8001018:	429a      	cmp	r2, r3
 800101a:	d000      	beq.n	800101e <HAL_TIM_Base_MspInit+0xa>
 800101c:	4770      	bx	lr
{
 800101e:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001020:	f503 330b 	add.w	r3, r3, #142336	@ 0x22c00
 8001024:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001026:	f042 0208 	orr.w	r2, r2, #8
 800102a:	641a      	str	r2, [r3, #64]	@ 0x40
 800102c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102e:	f003 0308 	and.w	r3, r3, #8
 8001032:	9301      	str	r3, [sp, #4]
 8001034:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001036:	b002      	add	sp, #8
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	40000c00 	.word	0x40000c00

08001040 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001040:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001078 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001044:	480d      	ldr	r0, [pc, #52]	@ (800107c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001046:	490e      	ldr	r1, [pc, #56]	@ (8001080 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001048:	4a0e      	ldr	r2, [pc, #56]	@ (8001084 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800104c:	e002      	b.n	8001054 <LoopCopyDataInit>

0800104e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800104e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001050:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001052:	3304      	adds	r3, #4

08001054 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001054:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001056:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001058:	d3f9      	bcc.n	800104e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800105a:	4a0b      	ldr	r2, [pc, #44]	@ (8001088 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800105c:	4c0b      	ldr	r4, [pc, #44]	@ (800108c <LoopFillZerobss+0x26>)
  movs r3, #0
 800105e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001060:	e001      	b.n	8001066 <LoopFillZerobss>

08001062 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001062:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001064:	3204      	adds	r2, #4

08001066 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001066:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001068:	d3fb      	bcc.n	8001062 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800106a:	f7ff ff8f 	bl	8000f8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800106e:	f002 fdd7 	bl	8003c20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001072:	f7ff fe0d 	bl	8000c90 <main>
  bx  lr    
 8001076:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001078:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800107c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001080:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 8001084:	08003ca8 	.word	0x08003ca8
  ldr r2, =_sbss
 8001088:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 800108c:	20000cc8 	.word	0x20000cc8

08001090 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001090:	e7fe      	b.n	8001090 <ADC_IRQHandler>

08001092 <arm_biquad_cascade_df2T_init_f32>:
void arm_biquad_cascade_df2T_init_f32(
        arm_biquad_cascade_df2T_instance_f32 * S,
        uint8_t numStages,
  const float32_t * pCoeffs,
        float32_t * pState)
{
 8001092:	b538      	push	{r3, r4, r5, lr}
 8001094:	4604      	mov	r4, r0
 8001096:	461d      	mov	r5, r3
  /* Assign filter stages */
  S->numStages = numStages;
 8001098:	7001      	strb	r1, [r0, #0]

  /* Assign coefficient pointer */
  S->pCoeffs = pCoeffs;
 800109a:	6082      	str	r2, [r0, #8]

  /* Clear state buffer and size is always 2 * numStages */
  memset(pState, 0, (2U * (uint32_t) numStages) * sizeof(float32_t));
 800109c:	00ca      	lsls	r2, r1, #3
 800109e:	2100      	movs	r1, #0
 80010a0:	4618      	mov	r0, r3
 80010a2:	f002 fdb5 	bl	8003c10 <memset>

  /* Assign state pointer */
  S->pState = pState;
 80010a6:	6065      	str	r5, [r4, #4]
}
 80010a8:	bd38      	pop	{r3, r4, r5, pc}
	...

080010ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010ac:	b510      	push	{r4, lr}
 80010ae:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b0:	4b0d      	ldr	r3, [pc, #52]	@ (80010e8 <HAL_InitTick+0x3c>)
 80010b2:	781a      	ldrb	r2, [r3, #0]
 80010b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80010bc:	4a0b      	ldr	r2, [pc, #44]	@ (80010ec <HAL_InitTick+0x40>)
 80010be:	6810      	ldr	r0, [r2, #0]
 80010c0:	fbb0 f0f3 	udiv	r0, r0, r3
 80010c4:	f000 fb62 	bl	800178c <HAL_SYSTICK_Config>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c8:	2c0f      	cmp	r4, #15
 80010ca:	d800      	bhi.n	80010ce <HAL_InitTick+0x22>
 80010cc:	b108      	cbz	r0, 80010d2 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80010ce:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 80010d0:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010d2:	2200      	movs	r2, #0
 80010d4:	4621      	mov	r1, r4
 80010d6:	f04f 30ff 	mov.w	r0, #4294967295
 80010da:	f000 fb15 	bl	8001708 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010de:	4b04      	ldr	r3, [pc, #16]	@ (80010f0 <HAL_InitTick+0x44>)
 80010e0:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 80010e2:	2000      	movs	r0, #0
 80010e4:	e7f4      	b.n	80010d0 <HAL_InitTick+0x24>
 80010e6:	bf00      	nop
 80010e8:	200000cc 	.word	0x200000cc
 80010ec:	200000c8 	.word	0x200000c8
 80010f0:	200000d0 	.word	0x200000d0

080010f4 <HAL_Init>:
{
 80010f4:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f6:	2003      	movs	r0, #3
 80010f8:	f000 faf4 	bl	80016e4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80010fc:	2000      	movs	r0, #0
 80010fe:	f7ff ffd5 	bl	80010ac <HAL_InitTick>
  HAL_MspInit();
 8001102:	f7ff ff07 	bl	8000f14 <HAL_MspInit>
}
 8001106:	2000      	movs	r0, #0
 8001108:	bd08      	pop	{r3, pc}
	...

0800110c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800110c:	4a03      	ldr	r2, [pc, #12]	@ (800111c <HAL_IncTick+0x10>)
 800110e:	6811      	ldr	r1, [r2, #0]
 8001110:	4b03      	ldr	r3, [pc, #12]	@ (8001120 <HAL_IncTick+0x14>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	440b      	add	r3, r1
 8001116:	6013      	str	r3, [r2, #0]
}
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	20000cc4 	.word	0x20000cc4
 8001120:	200000cc 	.word	0x200000cc

08001124 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001124:	4b01      	ldr	r3, [pc, #4]	@ (800112c <HAL_GetTick+0x8>)
 8001126:	6818      	ldr	r0, [r3, #0]
}
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	20000cc4 	.word	0x20000cc4

08001130 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001130:	b538      	push	{r3, r4, r5, lr}
 8001132:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001134:	f7ff fff6 	bl	8001124 <HAL_GetTick>
 8001138:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800113a:	f1b4 3fff 	cmp.w	r4, #4294967295
 800113e:	d002      	beq.n	8001146 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001140:	4b04      	ldr	r3, [pc, #16]	@ (8001154 <HAL_Delay+0x24>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001146:	f7ff ffed 	bl	8001124 <HAL_GetTick>
 800114a:	1b40      	subs	r0, r0, r5
 800114c:	42a0      	cmp	r0, r4
 800114e:	d3fa      	bcc.n	8001146 <HAL_Delay+0x16>
  {
  }
}
 8001150:	bd38      	pop	{r3, r4, r5, pc}
 8001152:	bf00      	nop
 8001154:	200000cc 	.word	0x200000cc

08001158 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001158:	2800      	cmp	r0, #0
 800115a:	f000 80b7 	beq.w	80012cc <HAL_ADC_Init+0x174>
{
 800115e:	b510      	push	{r4, lr}
 8001160:	4604      	mov	r4, r0
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001162:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001164:	b143      	cbz	r3, 8001178 <HAL_ADC_Init+0x20>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001166:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001168:	f013 0f10 	tst.w	r3, #16
 800116c:	d00b      	beq.n	8001186 <HAL_ADC_Init+0x2e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800116e:	2001      	movs	r0, #1
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001170:	2300      	movs	r3, #0
 8001172:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
}
 8001176:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8001178:	f7ff fb5e 	bl	8000838 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800117c:	2300      	movs	r3, #0
 800117e:	6463      	str	r3, [r4, #68]	@ 0x44
    hadc->Lock = HAL_UNLOCKED;
 8001180:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
 8001184:	e7ef      	b.n	8001166 <HAL_ADC_Init+0xe>
    ADC_STATE_CLR_SET(hadc->State,
 8001186:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001188:	4b51      	ldr	r3, [pc, #324]	@ (80012d0 <HAL_ADC_Init+0x178>)
 800118a:	4013      	ands	r3, r2
 800118c:	f043 0302 	orr.w	r3, r3, #2
 8001190:	6423      	str	r3, [r4, #64]	@ 0x40
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001192:	4b50      	ldr	r3, [pc, #320]	@ (80012d4 <HAL_ADC_Init+0x17c>)
 8001194:	685a      	ldr	r2, [r3, #4]
 8001196:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 800119a:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800119c:	685a      	ldr	r2, [r3, #4]
 800119e:	6861      	ldr	r1, [r4, #4]
 80011a0:	430a      	orrs	r2, r1
 80011a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80011a4:	6822      	ldr	r2, [r4, #0]
 80011a6:	6853      	ldr	r3, [r2, #4]
 80011a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80011ac:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80011ae:	6822      	ldr	r2, [r4, #0]
 80011b0:	6853      	ldr	r3, [r2, #4]
 80011b2:	6921      	ldr	r1, [r4, #16]
 80011b4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80011b8:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80011ba:	6822      	ldr	r2, [r4, #0]
 80011bc:	6853      	ldr	r3, [r2, #4]
 80011be:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 80011c2:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80011c4:	6822      	ldr	r2, [r4, #0]
 80011c6:	6853      	ldr	r3, [r2, #4]
 80011c8:	68a1      	ldr	r1, [r4, #8]
 80011ca:	430b      	orrs	r3, r1
 80011cc:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80011ce:	6822      	ldr	r2, [r4, #0]
 80011d0:	6893      	ldr	r3, [r2, #8]
 80011d2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80011d6:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80011d8:	6822      	ldr	r2, [r4, #0]
 80011da:	6893      	ldr	r3, [r2, #8]
 80011dc:	68e1      	ldr	r1, [r4, #12]
 80011de:	430b      	orrs	r3, r1
 80011e0:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011e2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80011e4:	4b3c      	ldr	r3, [pc, #240]	@ (80012d8 <HAL_ADC_Init+0x180>)
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d05f      	beq.n	80012aa <HAL_ADC_Init+0x152>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80011ea:	6822      	ldr	r2, [r4, #0]
 80011ec:	6893      	ldr	r3, [r2, #8]
 80011ee:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 80011f2:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80011f4:	6822      	ldr	r2, [r4, #0]
 80011f6:	6893      	ldr	r3, [r2, #8]
 80011f8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80011fa:	430b      	orrs	r3, r1
 80011fc:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80011fe:	6822      	ldr	r2, [r4, #0]
 8001200:	6893      	ldr	r3, [r2, #8]
 8001202:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8001206:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001208:	6822      	ldr	r2, [r4, #0]
 800120a:	6893      	ldr	r3, [r2, #8]
 800120c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800120e:	430b      	orrs	r3, r1
 8001210:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001212:	6822      	ldr	r2, [r4, #0]
 8001214:	6893      	ldr	r3, [r2, #8]
 8001216:	f023 0302 	bic.w	r3, r3, #2
 800121a:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800121c:	6822      	ldr	r2, [r4, #0]
 800121e:	6893      	ldr	r3, [r2, #8]
 8001220:	69a1      	ldr	r1, [r4, #24]
 8001222:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8001226:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001228:	f894 3020 	ldrb.w	r3, [r4, #32]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d047      	beq.n	80012c0 <HAL_ADC_Init+0x168>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001230:	6822      	ldr	r2, [r4, #0]
 8001232:	6853      	ldr	r3, [r2, #4]
 8001234:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001238:	6053      	str	r3, [r2, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800123a:	6822      	ldr	r2, [r4, #0]
 800123c:	6853      	ldr	r3, [r2, #4]
 800123e:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001242:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001244:	6821      	ldr	r1, [r4, #0]
 8001246:	684b      	ldr	r3, [r1, #4]
 8001248:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800124a:	3a01      	subs	r2, #1
 800124c:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8001250:	604b      	str	r3, [r1, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001252:	6822      	ldr	r2, [r4, #0]
 8001254:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8001256:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800125a:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800125c:	6821      	ldr	r1, [r4, #0]
 800125e:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8001260:	69e2      	ldr	r2, [r4, #28]
 8001262:	3a01      	subs	r2, #1
 8001264:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8001268:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800126a:	6822      	ldr	r2, [r4, #0]
 800126c:	6893      	ldr	r3, [r2, #8]
 800126e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001272:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001274:	6822      	ldr	r2, [r4, #0]
 8001276:	6893      	ldr	r3, [r2, #8]
 8001278:	f894 1030 	ldrb.w	r1, [r4, #48]	@ 0x30
 800127c:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8001280:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001282:	6822      	ldr	r2, [r4, #0]
 8001284:	6893      	ldr	r3, [r2, #8]
 8001286:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800128a:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800128c:	6822      	ldr	r2, [r4, #0]
 800128e:	6893      	ldr	r3, [r2, #8]
 8001290:	6961      	ldr	r1, [r4, #20]
 8001292:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8001296:	6093      	str	r3, [r2, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001298:	2000      	movs	r0, #0
 800129a:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800129c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800129e:	f023 0303 	bic.w	r3, r3, #3
 80012a2:	f043 0301 	orr.w	r3, r3, #1
 80012a6:	6423      	str	r3, [r4, #64]	@ 0x40
 80012a8:	e762      	b.n	8001170 <HAL_ADC_Init+0x18>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80012aa:	6822      	ldr	r2, [r4, #0]
 80012ac:	6893      	ldr	r3, [r2, #8]
 80012ae:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 80012b2:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80012b4:	6822      	ldr	r2, [r4, #0]
 80012b6:	6893      	ldr	r3, [r2, #8]
 80012b8:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 80012bc:	6093      	str	r3, [r2, #8]
 80012be:	e7a8      	b.n	8001212 <HAL_ADC_Init+0xba>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80012c0:	6822      	ldr	r2, [r4, #0]
 80012c2:	6853      	ldr	r3, [r2, #4]
 80012c4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80012c8:	6053      	str	r3, [r2, #4]
 80012ca:	e7c2      	b.n	8001252 <HAL_ADC_Init+0xfa>
    return HAL_ERROR;
 80012cc:	2001      	movs	r0, #1
}
 80012ce:	4770      	bx	lr
 80012d0:	ffffeefd 	.word	0xffffeefd
 80012d4:	40012300 	.word	0x40012300
 80012d8:	0f000001 	.word	0x0f000001

080012dc <HAL_ADC_Start_DMA>:
{
 80012dc:	b530      	push	{r4, r5, lr}
 80012de:	b083      	sub	sp, #12
 80012e0:	4613      	mov	r3, r2
  __IO uint32_t counter = 0;
 80012e2:	2200      	movs	r2, #0
 80012e4:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80012e6:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80012ea:	2a01      	cmp	r2, #1
 80012ec:	f000 809e 	beq.w	800142c <HAL_ADC_Start_DMA+0x150>
 80012f0:	4604      	mov	r4, r0
 80012f2:	2201      	movs	r2, #1
 80012f4:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80012f8:	6802      	ldr	r2, [r0, #0]
 80012fa:	6890      	ldr	r0, [r2, #8]
 80012fc:	f010 0f01 	tst.w	r0, #1
 8001300:	d114      	bne.n	800132c <HAL_ADC_Start_DMA+0x50>
    __HAL_ADC_ENABLE(hadc);
 8001302:	6890      	ldr	r0, [r2, #8]
 8001304:	f040 0001 	orr.w	r0, r0, #1
 8001308:	6090      	str	r0, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800130a:	4a4e      	ldr	r2, [pc, #312]	@ (8001444 <HAL_ADC_Start_DMA+0x168>)
 800130c:	6810      	ldr	r0, [r2, #0]
 800130e:	4a4e      	ldr	r2, [pc, #312]	@ (8001448 <HAL_ADC_Start_DMA+0x16c>)
 8001310:	fba2 2000 	umull	r2, r0, r2, r0
 8001314:	0c80      	lsrs	r0, r0, #18
 8001316:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800131a:	9001      	str	r0, [sp, #4]
    while(counter != 0)
 800131c:	9a01      	ldr	r2, [sp, #4]
 800131e:	b12a      	cbz	r2, 800132c <HAL_ADC_Start_DMA+0x50>
      counter--;
 8001320:	9801      	ldr	r0, [sp, #4]
 8001322:	3801      	subs	r0, #1
 8001324:	9001      	str	r0, [sp, #4]
    while(counter != 0)
 8001326:	9801      	ldr	r0, [sp, #4]
 8001328:	2800      	cmp	r0, #0
 800132a:	d1f9      	bne.n	8001320 <HAL_ADC_Start_DMA+0x44>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800132c:	6820      	ldr	r0, [r4, #0]
 800132e:	6882      	ldr	r2, [r0, #8]
 8001330:	f012 0f01 	tst.w	r2, #1
 8001334:	d06f      	beq.n	8001416 <HAL_ADC_Start_DMA+0x13a>
    ADC_STATE_CLR_SET(hadc->State,
 8001336:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8001338:	4a44      	ldr	r2, [pc, #272]	@ (800144c <HAL_ADC_Start_DMA+0x170>)
 800133a:	402a      	ands	r2, r5
 800133c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001340:	6422      	str	r2, [r4, #64]	@ 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001342:	6842      	ldr	r2, [r0, #4]
 8001344:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8001348:	d005      	beq.n	8001356 <HAL_ADC_Start_DMA+0x7a>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800134a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800134c:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8001350:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001354:	6422      	str	r2, [r4, #64]	@ 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001356:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001358:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 800135c:	d034      	beq.n	80013c8 <HAL_ADC_Start_DMA+0xec>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800135e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8001360:	f022 0206 	bic.w	r2, r2, #6
 8001364:	6462      	str	r2, [r4, #68]	@ 0x44
    __HAL_UNLOCK(hadc);   
 8001366:	2200      	movs	r2, #0
 8001368:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800136c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800136e:	4838      	ldr	r0, [pc, #224]	@ (8001450 <HAL_ADC_Start_DMA+0x174>)
 8001370:	63d0      	str	r0, [r2, #60]	@ 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001372:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001374:	4837      	ldr	r0, [pc, #220]	@ (8001454 <HAL_ADC_Start_DMA+0x178>)
 8001376:	6410      	str	r0, [r2, #64]	@ 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001378:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800137a:	4837      	ldr	r0, [pc, #220]	@ (8001458 <HAL_ADC_Start_DMA+0x17c>)
 800137c:	64d0      	str	r0, [r2, #76]	@ 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800137e:	6822      	ldr	r2, [r4, #0]
 8001380:	f06f 0022 	mvn.w	r0, #34	@ 0x22
 8001384:	6010      	str	r0, [r2, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001386:	6820      	ldr	r0, [r4, #0]
 8001388:	6842      	ldr	r2, [r0, #4]
 800138a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800138e:	6042      	str	r2, [r0, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001390:	6820      	ldr	r0, [r4, #0]
 8001392:	6882      	ldr	r2, [r0, #8]
 8001394:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001398:	6082      	str	r2, [r0, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800139a:	6820      	ldr	r0, [r4, #0]
 800139c:	460a      	mov	r2, r1
 800139e:	f100 014c 	add.w	r1, r0, #76	@ 0x4c
 80013a2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80013a4:	f000 faba 	bl	800191c <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80013a8:	4b2c      	ldr	r3, [pc, #176]	@ (800145c <HAL_ADC_Start_DMA+0x180>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f013 0f1f 	tst.w	r3, #31
 80013b0:	d10d      	bne.n	80013ce <HAL_ADC_Start_DMA+0xf2>
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80013b2:	6823      	ldr	r3, [r4, #0]
 80013b4:	689a      	ldr	r2, [r3, #8]
 80013b6:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 80013ba:	d139      	bne.n	8001430 <HAL_ADC_Start_DMA+0x154>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013bc:	689a      	ldr	r2, [r3, #8]
 80013be:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80013c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80013c4:	2000      	movs	r0, #0
 80013c6:	e02f      	b.n	8001428 <HAL_ADC_Start_DMA+0x14c>
      ADC_CLEAR_ERRORCODE(hadc);
 80013c8:	2200      	movs	r2, #0
 80013ca:	6462      	str	r2, [r4, #68]	@ 0x44
 80013cc:	e7cb      	b.n	8001366 <HAL_ADC_Start_DMA+0x8a>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80013ce:	6822      	ldr	r2, [r4, #0]
 80013d0:	4b23      	ldr	r3, [pc, #140]	@ (8001460 <HAL_ADC_Start_DMA+0x184>)
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d00a      	beq.n	80013ec <HAL_ADC_Start_DMA+0x110>
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80013d6:	4b21      	ldr	r3, [pc, #132]	@ (800145c <HAL_ADC_Start_DMA+0x180>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f013 0f10 	tst.w	r3, #16
 80013de:	d129      	bne.n	8001434 <HAL_ADC_Start_DMA+0x158>
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80013e0:	6822      	ldr	r2, [r4, #0]
 80013e2:	4b20      	ldr	r3, [pc, #128]	@ (8001464 <HAL_ADC_Start_DMA+0x188>)
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d00b      	beq.n	8001400 <HAL_ADC_Start_DMA+0x124>
  return HAL_OK;
 80013e8:	2000      	movs	r0, #0
 80013ea:	e01d      	b.n	8001428 <HAL_ADC_Start_DMA+0x14c>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f013 5f40 	tst.w	r3, #805306368	@ 0x30000000
 80013f2:	d123      	bne.n	800143c <HAL_ADC_Start_DMA+0x160>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013f4:	4a1a      	ldr	r2, [pc, #104]	@ (8001460 <HAL_ADC_Start_DMA+0x184>)
 80013f6:	6893      	ldr	r3, [r2, #8]
 80013f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80013fc:	6093      	str	r3, [r2, #8]
 80013fe:	e7ea      	b.n	80013d6 <HAL_ADC_Start_DMA+0xfa>
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f013 5f40 	tst.w	r3, #805306368	@ 0x30000000
 8001406:	d117      	bne.n	8001438 <HAL_ADC_Start_DMA+0x15c>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001408:	4a16      	ldr	r2, [pc, #88]	@ (8001464 <HAL_ADC_Start_DMA+0x188>)
 800140a:	6893      	ldr	r3, [r2, #8]
 800140c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001410:	6093      	str	r3, [r2, #8]
  return HAL_OK;
 8001412:	2000      	movs	r0, #0
 8001414:	e008      	b.n	8001428 <HAL_ADC_Start_DMA+0x14c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001416:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001418:	f043 0310 	orr.w	r3, r3, #16
 800141c:	6423      	str	r3, [r4, #64]	@ 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800141e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001420:	f043 0301 	orr.w	r3, r3, #1
 8001424:	6463      	str	r3, [r4, #68]	@ 0x44
  return HAL_OK;
 8001426:	2000      	movs	r0, #0
}
 8001428:	b003      	add	sp, #12
 800142a:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hadc);
 800142c:	2002      	movs	r0, #2
 800142e:	e7fb      	b.n	8001428 <HAL_ADC_Start_DMA+0x14c>
  return HAL_OK;
 8001430:	2000      	movs	r0, #0
 8001432:	e7f9      	b.n	8001428 <HAL_ADC_Start_DMA+0x14c>
 8001434:	2000      	movs	r0, #0
 8001436:	e7f7      	b.n	8001428 <HAL_ADC_Start_DMA+0x14c>
 8001438:	2000      	movs	r0, #0
 800143a:	e7f5      	b.n	8001428 <HAL_ADC_Start_DMA+0x14c>
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800143c:	4b07      	ldr	r3, [pc, #28]	@ (800145c <HAL_ADC_Start_DMA+0x180>)
 800143e:	685b      	ldr	r3, [r3, #4]
  return HAL_OK;
 8001440:	2000      	movs	r0, #0
 8001442:	e7f1      	b.n	8001428 <HAL_ADC_Start_DMA+0x14c>
 8001444:	200000c8 	.word	0x200000c8
 8001448:	431bde83 	.word	0x431bde83
 800144c:	fffff8fe 	.word	0xfffff8fe
 8001450:	0800148d 	.word	0x0800148d
 8001454:	0800146b 	.word	0x0800146b
 8001458:	08001477 	.word	0x08001477
 800145c:	40012300 	.word	0x40012300
 8001460:	40012000 	.word	0x40012000
 8001464:	40012200 	.word	0x40012200

08001468 <HAL_ADC_ConvHalfCpltCallback>:
}
 8001468:	4770      	bx	lr

0800146a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800146a:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800146c:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 800146e:	f7ff fffb 	bl	8001468 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001472:	bd08      	pop	{r3, pc}

08001474 <HAL_ADC_ErrorCallback>:
}
 8001474:	4770      	bx	lr

08001476 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001476:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001478:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800147a:	2340      	movs	r3, #64	@ 0x40
 800147c:	6403      	str	r3, [r0, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800147e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8001480:	f043 0304 	orr.w	r3, r3, #4
 8001484:	6443      	str	r3, [r0, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001486:	f7ff fff5 	bl	8001474 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800148a:	bd08      	pop	{r3, pc}

0800148c <ADC_DMAConvCplt>:
{
 800148c:	b508      	push	{r3, lr}
 800148e:	4603      	mov	r3, r0
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001490:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001492:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8001494:	f012 0f50 	tst.w	r2, #80	@ 0x50
 8001498:	d125      	bne.n	80014e6 <ADC_DMAConvCplt+0x5a>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800149a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800149c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014a0:	6403      	str	r3, [r0, #64]	@ 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80014a2:	6803      	ldr	r3, [r0, #0]
 80014a4:	689a      	ldr	r2, [r3, #8]
 80014a6:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 80014aa:	d119      	bne.n	80014e0 <ADC_DMAConvCplt+0x54>
 80014ac:	6982      	ldr	r2, [r0, #24]
 80014ae:	b9ba      	cbnz	r2, 80014e0 <ADC_DMAConvCplt+0x54>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80014b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80014b2:	f412 0f70 	tst.w	r2, #15728640	@ 0xf00000
 80014b6:	d003      	beq.n	80014c0 <ADC_DMAConvCplt+0x34>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80014b8:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80014ba:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 80014be:	d10f      	bne.n	80014e0 <ADC_DMAConvCplt+0x54>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80014c0:	685a      	ldr	r2, [r3, #4]
 80014c2:	f022 0220 	bic.w	r2, r2, #32
 80014c6:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80014c8:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80014ca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80014ce:	6403      	str	r3, [r0, #64]	@ 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014d0:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80014d2:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 80014d6:	d103      	bne.n	80014e0 <ADC_DMAConvCplt+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014d8:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80014da:	f043 0301 	orr.w	r3, r3, #1
 80014de:	6403      	str	r3, [r0, #64]	@ 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 80014e0:	f7ff fbb2 	bl	8000c48 <HAL_ADC_ConvCpltCallback>
}
 80014e4:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80014e6:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80014e8:	f012 0f10 	tst.w	r2, #16
 80014ec:	d104      	bne.n	80014f8 <ADC_DMAConvCplt+0x6c>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80014ee:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 80014f0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80014f2:	4618      	mov	r0, r3
 80014f4:	4790      	blx	r2
}
 80014f6:	e7f5      	b.n	80014e4 <ADC_DMAConvCplt+0x58>
      HAL_ADC_ErrorCallback(hadc);
 80014f8:	f7ff ffbc 	bl	8001474 <HAL_ADC_ErrorCallback>
 80014fc:	e7f2      	b.n	80014e4 <ADC_DMAConvCplt+0x58>
	...

08001500 <HAL_ADC_ConfigChannel>:
{
 8001500:	b430      	push	{r4, r5}
 8001502:	b082      	sub	sp, #8
  __IO uint32_t counter = 0;
 8001504:	2200      	movs	r2, #0
 8001506:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001508:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 800150c:	2a01      	cmp	r2, #1
 800150e:	f000 80dd 	beq.w	80016cc <HAL_ADC_ConfigChannel+0x1cc>
 8001512:	4603      	mov	r3, r0
 8001514:	2201      	movs	r2, #1
 8001516:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800151a:	680a      	ldr	r2, [r1, #0]
 800151c:	2a09      	cmp	r2, #9
 800151e:	d925      	bls.n	800156c <HAL_ADC_ConfigChannel+0x6c>
 8001520:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8001524:	d022      	beq.n	800156c <HAL_ADC_ConfigChannel+0x6c>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001526:	6804      	ldr	r4, [r0, #0]
 8001528:	68e0      	ldr	r0, [r4, #12]
 800152a:	b292      	uxth	r2, r2
 800152c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001530:	3a1e      	subs	r2, #30
 8001532:	f04f 0c07 	mov.w	ip, #7
 8001536:	fa0c f202 	lsl.w	r2, ip, r2
 800153a:	ea20 0202 	bic.w	r2, r0, r2
 800153e:	60e2      	str	r2, [r4, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001540:	680a      	ldr	r2, [r1, #0]
 8001542:	4863      	ldr	r0, [pc, #396]	@ (80016d0 <HAL_ADC_ConfigChannel+0x1d0>)
 8001544:	4282      	cmp	r2, r0
 8001546:	d00a      	beq.n	800155e <HAL_ADC_ConfigChannel+0x5e>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001548:	681c      	ldr	r4, [r3, #0]
 800154a:	68e5      	ldr	r5, [r4, #12]
 800154c:	b292      	uxth	r2, r2
 800154e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001552:	3a1e      	subs	r2, #30
 8001554:	6888      	ldr	r0, [r1, #8]
 8001556:	4090      	lsls	r0, r2
 8001558:	4328      	orrs	r0, r5
 800155a:	60e0      	str	r0, [r4, #12]
 800155c:	e01b      	b.n	8001596 <HAL_ADC_ConfigChannel+0x96>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800155e:	6818      	ldr	r0, [r3, #0]
 8001560:	68c2      	ldr	r2, [r0, #12]
 8001562:	688c      	ldr	r4, [r1, #8]
 8001564:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 8001568:	60c2      	str	r2, [r0, #12]
 800156a:	e014      	b.n	8001596 <HAL_ADC_ConfigChannel+0x96>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800156c:	681c      	ldr	r4, [r3, #0]
 800156e:	6920      	ldr	r0, [r4, #16]
 8001570:	b292      	uxth	r2, r2
 8001572:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001576:	f04f 0c07 	mov.w	ip, #7
 800157a:	fa0c f202 	lsl.w	r2, ip, r2
 800157e:	ea20 0202 	bic.w	r2, r0, r2
 8001582:	6122      	str	r2, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001584:	681c      	ldr	r4, [r3, #0]
 8001586:	6925      	ldr	r5, [r4, #16]
 8001588:	880a      	ldrh	r2, [r1, #0]
 800158a:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 800158e:	688a      	ldr	r2, [r1, #8]
 8001590:	4082      	lsls	r2, r0
 8001592:	432a      	orrs	r2, r5
 8001594:	6122      	str	r2, [r4, #16]
  if (sConfig->Rank < 7)
 8001596:	684a      	ldr	r2, [r1, #4]
 8001598:	2a06      	cmp	r2, #6
 800159a:	d820      	bhi.n	80015de <HAL_ADC_ConfigChannel+0xde>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800159c:	681c      	ldr	r4, [r3, #0]
 800159e:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80015a0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80015a4:	3a05      	subs	r2, #5
 80015a6:	f04f 0c1f 	mov.w	ip, #31
 80015aa:	fa0c f202 	lsl.w	r2, ip, r2
 80015ae:	ea20 0202 	bic.w	r2, r0, r2
 80015b2:	6362      	str	r2, [r4, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80015b4:	681c      	ldr	r4, [r3, #0]
 80015b6:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 80015b8:	8808      	ldrh	r0, [r1, #0]
 80015ba:	684a      	ldr	r2, [r1, #4]
 80015bc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80015c0:	3a05      	subs	r2, #5
 80015c2:	fa00 f202 	lsl.w	r2, r0, r2
 80015c6:	432a      	orrs	r2, r5
 80015c8:	6362      	str	r2, [r4, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80015ca:	6818      	ldr	r0, [r3, #0]
 80015cc:	4a41      	ldr	r2, [pc, #260]	@ (80016d4 <HAL_ADC_ConfigChannel+0x1d4>)
 80015ce:	4290      	cmp	r0, r2
 80015d0:	d035      	beq.n	800163e <HAL_ADC_ConfigChannel+0x13e>
  __HAL_UNLOCK(hadc);
 80015d2:	2000      	movs	r0, #0
 80015d4:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
}
 80015d8:	b002      	add	sp, #8
 80015da:	bc30      	pop	{r4, r5}
 80015dc:	4770      	bx	lr
  else if (sConfig->Rank < 13)
 80015de:	2a0c      	cmp	r2, #12
 80015e0:	d816      	bhi.n	8001610 <HAL_ADC_ConfigChannel+0x110>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80015e2:	681d      	ldr	r5, [r3, #0]
 80015e4:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 80015e6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80015ea:	3a23      	subs	r2, #35	@ 0x23
 80015ec:	241f      	movs	r4, #31
 80015ee:	fa04 f202 	lsl.w	r2, r4, r2
 80015f2:	ea20 0202 	bic.w	r2, r0, r2
 80015f6:	632a      	str	r2, [r5, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80015f8:	681c      	ldr	r4, [r3, #0]
 80015fa:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80015fc:	8808      	ldrh	r0, [r1, #0]
 80015fe:	684a      	ldr	r2, [r1, #4]
 8001600:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001604:	3a23      	subs	r2, #35	@ 0x23
 8001606:	fa00 f202 	lsl.w	r2, r0, r2
 800160a:	432a      	orrs	r2, r5
 800160c:	6322      	str	r2, [r4, #48]	@ 0x30
 800160e:	e7dc      	b.n	80015ca <HAL_ADC_ConfigChannel+0xca>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001610:	681d      	ldr	r5, [r3, #0]
 8001612:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8001614:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001618:	3a41      	subs	r2, #65	@ 0x41
 800161a:	241f      	movs	r4, #31
 800161c:	fa04 f202 	lsl.w	r2, r4, r2
 8001620:	ea20 0202 	bic.w	r2, r0, r2
 8001624:	62ea      	str	r2, [r5, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001626:	681c      	ldr	r4, [r3, #0]
 8001628:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 800162a:	8808      	ldrh	r0, [r1, #0]
 800162c:	684a      	ldr	r2, [r1, #4]
 800162e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001632:	3a41      	subs	r2, #65	@ 0x41
 8001634:	fa00 f202 	lsl.w	r2, r0, r2
 8001638:	432a      	orrs	r2, r5
 800163a:	62e2      	str	r2, [r4, #44]	@ 0x2c
 800163c:	e7c5      	b.n	80015ca <HAL_ADC_ConfigChannel+0xca>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800163e:	680a      	ldr	r2, [r1, #0]
 8001640:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8001644:	d029      	beq.n	800169a <HAL_ADC_ConfigChannel+0x19a>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001646:	680a      	ldr	r2, [r1, #0]
 8001648:	2a12      	cmp	r2, #18
 800164a:	d030      	beq.n	80016ae <HAL_ADC_ConfigChannel+0x1ae>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800164c:	680a      	ldr	r2, [r1, #0]
 800164e:	4820      	ldr	r0, [pc, #128]	@ (80016d0 <HAL_ADC_ConfigChannel+0x1d0>)
 8001650:	4282      	cmp	r2, r0
 8001652:	d001      	beq.n	8001658 <HAL_ADC_ConfigChannel+0x158>
 8001654:	2a11      	cmp	r2, #17
 8001656:	d1bc      	bne.n	80015d2 <HAL_ADC_ConfigChannel+0xd2>
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001658:	4a1f      	ldr	r2, [pc, #124]	@ (80016d8 <HAL_ADC_ConfigChannel+0x1d8>)
 800165a:	6850      	ldr	r0, [r2, #4]
 800165c:	f420 0080 	bic.w	r0, r0, #4194304	@ 0x400000
 8001660:	6050      	str	r0, [r2, #4]
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001662:	6850      	ldr	r0, [r2, #4]
 8001664:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8001668:	6050      	str	r0, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800166a:	6809      	ldr	r1, [r1, #0]
 800166c:	4a18      	ldr	r2, [pc, #96]	@ (80016d0 <HAL_ADC_ConfigChannel+0x1d0>)
 800166e:	4291      	cmp	r1, r2
 8001670:	d1af      	bne.n	80015d2 <HAL_ADC_ConfigChannel+0xd2>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001672:	4a1a      	ldr	r2, [pc, #104]	@ (80016dc <HAL_ADC_ConfigChannel+0x1dc>)
 8001674:	6812      	ldr	r2, [r2, #0]
 8001676:	491a      	ldr	r1, [pc, #104]	@ (80016e0 <HAL_ADC_ConfigChannel+0x1e0>)
 8001678:	fba1 1202 	umull	r1, r2, r1, r2
 800167c:	0c92      	lsrs	r2, r2, #18
 800167e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001682:	0052      	lsls	r2, r2, #1
 8001684:	9201      	str	r2, [sp, #4]
      while(counter != 0)
 8001686:	9a01      	ldr	r2, [sp, #4]
 8001688:	2a00      	cmp	r2, #0
 800168a:	d0a2      	beq.n	80015d2 <HAL_ADC_ConfigChannel+0xd2>
        counter--;
 800168c:	9a01      	ldr	r2, [sp, #4]
 800168e:	3a01      	subs	r2, #1
 8001690:	9201      	str	r2, [sp, #4]
      while(counter != 0)
 8001692:	9a01      	ldr	r2, [sp, #4]
 8001694:	2a00      	cmp	r2, #0
 8001696:	d1f9      	bne.n	800168c <HAL_ADC_ConfigChannel+0x18c>
 8001698:	e79b      	b.n	80015d2 <HAL_ADC_ConfigChannel+0xd2>
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800169a:	480f      	ldr	r0, [pc, #60]	@ (80016d8 <HAL_ADC_ConfigChannel+0x1d8>)
 800169c:	6842      	ldr	r2, [r0, #4]
 800169e:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 80016a2:	6042      	str	r2, [r0, #4]
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80016a4:	6818      	ldr	r0, [r3, #0]
 80016a6:	4a0b      	ldr	r2, [pc, #44]	@ (80016d4 <HAL_ADC_ConfigChannel+0x1d4>)
 80016a8:	4290      	cmp	r0, r2
 80016aa:	d0cc      	beq.n	8001646 <HAL_ADC_ConfigChannel+0x146>
 80016ac:	e791      	b.n	80015d2 <HAL_ADC_ConfigChannel+0xd2>
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80016ae:	4a0a      	ldr	r2, [pc, #40]	@ (80016d8 <HAL_ADC_ConfigChannel+0x1d8>)
 80016b0:	6850      	ldr	r0, [r2, #4]
 80016b2:	f420 0000 	bic.w	r0, r0, #8388608	@ 0x800000
 80016b6:	6050      	str	r0, [r2, #4]
    ADC->CCR |= ADC_CCR_VBATE;
 80016b8:	6850      	ldr	r0, [r2, #4]
 80016ba:	f440 0080 	orr.w	r0, r0, #4194304	@ 0x400000
 80016be:	6050      	str	r0, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80016c0:	6818      	ldr	r0, [r3, #0]
 80016c2:	f5a2 7240 	sub.w	r2, r2, #768	@ 0x300
 80016c6:	4290      	cmp	r0, r2
 80016c8:	d0c0      	beq.n	800164c <HAL_ADC_ConfigChannel+0x14c>
 80016ca:	e782      	b.n	80015d2 <HAL_ADC_ConfigChannel+0xd2>
  __HAL_LOCK(hadc);
 80016cc:	2002      	movs	r0, #2
 80016ce:	e783      	b.n	80015d8 <HAL_ADC_ConfigChannel+0xd8>
 80016d0:	10000012 	.word	0x10000012
 80016d4:	40012000 	.word	0x40012000
 80016d8:	40012300 	.word	0x40012300
 80016dc:	200000c8 	.word	0x200000c8
 80016e0:	431bde83 	.word	0x431bde83

080016e4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e4:	4a06      	ldr	r2, [pc, #24]	@ (8001700 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 80016e6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016e8:	0200      	lsls	r0, r0, #8
 80016ea:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ee:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80016f2:	041b      	lsls	r3, r3, #16
 80016f4:	0c1b      	lsrs	r3, r3, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f6:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80016f8:	4b02      	ldr	r3, [pc, #8]	@ (8001704 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80016fa:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80016fc:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80016fe:	4770      	bx	lr
 8001700:	e000ed00 	.word	0xe000ed00
 8001704:	05fa0000 	.word	0x05fa0000

08001708 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001708:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800170a:	4b16      	ldr	r3, [pc, #88]	@ (8001764 <HAL_NVIC_SetPriority+0x5c>)
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001712:	f1c3 0c07 	rsb	ip, r3, #7
 8001716:	f1bc 0f04 	cmp.w	ip, #4
 800171a:	bf28      	it	cs
 800171c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001720:	f103 0e04 	add.w	lr, r3, #4
 8001724:	f1be 0f06 	cmp.w	lr, #6
 8001728:	bf8c      	ite	hi
 800172a:	3b03      	subhi	r3, #3
 800172c:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800172e:	f04f 3eff 	mov.w	lr, #4294967295
 8001732:	fa0e fc0c 	lsl.w	ip, lr, ip
 8001736:	ea21 010c 	bic.w	r1, r1, ip
 800173a:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800173c:	fa0e fe03 	lsl.w	lr, lr, r3
 8001740:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001744:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001746:	2800      	cmp	r0, #0
 8001748:	db05      	blt.n	8001756 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174a:	0109      	lsls	r1, r1, #4
 800174c:	b2c9      	uxtb	r1, r1
 800174e:	4b06      	ldr	r3, [pc, #24]	@ (8001768 <HAL_NVIC_SetPriority+0x60>)
 8001750:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001752:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001756:	f000 000f 	and.w	r0, r0, #15
 800175a:	0109      	lsls	r1, r1, #4
 800175c:	b2c9      	uxtb	r1, r1
 800175e:	4b03      	ldr	r3, [pc, #12]	@ (800176c <HAL_NVIC_SetPriority+0x64>)
 8001760:	5419      	strb	r1, [r3, r0]
 8001762:	e7f6      	b.n	8001752 <HAL_NVIC_SetPriority+0x4a>
 8001764:	e000ed00 	.word	0xe000ed00
 8001768:	e000e400 	.word	0xe000e400
 800176c:	e000ed14 	.word	0xe000ed14

08001770 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001770:	2800      	cmp	r0, #0
 8001772:	db07      	blt.n	8001784 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001774:	0941      	lsrs	r1, r0, #5
 8001776:	f000 001f 	and.w	r0, r0, #31
 800177a:	2301      	movs	r3, #1
 800177c:	4083      	lsls	r3, r0
 800177e:	4a02      	ldr	r2, [pc, #8]	@ (8001788 <HAL_NVIC_EnableIRQ+0x18>)
 8001780:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	e000e100 	.word	0xe000e100

0800178c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800178c:	3801      	subs	r0, #1
 800178e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8001792:	d20b      	bcs.n	80017ac <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001794:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001798:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179a:	4a05      	ldr	r2, [pc, #20]	@ (80017b0 <HAL_SYSTICK_Config+0x24>)
 800179c:	21f0      	movs	r1, #240	@ 0xf0
 800179e:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017a2:	2000      	movs	r0, #0
 80017a4:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017a6:	2207      	movs	r2, #7
 80017a8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017aa:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80017ac:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80017ae:	4770      	bx	lr
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80017b4:	b410      	push	{r4}
 80017b6:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80017b8:	6804      	ldr	r4, [r0, #0]
 80017ba:	b2e1      	uxtb	r1, r4
 80017bc:	3910      	subs	r1, #16
 80017be:	4b08      	ldr	r3, [pc, #32]	@ (80017e0 <DMA_CalcBaseAndBitshift+0x2c>)
 80017c0:	fba3 0301 	umull	r0, r3, r3, r1
 80017c4:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80017c6:	4807      	ldr	r0, [pc, #28]	@ (80017e4 <DMA_CalcBaseAndBitshift+0x30>)
 80017c8:	5cc3      	ldrb	r3, [r0, r3]
 80017ca:	65d3      	str	r3, [r2, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80017cc:	295f      	cmp	r1, #95	@ 0x5f
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80017ce:	4806      	ldr	r0, [pc, #24]	@ (80017e8 <DMA_CalcBaseAndBitshift+0x34>)
 80017d0:	ea00 0004 	and.w	r0, r0, r4
 80017d4:	bf88      	it	hi
 80017d6:	3004      	addhi	r0, #4
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80017d8:	6590      	str	r0, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 80017da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	aaaaaaab 	.word	0xaaaaaaab
 80017e4:	08003c90 	.word	0x08003c90
 80017e8:	fffffc00 	.word	0xfffffc00

080017ec <HAL_DMA_Init>:
{
 80017ec:	b538      	push	{r3, r4, r5, lr}
 80017ee:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80017f0:	f7ff fc98 	bl	8001124 <HAL_GetTick>
  if(hdma == NULL)
 80017f4:	2c00      	cmp	r4, #0
 80017f6:	f000 808c 	beq.w	8001912 <HAL_DMA_Init+0x126>
 80017fa:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 80017fc:	2302      	movs	r3, #2
 80017fe:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8001802:	2300      	movs	r3, #0
 8001804:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8001808:	6822      	ldr	r2, [r4, #0]
 800180a:	6813      	ldr	r3, [r2, #0]
 800180c:	f023 0301 	bic.w	r3, r3, #1
 8001810:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001812:	6823      	ldr	r3, [r4, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	f012 0f01 	tst.w	r2, #1
 800181a:	d00a      	beq.n	8001832 <HAL_DMA_Init+0x46>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800181c:	f7ff fc82 	bl	8001124 <HAL_GetTick>
 8001820:	1b43      	subs	r3, r0, r5
 8001822:	2b05      	cmp	r3, #5
 8001824:	d9f5      	bls.n	8001812 <HAL_DMA_Init+0x26>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001826:	2320      	movs	r3, #32
 8001828:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800182a:	2003      	movs	r0, #3
 800182c:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 8001830:	bd38      	pop	{r3, r4, r5, pc}
  tmp = hdma->Instance->CR;
 8001832:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001834:	4938      	ldr	r1, [pc, #224]	@ (8001918 <HAL_DMA_Init+0x12c>)
 8001836:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001838:	6862      	ldr	r2, [r4, #4]
 800183a:	68a0      	ldr	r0, [r4, #8]
 800183c:	4302      	orrs	r2, r0
 800183e:	68e0      	ldr	r0, [r4, #12]
 8001840:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001842:	6920      	ldr	r0, [r4, #16]
 8001844:	4302      	orrs	r2, r0
 8001846:	6960      	ldr	r0, [r4, #20]
 8001848:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800184a:	69a0      	ldr	r0, [r4, #24]
 800184c:	4302      	orrs	r2, r0
 800184e:	69e0      	ldr	r0, [r4, #28]
 8001850:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001852:	6a20      	ldr	r0, [r4, #32]
 8001854:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001856:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001858:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800185a:	2904      	cmp	r1, #4
 800185c:	d021      	beq.n	80018a2 <HAL_DMA_Init+0xb6>
  hdma->Instance->CR = tmp;  
 800185e:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001860:	6821      	ldr	r1, [r4, #0]
 8001862:	694a      	ldr	r2, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001864:	f022 0207 	bic.w	r2, r2, #7
  tmp |= hdma->Init.FIFOMode;
 8001868:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800186a:	431a      	orrs	r2, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800186c:	2b04      	cmp	r3, #4
 800186e:	d10a      	bne.n	8001886 <HAL_DMA_Init+0x9a>
    tmp |= hdma->Init.FIFOThreshold;
 8001870:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8001872:	4302      	orrs	r2, r0
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001874:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001876:	b133      	cbz	r3, 8001886 <HAL_DMA_Init+0x9a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001878:	69a5      	ldr	r5, [r4, #24]
 800187a:	bb3d      	cbnz	r5, 80018cc <HAL_DMA_Init+0xe0>
  {
    switch (tmp)
 800187c:	2801      	cmp	r0, #1
 800187e:	d01f      	beq.n	80018c0 <HAL_DMA_Init+0xd4>
 8001880:	f030 0002 	bics.w	r0, r0, #2
 8001884:	d012      	beq.n	80018ac <HAL_DMA_Init+0xc0>
  hdma->Instance->FCR = tmp;
 8001886:	614a      	str	r2, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001888:	4620      	mov	r0, r4
 800188a:	f7ff ff93 	bl	80017b4 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800188e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001890:	233f      	movs	r3, #63	@ 0x3f
 8001892:	4093      	lsls	r3, r2
 8001894:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001896:	2000      	movs	r0, #0
 8001898:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800189a:	2301      	movs	r3, #1
 800189c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 80018a0:	e7c6      	b.n	8001830 <HAL_DMA_Init+0x44>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018a2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80018a4:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80018a6:	4301      	orrs	r1, r0
 80018a8:	430a      	orrs	r2, r1
 80018aa:	e7d8      	b.n	800185e <HAL_DMA_Init+0x72>
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018ac:	f3c3 6300 	ubfx	r3, r3, #24, #1
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d0e8      	beq.n	8001886 <HAL_DMA_Init+0x9a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80018b4:	2340      	movs	r3, #64	@ 0x40
 80018b6:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80018b8:	2001      	movs	r0, #1
 80018ba:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 80018be:	e7b7      	b.n	8001830 <HAL_DMA_Init+0x44>
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80018c0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80018c4:	bf14      	ite	ne
 80018c6:	2300      	movne	r3, #0
 80018c8:	2301      	moveq	r3, #1
 80018ca:	e7f1      	b.n	80018b0 <HAL_DMA_Init+0xc4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80018cc:	f5b5 5f00 	cmp.w	r5, #8192	@ 0x2000
 80018d0:	d008      	beq.n	80018e4 <HAL_DMA_Init+0xf8>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80018d2:	2802      	cmp	r0, #2
 80018d4:	d9ee      	bls.n	80018b4 <HAL_DMA_Init+0xc8>
 80018d6:	2803      	cmp	r0, #3
 80018d8:	d1d5      	bne.n	8001886 <HAL_DMA_Init+0x9a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018da:	f3c3 6300 	ubfx	r3, r3, #24, #1
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d0d1      	beq.n	8001886 <HAL_DMA_Init+0x9a>
 80018e2:	e7e7      	b.n	80018b4 <HAL_DMA_Init+0xc8>
    switch (tmp)
 80018e4:	2803      	cmp	r0, #3
 80018e6:	d8ce      	bhi.n	8001886 <HAL_DMA_Init+0x9a>
 80018e8:	a501      	add	r5, pc, #4	@ (adr r5, 80018f0 <HAL_DMA_Init+0x104>)
 80018ea:	f855 f020 	ldr.w	pc, [r5, r0, lsl #2]
 80018ee:	bf00      	nop
 80018f0:	080018b5 	.word	0x080018b5
 80018f4:	08001901 	.word	0x08001901
 80018f8:	080018b5 	.word	0x080018b5
 80018fc:	08001907 	.word	0x08001907
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001900:	f3c3 6300 	ubfx	r3, r3, #24, #1
 8001904:	e7eb      	b.n	80018de <HAL_DMA_Init+0xf2>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001906:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800190a:	bf14      	ite	ne
 800190c:	2300      	movne	r3, #0
 800190e:	2301      	moveq	r3, #1
 8001910:	e7e5      	b.n	80018de <HAL_DMA_Init+0xf2>
    return HAL_ERROR;
 8001912:	2001      	movs	r0, #1
 8001914:	e78c      	b.n	8001830 <HAL_DMA_Init+0x44>
 8001916:	bf00      	nop
 8001918:	e010803f 	.word	0xe010803f

0800191c <HAL_DMA_Start_IT>:
{
 800191c:	b470      	push	{r4, r5, r6}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800191e:	6d84      	ldr	r4, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 8001920:	f890 c034 	ldrb.w	ip, [r0, #52]	@ 0x34
 8001924:	f1bc 0f01 	cmp.w	ip, #1
 8001928:	d044      	beq.n	80019b4 <HAL_DMA_Start_IT+0x98>
 800192a:	f04f 0c01 	mov.w	ip, #1
 800192e:	f880 c034 	strb.w	ip, [r0, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001932:	f890 c035 	ldrb.w	ip, [r0, #53]	@ 0x35
 8001936:	fa5f fc8c 	uxtb.w	ip, ip
 800193a:	f1bc 0f01 	cmp.w	ip, #1
 800193e:	d005      	beq.n	800194c <HAL_DMA_Start_IT+0x30>
    __HAL_UNLOCK(hdma);	  
 8001940:	2300      	movs	r3, #0
 8001942:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
    status = HAL_BUSY;
 8001946:	2002      	movs	r0, #2
}
 8001948:	bc70      	pop	{r4, r5, r6}
 800194a:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 800194c:	2502      	movs	r5, #2
 800194e:	f880 5035 	strb.w	r5, [r0, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001952:	2500      	movs	r5, #0
 8001954:	6545      	str	r5, [r0, #84]	@ 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001956:	6806      	ldr	r6, [r0, #0]
 8001958:	6835      	ldr	r5, [r6, #0]
 800195a:	f425 2580 	bic.w	r5, r5, #262144	@ 0x40000
 800195e:	6035      	str	r5, [r6, #0]
  hdma->Instance->NDTR = DataLength;
 8001960:	6805      	ldr	r5, [r0, #0]
 8001962:	606b      	str	r3, [r5, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001964:	6883      	ldr	r3, [r0, #8]
 8001966:	2b40      	cmp	r3, #64	@ 0x40
 8001968:	d01f      	beq.n	80019aa <HAL_DMA_Start_IT+0x8e>
    hdma->Instance->PAR = SrcAddress;
 800196a:	6803      	ldr	r3, [r0, #0]
 800196c:	6099      	str	r1, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800196e:	6803      	ldr	r3, [r0, #0]
 8001970:	60da      	str	r2, [r3, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001972:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8001974:	233f      	movs	r3, #63	@ 0x3f
 8001976:	4093      	lsls	r3, r2
 8001978:	60a3      	str	r3, [r4, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800197a:	6802      	ldr	r2, [r0, #0]
 800197c:	6813      	ldr	r3, [r2, #0]
 800197e:	f043 0316 	orr.w	r3, r3, #22
 8001982:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001984:	6802      	ldr	r2, [r0, #0]
 8001986:	6953      	ldr	r3, [r2, #20]
 8001988:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800198c:	6153      	str	r3, [r2, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 800198e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001990:	b123      	cbz	r3, 800199c <HAL_DMA_Start_IT+0x80>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001992:	6802      	ldr	r2, [r0, #0]
 8001994:	6813      	ldr	r3, [r2, #0]
 8001996:	f043 0308 	orr.w	r3, r3, #8
 800199a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 800199c:	6802      	ldr	r2, [r0, #0]
 800199e:	6813      	ldr	r3, [r2, #0]
 80019a0:	f043 0301 	orr.w	r3, r3, #1
 80019a4:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019a6:	2000      	movs	r0, #0
 80019a8:	e7ce      	b.n	8001948 <HAL_DMA_Start_IT+0x2c>
    hdma->Instance->PAR = DstAddress;
 80019aa:	6803      	ldr	r3, [r0, #0]
 80019ac:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 80019ae:	6803      	ldr	r3, [r0, #0]
 80019b0:	60d9      	str	r1, [r3, #12]
 80019b2:	e7de      	b.n	8001972 <HAL_DMA_Start_IT+0x56>
  __HAL_LOCK(hdma);
 80019b4:	2002      	movs	r0, #2
 80019b6:	e7c7      	b.n	8001948 <HAL_DMA_Start_IT+0x2c>

080019b8 <HAL_DMA_IRQHandler>:
{
 80019b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ba:	b083      	sub	sp, #12
 80019bc:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
 80019be:	2300      	movs	r3, #0
 80019c0:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600;
 80019c2:	4b72      	ldr	r3, [pc, #456]	@ (8001b8c <HAL_DMA_IRQHandler+0x1d4>)
 80019c4:	681e      	ldr	r6, [r3, #0]
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019c6:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr = regs->ISR;
 80019c8:	683d      	ldr	r5, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80019ca:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 80019cc:	2308      	movs	r3, #8
 80019ce:	4093      	lsls	r3, r2
 80019d0:	422b      	tst	r3, r5
 80019d2:	d010      	beq.n	80019f6 <HAL_DMA_IRQHandler+0x3e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80019d4:	6803      	ldr	r3, [r0, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	f012 0f04 	tst.w	r2, #4
 80019dc:	d00b      	beq.n	80019f6 <HAL_DMA_IRQHandler+0x3e>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	f022 0204 	bic.w	r2, r2, #4
 80019e4:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80019e6:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 80019e8:	2308      	movs	r3, #8
 80019ea:	4093      	lsls	r3, r2
 80019ec:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80019ee:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	6543      	str	r3, [r0, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80019f6:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80019f8:	2301      	movs	r3, #1
 80019fa:	4093      	lsls	r3, r2
 80019fc:	422b      	tst	r3, r5
 80019fe:	d009      	beq.n	8001a14 <HAL_DMA_IRQHandler+0x5c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a00:	6822      	ldr	r2, [r4, #0]
 8001a02:	6952      	ldr	r2, [r2, #20]
 8001a04:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8001a08:	d004      	beq.n	8001a14 <HAL_DMA_IRQHandler+0x5c>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a0a:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a0c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001a0e:	f043 0302 	orr.w	r3, r3, #2
 8001a12:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a14:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001a16:	2304      	movs	r3, #4
 8001a18:	4093      	lsls	r3, r2
 8001a1a:	422b      	tst	r3, r5
 8001a1c:	d009      	beq.n	8001a32 <HAL_DMA_IRQHandler+0x7a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a1e:	6822      	ldr	r2, [r4, #0]
 8001a20:	6812      	ldr	r2, [r2, #0]
 8001a22:	f012 0f02 	tst.w	r2, #2
 8001a26:	d004      	beq.n	8001a32 <HAL_DMA_IRQHandler+0x7a>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a28:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a2a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001a2c:	f043 0304 	orr.w	r3, r3, #4
 8001a30:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a32:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001a34:	2310      	movs	r3, #16
 8001a36:	4093      	lsls	r3, r2
 8001a38:	422b      	tst	r3, r5
 8001a3a:	d024      	beq.n	8001a86 <HAL_DMA_IRQHandler+0xce>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a3c:	6822      	ldr	r2, [r4, #0]
 8001a3e:	6812      	ldr	r2, [r2, #0]
 8001a40:	f012 0f08 	tst.w	r2, #8
 8001a44:	d01f      	beq.n	8001a86 <HAL_DMA_IRQHandler+0xce>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a46:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a48:	6823      	ldr	r3, [r4, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8001a50:	d00d      	beq.n	8001a6e <HAL_DMA_IRQHandler+0xb6>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8001a58:	d104      	bne.n	8001a64 <HAL_DMA_IRQHandler+0xac>
          if(hdma->XferHalfCpltCallback != NULL)
 8001a5a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001a5c:	b19b      	cbz	r3, 8001a86 <HAL_DMA_IRQHandler+0xce>
            hdma->XferHalfCpltCallback(hdma);
 8001a5e:	4620      	mov	r0, r4
 8001a60:	4798      	blx	r3
 8001a62:	e010      	b.n	8001a86 <HAL_DMA_IRQHandler+0xce>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a64:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8001a66:	b173      	cbz	r3, 8001a86 <HAL_DMA_IRQHandler+0xce>
            hdma->XferM1HalfCpltCallback(hdma);
 8001a68:	4620      	mov	r0, r4
 8001a6a:	4798      	blx	r3
 8001a6c:	e00b      	b.n	8001a86 <HAL_DMA_IRQHandler+0xce>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8001a74:	d103      	bne.n	8001a7e <HAL_DMA_IRQHandler+0xc6>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	f022 0208 	bic.w	r2, r2, #8
 8001a7c:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8001a7e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001a80:	b10b      	cbz	r3, 8001a86 <HAL_DMA_IRQHandler+0xce>
          hdma->XferHalfCpltCallback(hdma);
 8001a82:	4620      	mov	r0, r4
 8001a84:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a86:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001a88:	2320      	movs	r3, #32
 8001a8a:	4093      	lsls	r3, r2
 8001a8c:	422b      	tst	r3, r5
 8001a8e:	d055      	beq.n	8001b3c <HAL_DMA_IRQHandler+0x184>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a90:	6822      	ldr	r2, [r4, #0]
 8001a92:	6812      	ldr	r2, [r2, #0]
 8001a94:	f012 0f10 	tst.w	r2, #16
 8001a98:	d050      	beq.n	8001b3c <HAL_DMA_IRQHandler+0x184>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a9a:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a9c:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b05      	cmp	r3, #5
 8001aa4:	d00e      	beq.n	8001ac4 <HAL_DMA_IRQHandler+0x10c>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001aa6:	6823      	ldr	r3, [r4, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8001aae:	d033      	beq.n	8001b18 <HAL_DMA_IRQHandler+0x160>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8001ab6:	d12a      	bne.n	8001b0e <HAL_DMA_IRQHandler+0x156>
          if(hdma->XferM1CpltCallback != NULL)
 8001ab8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d03e      	beq.n	8001b3c <HAL_DMA_IRQHandler+0x184>
            hdma->XferM1CpltCallback(hdma);
 8001abe:	4620      	mov	r0, r4
 8001ac0:	4798      	blx	r3
 8001ac2:	e03b      	b.n	8001b3c <HAL_DMA_IRQHandler+0x184>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ac4:	6822      	ldr	r2, [r4, #0]
 8001ac6:	6813      	ldr	r3, [r2, #0]
 8001ac8:	f023 0316 	bic.w	r3, r3, #22
 8001acc:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ace:	6822      	ldr	r2, [r4, #0]
 8001ad0:	6953      	ldr	r3, [r2, #20]
 8001ad2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001ad6:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ad8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001ada:	b1a3      	cbz	r3, 8001b06 <HAL_DMA_IRQHandler+0x14e>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001adc:	6822      	ldr	r2, [r4, #0]
 8001ade:	6813      	ldr	r3, [r2, #0]
 8001ae0:	f023 0308 	bic.w	r3, r3, #8
 8001ae4:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ae6:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001ae8:	233f      	movs	r3, #63	@ 0x3f
 8001aea:	4093      	lsls	r3, r2
 8001aec:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8001aee:	2301      	movs	r3, #1
 8001af0:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8001af4:	2300      	movs	r3, #0
 8001af6:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 8001afa:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d043      	beq.n	8001b88 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8001b00:	4620      	mov	r0, r4
 8001b02:	4798      	blx	r3
 8001b04:	e040      	b.n	8001b88 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b06:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1e7      	bne.n	8001adc <HAL_DMA_IRQHandler+0x124>
 8001b0c:	e7eb      	b.n	8001ae6 <HAL_DMA_IRQHandler+0x12e>
          if(hdma->XferCpltCallback != NULL)
 8001b0e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001b10:	b1a3      	cbz	r3, 8001b3c <HAL_DMA_IRQHandler+0x184>
            hdma->XferCpltCallback(hdma);
 8001b12:	4620      	mov	r0, r4
 8001b14:	4798      	blx	r3
 8001b16:	e011      	b.n	8001b3c <HAL_DMA_IRQHandler+0x184>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8001b1e:	d109      	bne.n	8001b34 <HAL_DMA_IRQHandler+0x17c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	f022 0210 	bic.w	r2, r2, #16
 8001b26:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8001b2e:	2300      	movs	r3, #0
 8001b30:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 8001b34:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001b36:	b10b      	cbz	r3, 8001b3c <HAL_DMA_IRQHandler+0x184>
          hdma->XferCpltCallback(hdma);
 8001b38:	4620      	mov	r0, r4
 8001b3a:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b3c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001b3e:	b31b      	cbz	r3, 8001b88 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b40:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001b42:	f013 0f01 	tst.w	r3, #1
 8001b46:	d01b      	beq.n	8001b80 <HAL_DMA_IRQHandler+0x1c8>
  uint32_t timeout = SystemCoreClock / 9600;
 8001b48:	4b11      	ldr	r3, [pc, #68]	@ (8001b90 <HAL_DMA_IRQHandler+0x1d8>)
 8001b4a:	fba3 3606 	umull	r3, r6, r3, r6
 8001b4e:	0ab6      	lsrs	r6, r6, #10
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b50:	2305      	movs	r3, #5
 8001b52:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 8001b56:	6822      	ldr	r2, [r4, #0]
 8001b58:	6813      	ldr	r3, [r2, #0]
 8001b5a:	f023 0301 	bic.w	r3, r3, #1
 8001b5e:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8001b60:	9b01      	ldr	r3, [sp, #4]
 8001b62:	3301      	adds	r3, #1
 8001b64:	9301      	str	r3, [sp, #4]
 8001b66:	42b3      	cmp	r3, r6
 8001b68:	d804      	bhi.n	8001b74 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b6a:	6823      	ldr	r3, [r4, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f013 0f01 	tst.w	r3, #1
 8001b72:	d1f5      	bne.n	8001b60 <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 8001b74:	2301      	movs	r3, #1
 8001b76:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 8001b80:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001b82:	b10b      	cbz	r3, 8001b88 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8001b84:	4620      	mov	r0, r4
 8001b86:	4798      	blx	r3
}
 8001b88:	b003      	add	sp, #12
 8001b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b8c:	200000c8 	.word	0x200000c8
 8001b90:	1b4e81b5 	.word	0x1b4e81b5

08001b94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b98:	b083      	sub	sp, #12
 8001b9a:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b9c:	4613      	mov	r3, r2
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001b9e:	f04f 0e01 	mov.w	lr, #1
        GPIOx->AFR[position >> 3] = temp;
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001ba2:	2503      	movs	r5, #3
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ba4:	f04f 080f 	mov.w	r8, #15
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ba8:	4c75      	ldr	r4, [pc, #468]	@ (8001d80 <HAL_GPIO_Init+0x1ec>)
 8001baa:	e04a      	b.n	8001c42 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR; 
 8001bac:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001bae:	fa05 fa02 	lsl.w	sl, r5, r2
 8001bb2:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (GPIO_Init->Speed << (position * 2));
 8001bb6:	68cf      	ldr	r7, [r1, #12]
 8001bb8:	4097      	lsls	r7, r2
 8001bba:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8001bbe:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001bc0:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bc2:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bc6:	684f      	ldr	r7, [r1, #4]
 8001bc8:	f3c7 1700 	ubfx	r7, r7, #4, #1
 8001bcc:	409f      	lsls	r7, r3
 8001bce:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 8001bd2:	6047      	str	r7, [r0, #4]
 8001bd4:	e043      	b.n	8001c5e <HAL_GPIO_Init+0xca>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001bd6:	2700      	movs	r7, #0
 8001bd8:	fa07 f70b 	lsl.w	r7, r7, fp
 8001bdc:	ea47 070a 	orr.w	r7, r7, sl
        SYSCFG->EXTICR[position >> 2] = temp;
 8001be0:	f8cc 7008 	str.w	r7, [ip, #8]
        temp = EXTI->RTSR;
 8001be4:	68a7      	ldr	r7, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8001be6:	ea6f 0c09 	mvn.w	ip, r9
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bea:	684e      	ldr	r6, [r1, #4]
 8001bec:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001bf0:	bf0c      	ite	eq
 8001bf2:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8001bf6:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->RTSR = temp;
 8001bfa:	60a7      	str	r7, [r4, #8]

        temp = EXTI->FTSR;
 8001bfc:	68e7      	ldr	r7, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bfe:	684e      	ldr	r6, [r1, #4]
 8001c00:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        temp &= ~((uint32_t)iocurrent);
 8001c04:	bf0c      	ite	eq
 8001c06:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8001c0a:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->FTSR = temp;
 8001c0e:	60e7      	str	r7, [r4, #12]

        temp = EXTI->EMR;
 8001c10:	6867      	ldr	r7, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c12:	684e      	ldr	r6, [r1, #4]
 8001c14:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001c18:	bf0c      	ite	eq
 8001c1a:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8001c1e:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->EMR = temp;
 8001c22:	6067      	str	r7, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c24:	6827      	ldr	r7, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c26:	684e      	ldr	r6, [r1, #4]
 8001c28:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001c2c:	bf0c      	ite	eq
 8001c2e:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8001c32:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->IMR = temp;
 8001c36:	6027      	str	r7, [r4, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c38:	3301      	adds	r3, #1
 8001c3a:	3202      	adds	r2, #2
 8001c3c:	2b10      	cmp	r3, #16
 8001c3e:	f000 809c 	beq.w	8001d7a <HAL_GPIO_Init+0x1e6>
    ioposition = ((uint32_t)0x01) << position;
 8001c42:	fa0e fc03 	lsl.w	ip, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c46:	680f      	ldr	r7, [r1, #0]
 8001c48:	ea0c 0907 	and.w	r9, ip, r7
    if(iocurrent == ioposition)
 8001c4c:	ea3c 0707 	bics.w	r7, ip, r7
 8001c50:	d1f2      	bne.n	8001c38 <HAL_GPIO_Init+0xa4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c52:	684f      	ldr	r7, [r1, #4]
 8001c54:	f007 0703 	and.w	r7, r7, #3
 8001c58:	3f01      	subs	r7, #1
 8001c5a:	2f01      	cmp	r7, #1
 8001c5c:	d9a6      	bls.n	8001bac <HAL_GPIO_Init+0x18>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c5e:	684f      	ldr	r7, [r1, #4]
 8001c60:	f007 0703 	and.w	r7, r7, #3
 8001c64:	2f03      	cmp	r7, #3
 8001c66:	d023      	beq.n	8001cb0 <HAL_GPIO_Init+0x11c>
        temp = GPIOx->PUPDR;
 8001c68:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001c6a:	fa05 fc02 	lsl.w	ip, r5, r2
 8001c6e:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001c72:	688f      	ldr	r7, [r1, #8]
 8001c74:	4097      	lsls	r7, r2
 8001c76:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->PUPDR = temp;
 8001c7a:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c7c:	684f      	ldr	r7, [r1, #4]
 8001c7e:	f007 0703 	and.w	r7, r7, #3
 8001c82:	2f02      	cmp	r7, #2
 8001c84:	d114      	bne.n	8001cb0 <HAL_GPIO_Init+0x11c>
        temp = GPIOx->AFR[position >> 3];
 8001c86:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8001c8a:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8001c8e:	f8dc 7020 	ldr.w	r7, [ip, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001c92:	f003 0b07 	and.w	fp, r3, #7
 8001c96:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001c9a:	fa08 fa0b 	lsl.w	sl, r8, fp
 8001c9e:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001ca2:	690f      	ldr	r7, [r1, #16]
 8001ca4:	fa07 f70b 	lsl.w	r7, r7, fp
 8001ca8:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->AFR[position >> 3] = temp;
 8001cac:	f8cc 7020 	str.w	r7, [ip, #32]
      temp = GPIOx->MODER;
 8001cb0:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001cb2:	fa05 fc02 	lsl.w	ip, r5, r2
 8001cb6:	ea27 0c0c 	bic.w	ip, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001cba:	684f      	ldr	r7, [r1, #4]
 8001cbc:	f007 0703 	and.w	r7, r7, #3
 8001cc0:	4097      	lsls	r7, r2
 8001cc2:	ea47 070c 	orr.w	r7, r7, ip
      GPIOx->MODER = temp;
 8001cc6:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cc8:	684f      	ldr	r7, [r1, #4]
 8001cca:	f417 3f40 	tst.w	r7, #196608	@ 0x30000
 8001cce:	d0b3      	beq.n	8001c38 <HAL_GPIO_Init+0xa4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd0:	4e2c      	ldr	r6, [pc, #176]	@ (8001d84 <HAL_GPIO_Init+0x1f0>)
 8001cd2:	6c77      	ldr	r7, [r6, #68]	@ 0x44
 8001cd4:	f447 4780 	orr.w	r7, r7, #16384	@ 0x4000
 8001cd8:	6477      	str	r7, [r6, #68]	@ 0x44
 8001cda:	6c77      	ldr	r7, [r6, #68]	@ 0x44
 8001cdc:	f407 4780 	and.w	r7, r7, #16384	@ 0x4000
 8001ce0:	9701      	str	r7, [sp, #4]
 8001ce2:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8001ce4:	f023 0c03 	bic.w	ip, r3, #3
 8001ce8:	f10c 4c80 	add.w	ip, ip, #1073741824	@ 0x40000000
 8001cec:	f50c 3c9c 	add.w	ip, ip, #79872	@ 0x13800
 8001cf0:	f8dc 7008 	ldr.w	r7, [ip, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001cf4:	f003 0b03 	and.w	fp, r3, #3
 8001cf8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001cfc:	fa08 fa0b 	lsl.w	sl, r8, fp
 8001d00:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001d04:	4f20      	ldr	r7, [pc, #128]	@ (8001d88 <HAL_GPIO_Init+0x1f4>)
 8001d06:	42b8      	cmp	r0, r7
 8001d08:	f43f af65 	beq.w	8001bd6 <HAL_GPIO_Init+0x42>
 8001d0c:	f5a6 5650 	sub.w	r6, r6, #13312	@ 0x3400
 8001d10:	42b0      	cmp	r0, r6
 8001d12:	d022      	beq.n	8001d5a <HAL_GPIO_Init+0x1c6>
 8001d14:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8001d18:	42b0      	cmp	r0, r6
 8001d1a:	d020      	beq.n	8001d5e <HAL_GPIO_Init+0x1ca>
 8001d1c:	f507 6740 	add.w	r7, r7, #3072	@ 0xc00
 8001d20:	42b8      	cmp	r0, r7
 8001d22:	d01e      	beq.n	8001d62 <HAL_GPIO_Init+0x1ce>
 8001d24:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8001d28:	42b8      	cmp	r0, r7
 8001d2a:	d01c      	beq.n	8001d66 <HAL_GPIO_Init+0x1d2>
 8001d2c:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8001d30:	42b8      	cmp	r0, r7
 8001d32:	d01a      	beq.n	8001d6a <HAL_GPIO_Init+0x1d6>
 8001d34:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8001d38:	42b8      	cmp	r0, r7
 8001d3a:	d018      	beq.n	8001d6e <HAL_GPIO_Init+0x1da>
 8001d3c:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8001d40:	42b8      	cmp	r0, r7
 8001d42:	d016      	beq.n	8001d72 <HAL_GPIO_Init+0x1de>
 8001d44:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8001d48:	42b8      	cmp	r0, r7
 8001d4a:	d014      	beq.n	8001d76 <HAL_GPIO_Init+0x1e2>
 8001d4c:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8001d50:	42b8      	cmp	r0, r7
 8001d52:	bf14      	ite	ne
 8001d54:	270a      	movne	r7, #10
 8001d56:	2709      	moveq	r7, #9
 8001d58:	e73e      	b.n	8001bd8 <HAL_GPIO_Init+0x44>
 8001d5a:	2701      	movs	r7, #1
 8001d5c:	e73c      	b.n	8001bd8 <HAL_GPIO_Init+0x44>
 8001d5e:	2702      	movs	r7, #2
 8001d60:	e73a      	b.n	8001bd8 <HAL_GPIO_Init+0x44>
 8001d62:	2703      	movs	r7, #3
 8001d64:	e738      	b.n	8001bd8 <HAL_GPIO_Init+0x44>
 8001d66:	2704      	movs	r7, #4
 8001d68:	e736      	b.n	8001bd8 <HAL_GPIO_Init+0x44>
 8001d6a:	2705      	movs	r7, #5
 8001d6c:	e734      	b.n	8001bd8 <HAL_GPIO_Init+0x44>
 8001d6e:	2706      	movs	r7, #6
 8001d70:	e732      	b.n	8001bd8 <HAL_GPIO_Init+0x44>
 8001d72:	2707      	movs	r7, #7
 8001d74:	e730      	b.n	8001bd8 <HAL_GPIO_Init+0x44>
 8001d76:	2708      	movs	r7, #8
 8001d78:	e72e      	b.n	8001bd8 <HAL_GPIO_Init+0x44>
      }
    }
  }
}
 8001d7a:	b003      	add	sp, #12
 8001d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d80:	40013c00 	.word	0x40013c00
 8001d84:	40023800 	.word	0x40023800
 8001d88:	40020000 	.word	0x40020000

08001d8c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d8c:	b10a      	cbz	r2, 8001d92 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d8e:	6181      	str	r1, [r0, #24]
 8001d90:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001d92:	0409      	lsls	r1, r1, #16
 8001d94:	6181      	str	r1, [r0, #24]
  }
}
 8001d96:	4770      	bx	lr

08001d98 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001d98:	6803      	ldr	r3, [r0, #0]
 8001d9a:	699a      	ldr	r2, [r3, #24]
 8001d9c:	f012 0f02 	tst.w	r2, #2
 8001da0:	d001      	beq.n	8001da6 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001da2:	2200      	movs	r2, #0
 8001da4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001da6:	6803      	ldr	r3, [r0, #0]
 8001da8:	699a      	ldr	r2, [r3, #24]
 8001daa:	f012 0f01 	tst.w	r2, #1
 8001dae:	d103      	bne.n	8001db8 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001db0:	699a      	ldr	r2, [r3, #24]
 8001db2:	f042 0201 	orr.w	r2, r2, #1
 8001db6:	619a      	str	r2, [r3, #24]
  }
}
 8001db8:	4770      	bx	lr

08001dba <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001dba:	b430      	push	{r4, r5}
 8001dbc:	9c02      	ldr	r4, [sp, #8]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001dbe:	6805      	ldr	r5, [r0, #0]
 8001dc0:	6868      	ldr	r0, [r5, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001dc2:	4323      	orrs	r3, r4
 8001dc4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001dc8:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8001dcc:	430b      	orrs	r3, r1
 8001dce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8001dd2:	0d64      	lsrs	r4, r4, #21
 8001dd4:	f404 6480 	and.w	r4, r4, #1024	@ 0x400
 8001dd8:	f044 747f 	orr.w	r4, r4, #66846720	@ 0x3fc0000
 8001ddc:	f444 3458 	orr.w	r4, r4, #221184	@ 0x36000
 8001de0:	f444 747f 	orr.w	r4, r4, #1020	@ 0x3fc
 8001de4:	f044 0403 	orr.w	r4, r4, #3
 8001de8:	ea20 0004 	bic.w	r0, r0, r4
 8001dec:	4303      	orrs	r3, r0
 8001dee:	606b      	str	r3, [r5, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001df0:	bc30      	pop	{r4, r5}
 8001df2:	4770      	bx	lr

08001df4 <I2C_IsErrorOccurred>:
{
 8001df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001df8:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 8001dfa:	6803      	ldr	r3, [r0, #0]
 8001dfc:	699f      	ldr	r7, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001dfe:	f017 0710 	ands.w	r7, r7, #16
 8001e02:	d04e      	beq.n	8001ea2 <I2C_IsErrorOccurred+0xae>
 8001e04:	460e      	mov	r6, r1
 8001e06:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e08:	2210      	movs	r2, #16
 8001e0a:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8001e0c:	2500      	movs	r5, #0
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e0e:	6821      	ldr	r1, [r4, #0]
 8001e10:	698b      	ldr	r3, [r1, #24]
 8001e12:	f013 0f20 	tst.w	r3, #32
 8001e16:	d13d      	bne.n	8001e94 <I2C_IsErrorOccurred+0xa0>
 8001e18:	2d00      	cmp	r5, #0
 8001e1a:	d13b      	bne.n	8001e94 <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 8001e1c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8001e20:	d0f6      	beq.n	8001e10 <I2C_IsErrorOccurred+0x1c>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001e22:	f7ff f97f 	bl	8001124 <HAL_GetTick>
 8001e26:	2500      	movs	r5, #0
 8001e28:	eba0 0008 	sub.w	r0, r0, r8
 8001e2c:	42b0      	cmp	r0, r6
 8001e2e:	d801      	bhi.n	8001e34 <I2C_IsErrorOccurred+0x40>
 8001e30:	2e00      	cmp	r6, #0
 8001e32:	d1ec      	bne.n	8001e0e <I2C_IsErrorOccurred+0x1a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001e34:	6822      	ldr	r2, [r4, #0]
 8001e36:	6850      	ldr	r0, [r2, #4]
          tmp2 = hi2c->Mode;
 8001e38:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 8001e3c:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001e3e:	6991      	ldr	r1, [r2, #24]
 8001e40:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 8001e44:	d004      	beq.n	8001e50 <I2C_IsErrorOccurred+0x5c>
              (tmp1 != I2C_CR2_STOP) && \
 8001e46:	f410 4f80 	tst.w	r0, #16384	@ 0x4000
 8001e4a:	d101      	bne.n	8001e50 <I2C_IsErrorOccurred+0x5c>
 8001e4c:	2b20      	cmp	r3, #32
 8001e4e:	d119      	bne.n	8001e84 <I2C_IsErrorOccurred+0x90>
{
 8001e50:	2500      	movs	r5, #0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e52:	6823      	ldr	r3, [r4, #0]
 8001e54:	699b      	ldr	r3, [r3, #24]
 8001e56:	f013 0f20 	tst.w	r3, #32
 8001e5a:	d1d8      	bne.n	8001e0e <I2C_IsErrorOccurred+0x1a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001e5c:	f7ff f962 	bl	8001124 <HAL_GetTick>
 8001e60:	eba0 0008 	sub.w	r0, r0, r8
 8001e64:	2819      	cmp	r0, #25
 8001e66:	d9f4      	bls.n	8001e52 <I2C_IsErrorOccurred+0x5e>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e68:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001e6a:	f043 0320 	orr.w	r3, r3, #32
 8001e6e:	6463      	str	r3, [r4, #68]	@ 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001e70:	2320      	movs	r3, #32
 8001e72:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e76:	2300      	movs	r3, #0
 8001e78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
              __HAL_UNLOCK(hi2c);
 8001e7c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
              status = HAL_ERROR;
 8001e80:	2501      	movs	r5, #1
 8001e82:	e7e6      	b.n	8001e52 <I2C_IsErrorOccurred+0x5e>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001e84:	6853      	ldr	r3, [r2, #4]
 8001e86:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e8a:	6053      	str	r3, [r2, #4]
            tickstart = HAL_GetTick();
 8001e8c:	f7ff f94a 	bl	8001124 <HAL_GetTick>
 8001e90:	4680      	mov	r8, r0
 8001e92:	e7dd      	b.n	8001e50 <I2C_IsErrorOccurred+0x5c>
    if (status == HAL_OK)
 8001e94:	2d00      	cmp	r5, #0
 8001e96:	d13f      	bne.n	8001f18 <I2C_IsErrorOccurred+0x124>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e98:	2320      	movs	r3, #32
 8001e9a:	61cb      	str	r3, [r1, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8001e9c:	2704      	movs	r7, #4
    status = HAL_ERROR;
 8001e9e:	2501      	movs	r5, #1
 8001ea0:	e000      	b.n	8001ea4 <I2C_IsErrorOccurred+0xb0>
  HAL_StatusTypeDef status = HAL_OK;
 8001ea2:	2500      	movs	r5, #0
  itflag = hi2c->Instance->ISR;
 8001ea4:	6822      	ldr	r2, [r4, #0]
 8001ea6:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001ea8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001eac:	d005      	beq.n	8001eba <I2C_IsErrorOccurred+0xc6>
    error_code |= HAL_I2C_ERROR_BERR;
 8001eae:	f047 0701 	orr.w	r7, r7, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001eb2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001eb6:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8001eb8:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001eba:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8001ebe:	d02d      	beq.n	8001f1c <I2C_IsErrorOccurred+0x128>
    error_code |= HAL_I2C_ERROR_OVR;
 8001ec0:	f047 0708 	orr.w	r7, r7, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001ec4:	6822      	ldr	r2, [r4, #0]
 8001ec6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001eca:	61d1      	str	r1, [r2, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001ecc:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8001ed0:	d005      	beq.n	8001ede <I2C_IsErrorOccurred+0xea>
    error_code |= HAL_I2C_ERROR_ARLO;
 8001ed2:	f047 0702 	orr.w	r7, r7, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001ed6:	6823      	ldr	r3, [r4, #0]
 8001ed8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001edc:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8001ede:	4620      	mov	r0, r4
 8001ee0:	f7ff ff5a 	bl	8001d98 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8001ee4:	6822      	ldr	r2, [r4, #0]
 8001ee6:	6853      	ldr	r3, [r2, #4]
 8001ee8:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8001eec:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8001ef0:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8001ef4:	f023 0301 	bic.w	r3, r3, #1
 8001ef8:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8001efa:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001efc:	433b      	orrs	r3, r7
 8001efe:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001f00:	2320      	movs	r3, #32
 8001f02:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f06:	2300      	movs	r3, #0
 8001f08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8001f0c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8001f10:	2501      	movs	r5, #1
}
 8001f12:	4628      	mov	r0, r5
 8001f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    error_code |= HAL_I2C_ERROR_AF;
 8001f18:	2704      	movs	r7, #4
 8001f1a:	e7c3      	b.n	8001ea4 <I2C_IsErrorOccurred+0xb0>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001f1c:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8001f20:	d1d7      	bne.n	8001ed2 <I2C_IsErrorOccurred+0xde>
  if (status != HAL_OK)
 8001f22:	2d00      	cmp	r5, #0
 8001f24:	d0f5      	beq.n	8001f12 <I2C_IsErrorOccurred+0x11e>
 8001f26:	e7da      	b.n	8001ede <I2C_IsErrorOccurred+0xea>

08001f28 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8001f28:	b570      	push	{r4, r5, r6, lr}
 8001f2a:	4604      	mov	r4, r0
 8001f2c:	460d      	mov	r5, r1
 8001f2e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f30:	6823      	ldr	r3, [r4, #0]
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	f013 0f02 	tst.w	r3, #2
 8001f38:	d11d      	bne.n	8001f76 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f3a:	4632      	mov	r2, r6
 8001f3c:	4629      	mov	r1, r5
 8001f3e:	4620      	mov	r0, r4
 8001f40:	f7ff ff58 	bl	8001df4 <I2C_IsErrorOccurred>
 8001f44:	b9c8      	cbnz	r0, 8001f7a <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8001f46:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001f4a:	d0f1      	beq.n	8001f30 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f4c:	f7ff f8ea 	bl	8001124 <HAL_GetTick>
 8001f50:	1b80      	subs	r0, r0, r6
 8001f52:	42a8      	cmp	r0, r5
 8001f54:	d801      	bhi.n	8001f5a <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8001f56:	2d00      	cmp	r5, #0
 8001f58:	d1ea      	bne.n	8001f30 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f5a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001f5c:	f043 0320 	orr.w	r3, r3, #32
 8001f60:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f62:	2320      	movs	r3, #32
 8001f64:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 8001f6e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return HAL_ERROR;
 8001f72:	2001      	movs	r0, #1
 8001f74:	e000      	b.n	8001f78 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8001f76:	2000      	movs	r0, #0
}
 8001f78:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001f7a:	2001      	movs	r0, #1
 8001f7c:	e7fc      	b.n	8001f78 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

08001f7e <I2C_WaitOnFlagUntilTimeout>:
{
 8001f7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f82:	4680      	mov	r8, r0
 8001f84:	460f      	mov	r7, r1
 8001f86:	4616      	mov	r6, r2
 8001f88:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f8a:	f8d8 3000 	ldr.w	r3, [r8]
 8001f8e:	699c      	ldr	r4, [r3, #24]
 8001f90:	ea37 0404 	bics.w	r4, r7, r4
 8001f94:	bf0c      	ite	eq
 8001f96:	2401      	moveq	r4, #1
 8001f98:	2400      	movne	r4, #0
 8001f9a:	42b4      	cmp	r4, r6
 8001f9c:	d11a      	bne.n	8001fd4 <I2C_WaitOnFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 8001f9e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001fa2:	d0f4      	beq.n	8001f8e <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fa4:	f7ff f8be 	bl	8001124 <HAL_GetTick>
 8001fa8:	9b06      	ldr	r3, [sp, #24]
 8001faa:	1ac0      	subs	r0, r0, r3
 8001fac:	42a8      	cmp	r0, r5
 8001fae:	d801      	bhi.n	8001fb4 <I2C_WaitOnFlagUntilTimeout+0x36>
 8001fb0:	2d00      	cmp	r5, #0
 8001fb2:	d1ea      	bne.n	8001f8a <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fb4:	f8d8 3044 	ldr.w	r3, [r8, #68]	@ 0x44
 8001fb8:	f043 0320 	orr.w	r3, r3, #32
 8001fbc:	f8c8 3044 	str.w	r3, [r8, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001fc0:	2320      	movs	r3, #32
 8001fc2:	f888 3041 	strb.w	r3, [r8, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	f888 3042 	strb.w	r3, [r8, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 8001fcc:	f888 3040 	strb.w	r3, [r8, #64]	@ 0x40
        return HAL_ERROR;
 8001fd0:	2001      	movs	r0, #1
 8001fd2:	e000      	b.n	8001fd6 <I2C_WaitOnFlagUntilTimeout+0x58>
  return HAL_OK;
 8001fd4:	2000      	movs	r0, #0
}
 8001fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001fda <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8001fda:	b570      	push	{r4, r5, r6, lr}
 8001fdc:	4605      	mov	r5, r0
 8001fde:	460c      	mov	r4, r1
 8001fe0:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fe2:	682b      	ldr	r3, [r5, #0]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	f013 0f20 	tst.w	r3, #32
 8001fea:	d11a      	bne.n	8002022 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fec:	4632      	mov	r2, r6
 8001fee:	4621      	mov	r1, r4
 8001ff0:	4628      	mov	r0, r5
 8001ff2:	f7ff feff 	bl	8001df4 <I2C_IsErrorOccurred>
 8001ff6:	b9b0      	cbnz	r0, 8002026 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ff8:	f7ff f894 	bl	8001124 <HAL_GetTick>
 8001ffc:	1b80      	subs	r0, r0, r6
 8001ffe:	42a0      	cmp	r0, r4
 8002000:	d801      	bhi.n	8002006 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8002002:	2c00      	cmp	r4, #0
 8002004:	d1ed      	bne.n	8001fe2 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002006:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8002008:	f043 0320 	orr.w	r3, r3, #32
 800200c:	646b      	str	r3, [r5, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800200e:	2320      	movs	r3, #32
 8002010:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002014:	2300      	movs	r3, #0
 8002016:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800201a:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
      return HAL_ERROR;
 800201e:	2001      	movs	r0, #1
}
 8002020:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8002022:	2000      	movs	r0, #0
 8002024:	e7fc      	b.n	8002020 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8002026:	2001      	movs	r0, #1
 8002028:	e7fa      	b.n	8002020 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
	...

0800202c <HAL_I2C_Init>:
  if (hi2c == NULL)
 800202c:	2800      	cmp	r0, #0
 800202e:	d053      	beq.n	80020d8 <HAL_I2C_Init+0xac>
{
 8002030:	b510      	push	{r4, lr}
 8002032:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002034:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002038:	2b00      	cmp	r3, #0
 800203a:	d043      	beq.n	80020c4 <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800203c:	2324      	movs	r3, #36	@ 0x24
 800203e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8002042:	6822      	ldr	r2, [r4, #0]
 8002044:	6813      	ldr	r3, [r2, #0]
 8002046:	f023 0301 	bic.w	r3, r3, #1
 800204a:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800204c:	6822      	ldr	r2, [r4, #0]
 800204e:	6863      	ldr	r3, [r4, #4]
 8002050:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8002054:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002056:	6822      	ldr	r2, [r4, #0]
 8002058:	6893      	ldr	r3, [r2, #8]
 800205a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800205e:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002060:	68e3      	ldr	r3, [r4, #12]
 8002062:	2b01      	cmp	r3, #1
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002064:	6822      	ldr	r2, [r4, #0]
 8002066:	68a3      	ldr	r3, [r4, #8]
 8002068:	bf0c      	ite	eq
 800206a:	f443 4300 	orreq.w	r3, r3, #32768	@ 0x8000
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800206e:	f443 4304 	orrne.w	r3, r3, #33792	@ 0x8400
 8002072:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002074:	68e3      	ldr	r3, [r4, #12]
 8002076:	2b02      	cmp	r3, #2
 8002078:	d029      	beq.n	80020ce <HAL_I2C_Init+0xa2>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800207a:	6822      	ldr	r2, [r4, #0]
 800207c:	6851      	ldr	r1, [r2, #4]
 800207e:	4b17      	ldr	r3, [pc, #92]	@ (80020dc <HAL_I2C_Init+0xb0>)
 8002080:	430b      	orrs	r3, r1
 8002082:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002084:	6822      	ldr	r2, [r4, #0]
 8002086:	68d3      	ldr	r3, [r2, #12]
 8002088:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800208c:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800208e:	6822      	ldr	r2, [r4, #0]
 8002090:	6923      	ldr	r3, [r4, #16]
 8002092:	6961      	ldr	r1, [r4, #20]
 8002094:	430b      	orrs	r3, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002096:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002098:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800209c:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800209e:	6822      	ldr	r2, [r4, #0]
 80020a0:	69e3      	ldr	r3, [r4, #28]
 80020a2:	6a21      	ldr	r1, [r4, #32]
 80020a4:	430b      	orrs	r3, r1
 80020a6:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 80020a8:	6822      	ldr	r2, [r4, #0]
 80020aa:	6813      	ldr	r3, [r2, #0]
 80020ac:	f043 0301 	orr.w	r3, r3, #1
 80020b0:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020b2:	2000      	movs	r0, #0
 80020b4:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80020b6:	2320      	movs	r3, #32
 80020b8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80020bc:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020be:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 80020c2:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80020c4:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 80020c8:	f7fe fcda 	bl	8000a80 <HAL_I2C_MspInit>
 80020cc:	e7b6      	b.n	800203c <HAL_I2C_Init+0x10>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80020ce:	6823      	ldr	r3, [r4, #0]
 80020d0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80020d4:	605a      	str	r2, [r3, #4]
 80020d6:	e7d0      	b.n	800207a <HAL_I2C_Init+0x4e>
    return HAL_ERROR;
 80020d8:	2001      	movs	r0, #1
}
 80020da:	4770      	bx	lr
 80020dc:	02008000 	.word	0x02008000

080020e0 <HAL_I2C_Master_Transmit>:
{
 80020e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80020e4:	b082      	sub	sp, #8
 80020e6:	460f      	mov	r7, r1
 80020e8:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 80020ea:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 80020ee:	b2c9      	uxtb	r1, r1
 80020f0:	2920      	cmp	r1, #32
 80020f2:	f040 80a7 	bne.w	8002244 <HAL_I2C_Master_Transmit+0x164>
 80020f6:	4604      	mov	r4, r0
 80020f8:	4690      	mov	r8, r2
 80020fa:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 80020fc:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8002100:	2b01      	cmp	r3, #1
 8002102:	f000 80a3 	beq.w	800224c <HAL_I2C_Master_Transmit+0x16c>
 8002106:	f04f 0a01 	mov.w	sl, #1
 800210a:	f880 a040 	strb.w	sl, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 800210e:	f7ff f809 	bl	8001124 <HAL_GetTick>
 8002112:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002114:	9000      	str	r0, [sp, #0]
 8002116:	2319      	movs	r3, #25
 8002118:	4652      	mov	r2, sl
 800211a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800211e:	4620      	mov	r0, r4
 8002120:	f7ff ff2d 	bl	8001f7e <I2C_WaitOnFlagUntilTimeout>
 8002124:	2800      	cmp	r0, #0
 8002126:	f040 8093 	bne.w	8002250 <HAL_I2C_Master_Transmit+0x170>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800212a:	2321      	movs	r3, #33	@ 0x21
 800212c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002130:	2310      	movs	r3, #16
 8002132:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002136:	2300      	movs	r3, #0
 8002138:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 800213a:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 800213e:	f8a4 902a 	strh.w	r9, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002142:	6363      	str	r3, [r4, #52]	@ 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002144:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002146:	b29b      	uxth	r3, r3
 8002148:	2bff      	cmp	r3, #255	@ 0xff
 800214a:	d945      	bls.n	80021d8 <HAL_I2C_Master_Transmit+0xf8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800214c:	22ff      	movs	r2, #255	@ 0xff
 800214e:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002150:	4b43      	ldr	r3, [pc, #268]	@ (8002260 <HAL_I2C_Master_Transmit+0x180>)
 8002152:	9300      	str	r3, [sp, #0]
 8002154:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002158:	4639      	mov	r1, r7
 800215a:	4620      	mov	r0, r4
 800215c:	f7ff fe2d 	bl	8001dba <I2C_TransferConfig>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002160:	f04f 0900 	mov.w	r9, #0
 8002164:	f04f 0880 	mov.w	r8, #128	@ 0x80
    while (hi2c->XferCount > 0U)
 8002168:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800216a:	b29b      	uxth	r3, r3
 800216c:	2b00      	cmp	r3, #0
 800216e:	d04d      	beq.n	800220c <HAL_I2C_Master_Transmit+0x12c>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002170:	462a      	mov	r2, r5
 8002172:	4631      	mov	r1, r6
 8002174:	4620      	mov	r0, r4
 8002176:	f7ff fed7 	bl	8001f28 <I2C_WaitOnTXISFlagUntilTimeout>
 800217a:	2800      	cmp	r0, #0
 800217c:	d16a      	bne.n	8002254 <HAL_I2C_Master_Transmit+0x174>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800217e:	6823      	ldr	r3, [r4, #0]
 8002180:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002182:	7812      	ldrb	r2, [r2, #0]
 8002184:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8002186:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002188:	3301      	adds	r3, #1
 800218a:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800218c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800218e:	3b01      	subs	r3, #1
 8002190:	b29b      	uxth	r3, r3
 8002192:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8002194:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002196:	3b01      	subs	r3, #1
 8002198:	b29b      	uxth	r3, r3
 800219a:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800219c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800219e:	b292      	uxth	r2, r2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d1e1      	bne.n	8002168 <HAL_I2C_Master_Transmit+0x88>
 80021a4:	2a00      	cmp	r2, #0
 80021a6:	d0df      	beq.n	8002168 <HAL_I2C_Master_Transmit+0x88>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80021a8:	9500      	str	r5, [sp, #0]
 80021aa:	4633      	mov	r3, r6
 80021ac:	464a      	mov	r2, r9
 80021ae:	4641      	mov	r1, r8
 80021b0:	4620      	mov	r0, r4
 80021b2:	f7ff fee4 	bl	8001f7e <I2C_WaitOnFlagUntilTimeout>
 80021b6:	2800      	cmp	r0, #0
 80021b8:	d14e      	bne.n	8002258 <HAL_I2C_Master_Transmit+0x178>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021ba:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80021bc:	b29b      	uxth	r3, r3
 80021be:	2bff      	cmp	r3, #255	@ 0xff
 80021c0:	d917      	bls.n	80021f2 <HAL_I2C_Master_Transmit+0x112>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80021c2:	22ff      	movs	r2, #255	@ 0xff
 80021c4:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80021c6:	2300      	movs	r3, #0
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80021ce:	4639      	mov	r1, r7
 80021d0:	4620      	mov	r0, r4
 80021d2:	f7ff fdf2 	bl	8001dba <I2C_TransferConfig>
 80021d6:	e7c7      	b.n	8002168 <HAL_I2C_Master_Transmit+0x88>
      hi2c->XferSize = hi2c->XferCount;
 80021d8:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80021da:	b292      	uxth	r2, r2
 80021dc:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80021de:	4b20      	ldr	r3, [pc, #128]	@ (8002260 <HAL_I2C_Master_Transmit+0x180>)
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80021e6:	b2d2      	uxtb	r2, r2
 80021e8:	4639      	mov	r1, r7
 80021ea:	4620      	mov	r0, r4
 80021ec:	f7ff fde5 	bl	8001dba <I2C_TransferConfig>
 80021f0:	e7b6      	b.n	8002160 <HAL_I2C_Master_Transmit+0x80>
          hi2c->XferSize = hi2c->XferCount;
 80021f2:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80021f4:	b292      	uxth	r2, r2
 80021f6:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80021f8:	2300      	movs	r3, #0
 80021fa:	9300      	str	r3, [sp, #0]
 80021fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002200:	b2d2      	uxtb	r2, r2
 8002202:	4639      	mov	r1, r7
 8002204:	4620      	mov	r0, r4
 8002206:	f7ff fdd8 	bl	8001dba <I2C_TransferConfig>
 800220a:	e7ad      	b.n	8002168 <HAL_I2C_Master_Transmit+0x88>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800220c:	462a      	mov	r2, r5
 800220e:	4631      	mov	r1, r6
 8002210:	4620      	mov	r0, r4
 8002212:	f7ff fee2 	bl	8001fda <I2C_WaitOnSTOPFlagUntilTimeout>
 8002216:	bb08      	cbnz	r0, 800225c <HAL_I2C_Master_Transmit+0x17c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002218:	6823      	ldr	r3, [r4, #0]
 800221a:	2220      	movs	r2, #32
 800221c:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800221e:	6821      	ldr	r1, [r4, #0]
 8002220:	684b      	ldr	r3, [r1, #4]
 8002222:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8002226:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 800222a:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 800222e:	f023 0301 	bic.w	r3, r3, #1
 8002232:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002234:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002238:	2300      	movs	r3, #0
 800223a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 800223e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    return HAL_OK;
 8002242:	e000      	b.n	8002246 <HAL_I2C_Master_Transmit+0x166>
    return HAL_BUSY;
 8002244:	2002      	movs	r0, #2
}
 8002246:	b002      	add	sp, #8
 8002248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 800224c:	2002      	movs	r0, #2
 800224e:	e7fa      	b.n	8002246 <HAL_I2C_Master_Transmit+0x166>
      return HAL_ERROR;
 8002250:	2001      	movs	r0, #1
 8002252:	e7f8      	b.n	8002246 <HAL_I2C_Master_Transmit+0x166>
        return HAL_ERROR;
 8002254:	2001      	movs	r0, #1
 8002256:	e7f6      	b.n	8002246 <HAL_I2C_Master_Transmit+0x166>
          return HAL_ERROR;
 8002258:	2001      	movs	r0, #1
 800225a:	e7f4      	b.n	8002246 <HAL_I2C_Master_Transmit+0x166>
      return HAL_ERROR;
 800225c:	2001      	movs	r0, #1
 800225e:	e7f2      	b.n	8002246 <HAL_I2C_Master_Transmit+0x166>
 8002260:	80002000 	.word	0x80002000

08002264 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002264:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002266:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 800226a:	b2d2      	uxtb	r2, r2
 800226c:	2a20      	cmp	r2, #32
 800226e:	d123      	bne.n	80022b8 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002270:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8002274:	2a01      	cmp	r2, #1
 8002276:	d021      	beq.n	80022bc <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8002278:	2201      	movs	r2, #1
 800227a:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800227e:	2224      	movs	r2, #36	@ 0x24
 8002280:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002284:	6800      	ldr	r0, [r0, #0]
 8002286:	6802      	ldr	r2, [r0, #0]
 8002288:	f022 0201 	bic.w	r2, r2, #1
 800228c:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800228e:	6818      	ldr	r0, [r3, #0]
 8002290:	6802      	ldr	r2, [r0, #0]
 8002292:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002296:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002298:	6818      	ldr	r0, [r3, #0]
 800229a:	6802      	ldr	r2, [r0, #0]
 800229c:	4311      	orrs	r1, r2
 800229e:	6001      	str	r1, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022a0:	6819      	ldr	r1, [r3, #0]
 80022a2:	680a      	ldr	r2, [r1, #0]
 80022a4:	f042 0201 	orr.w	r2, r2, #1
 80022a8:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022aa:	2220      	movs	r2, #32
 80022ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022b0:	2000      	movs	r0, #0
 80022b2:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 80022b6:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80022b8:	2002      	movs	r0, #2
 80022ba:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80022bc:	2002      	movs	r0, #2
  }
}
 80022be:	4770      	bx	lr

080022c0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80022c0:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022c2:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 80022c6:	b2d2      	uxtb	r2, r2
 80022c8:	2a20      	cmp	r2, #32
 80022ca:	d121      	bne.n	8002310 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022cc:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 80022d0:	2a01      	cmp	r2, #1
 80022d2:	d01f      	beq.n	8002314 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 80022d4:	2201      	movs	r2, #1
 80022d6:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022da:	2224      	movs	r2, #36	@ 0x24
 80022dc:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022e0:	6800      	ldr	r0, [r0, #0]
 80022e2:	6802      	ldr	r2, [r0, #0]
 80022e4:	f022 0201 	bic.w	r2, r2, #1
 80022e8:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80022ea:	6818      	ldr	r0, [r3, #0]
 80022ec:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80022ee:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80022f2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80022f6:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022f8:	6819      	ldr	r1, [r3, #0]
 80022fa:	680a      	ldr	r2, [r1, #0]
 80022fc:	f042 0201 	orr.w	r2, r2, #1
 8002300:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002302:	2220      	movs	r2, #32
 8002304:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002308:	2000      	movs	r0, #0
 800230a:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 800230e:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8002310:	2002      	movs	r0, #2
 8002312:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002314:	2002      	movs	r0, #2
  }
}
 8002316:	4770      	bx	lr

08002318 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002318:	b530      	push	{r4, r5, lr}
 800231a:	b083      	sub	sp, #12
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 800231c:	4b1b      	ldr	r3, [pc, #108]	@ (800238c <HAL_PWREx_EnableOverDrive+0x74>)
 800231e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002320:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002324:	641a      	str	r2, [r3, #64]	@ 0x40
 8002326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002328:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800232c:	9301      	str	r3, [sp, #4]
 800232e:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002330:	4a17      	ldr	r2, [pc, #92]	@ (8002390 <HAL_PWREx_EnableOverDrive+0x78>)
 8002332:	6813      	ldr	r3, [r2, #0]
 8002334:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002338:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800233a:	f7fe fef3 	bl	8001124 <HAL_GetTick>
 800233e:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002340:	4d13      	ldr	r5, [pc, #76]	@ (8002390 <HAL_PWREx_EnableOverDrive+0x78>)
 8002342:	686b      	ldr	r3, [r5, #4]
 8002344:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8002348:	d108      	bne.n	800235c <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800234a:	f7fe feeb 	bl	8001124 <HAL_GetTick>
 800234e:	1b00      	subs	r0, r0, r4
 8002350:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8002354:	d9f5      	bls.n	8002342 <HAL_PWREx_EnableOverDrive+0x2a>
    {
      return HAL_TIMEOUT;
 8002356:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8002358:	b003      	add	sp, #12
 800235a:	bd30      	pop	{r4, r5, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800235c:	4a0c      	ldr	r2, [pc, #48]	@ (8002390 <HAL_PWREx_EnableOverDrive+0x78>)
 800235e:	6813      	ldr	r3, [r2, #0]
 8002360:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002364:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8002366:	f7fe fedd 	bl	8001124 <HAL_GetTick>
 800236a:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800236c:	4d08      	ldr	r5, [pc, #32]	@ (8002390 <HAL_PWREx_EnableOverDrive+0x78>)
 800236e:	686b      	ldr	r3, [r5, #4]
 8002370:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002374:	d107      	bne.n	8002386 <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002376:	f7fe fed5 	bl	8001124 <HAL_GetTick>
 800237a:	1b00      	subs	r0, r0, r4
 800237c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8002380:	d9f5      	bls.n	800236e <HAL_PWREx_EnableOverDrive+0x56>
      return HAL_TIMEOUT;
 8002382:	2003      	movs	r0, #3
 8002384:	e7e8      	b.n	8002358 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8002386:	2000      	movs	r0, #0
 8002388:	e7e6      	b.n	8002358 <HAL_PWREx_EnableOverDrive+0x40>
 800238a:	bf00      	nop
 800238c:	40023800 	.word	0x40023800
 8002390:	40007000 	.word	0x40007000

08002394 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002394:	2800      	cmp	r0, #0
 8002396:	f000 8209 	beq.w	80027ac <HAL_RCC_OscConfig+0x418>
{
 800239a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023a2:	6803      	ldr	r3, [r0, #0]
 80023a4:	f013 0f01 	tst.w	r3, #1
 80023a8:	d029      	beq.n	80023fe <HAL_RCC_OscConfig+0x6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023aa:	4b96      	ldr	r3, [pc, #600]	@ (8002604 <HAL_RCC_OscConfig+0x270>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f003 030c 	and.w	r3, r3, #12
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	d01a      	beq.n	80023ec <HAL_RCC_OscConfig+0x58>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023b6:	4b93      	ldr	r3, [pc, #588]	@ (8002604 <HAL_RCC_OscConfig+0x270>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f003 030c 	and.w	r3, r3, #12
 80023be:	2b08      	cmp	r3, #8
 80023c0:	d00f      	beq.n	80023e2 <HAL_RCC_OscConfig+0x4e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023c2:	6863      	ldr	r3, [r4, #4]
 80023c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023c8:	d040      	beq.n	800244c <HAL_RCC_OscConfig+0xb8>
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d154      	bne.n	8002478 <HAL_RCC_OscConfig+0xe4>
 80023ce:	4b8d      	ldr	r3, [pc, #564]	@ (8002604 <HAL_RCC_OscConfig+0x270>)
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	e039      	b.n	8002456 <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023e2:	4b88      	ldr	r3, [pc, #544]	@ (8002604 <HAL_RCC_OscConfig+0x270>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80023ea:	d0ea      	beq.n	80023c2 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ec:	4b85      	ldr	r3, [pc, #532]	@ (8002604 <HAL_RCC_OscConfig+0x270>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80023f4:	d003      	beq.n	80023fe <HAL_RCC_OscConfig+0x6a>
 80023f6:	6863      	ldr	r3, [r4, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	f000 81d9 	beq.w	80027b0 <HAL_RCC_OscConfig+0x41c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023fe:	6823      	ldr	r3, [r4, #0]
 8002400:	f013 0f02 	tst.w	r3, #2
 8002404:	d074      	beq.n	80024f0 <HAL_RCC_OscConfig+0x15c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002406:	4b7f      	ldr	r3, [pc, #508]	@ (8002604 <HAL_RCC_OscConfig+0x270>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f013 0f0c 	tst.w	r3, #12
 800240e:	d05e      	beq.n	80024ce <HAL_RCC_OscConfig+0x13a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002410:	4b7c      	ldr	r3, [pc, #496]	@ (8002604 <HAL_RCC_OscConfig+0x270>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f003 030c 	and.w	r3, r3, #12
 8002418:	2b08      	cmp	r3, #8
 800241a:	d053      	beq.n	80024c4 <HAL_RCC_OscConfig+0x130>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800241c:	68e3      	ldr	r3, [r4, #12]
 800241e:	2b00      	cmp	r3, #0
 8002420:	f000 8089 	beq.w	8002536 <HAL_RCC_OscConfig+0x1a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002424:	4a77      	ldr	r2, [pc, #476]	@ (8002604 <HAL_RCC_OscConfig+0x270>)
 8002426:	6813      	ldr	r3, [r2, #0]
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800242e:	f7fe fe79 	bl	8001124 <HAL_GetTick>
 8002432:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002434:	4e73      	ldr	r6, [pc, #460]	@ (8002604 <HAL_RCC_OscConfig+0x270>)
 8002436:	6833      	ldr	r3, [r6, #0]
 8002438:	f013 0f02 	tst.w	r3, #2
 800243c:	d172      	bne.n	8002524 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800243e:	f7fe fe71 	bl	8001124 <HAL_GetTick>
 8002442:	1b40      	subs	r0, r0, r5
 8002444:	2802      	cmp	r0, #2
 8002446:	d9f6      	bls.n	8002436 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_TIMEOUT;
 8002448:	2003      	movs	r0, #3
 800244a:	e1b6      	b.n	80027ba <HAL_RCC_OscConfig+0x426>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800244c:	4a6d      	ldr	r2, [pc, #436]	@ (8002604 <HAL_RCC_OscConfig+0x270>)
 800244e:	6813      	ldr	r3, [r2, #0]
 8002450:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002454:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002456:	6863      	ldr	r3, [r4, #4]
 8002458:	b32b      	cbz	r3, 80024a6 <HAL_RCC_OscConfig+0x112>
        tickstart = HAL_GetTick();
 800245a:	f7fe fe63 	bl	8001124 <HAL_GetTick>
 800245e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002460:	4e68      	ldr	r6, [pc, #416]	@ (8002604 <HAL_RCC_OscConfig+0x270>)
 8002462:	6833      	ldr	r3, [r6, #0]
 8002464:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002468:	d1c9      	bne.n	80023fe <HAL_RCC_OscConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800246a:	f7fe fe5b 	bl	8001124 <HAL_GetTick>
 800246e:	1b40      	subs	r0, r0, r5
 8002470:	2864      	cmp	r0, #100	@ 0x64
 8002472:	d9f6      	bls.n	8002462 <HAL_RCC_OscConfig+0xce>
            return HAL_TIMEOUT;
 8002474:	2003      	movs	r0, #3
 8002476:	e1a0      	b.n	80027ba <HAL_RCC_OscConfig+0x426>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002478:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800247c:	d009      	beq.n	8002492 <HAL_RCC_OscConfig+0xfe>
 800247e:	4b61      	ldr	r3, [pc, #388]	@ (8002604 <HAL_RCC_OscConfig+0x270>)
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	e7e1      	b.n	8002456 <HAL_RCC_OscConfig+0xc2>
 8002492:	4b5c      	ldr	r3, [pc, #368]	@ (8002604 <HAL_RCC_OscConfig+0x270>)
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	e7d7      	b.n	8002456 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 80024a6:	f7fe fe3d 	bl	8001124 <HAL_GetTick>
 80024aa:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ac:	4e55      	ldr	r6, [pc, #340]	@ (8002604 <HAL_RCC_OscConfig+0x270>)
 80024ae:	6833      	ldr	r3, [r6, #0]
 80024b0:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80024b4:	d0a3      	beq.n	80023fe <HAL_RCC_OscConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024b6:	f7fe fe35 	bl	8001124 <HAL_GetTick>
 80024ba:	1b40      	subs	r0, r0, r5
 80024bc:	2864      	cmp	r0, #100	@ 0x64
 80024be:	d9f6      	bls.n	80024ae <HAL_RCC_OscConfig+0x11a>
            return HAL_TIMEOUT;
 80024c0:	2003      	movs	r0, #3
 80024c2:	e17a      	b.n	80027ba <HAL_RCC_OscConfig+0x426>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024c4:	4b4f      	ldr	r3, [pc, #316]	@ (8002604 <HAL_RCC_OscConfig+0x270>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80024cc:	d1a6      	bne.n	800241c <HAL_RCC_OscConfig+0x88>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ce:	4b4d      	ldr	r3, [pc, #308]	@ (8002604 <HAL_RCC_OscConfig+0x270>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f013 0f02 	tst.w	r3, #2
 80024d6:	d003      	beq.n	80024e0 <HAL_RCC_OscConfig+0x14c>
 80024d8:	68e3      	ldr	r3, [r4, #12]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	f040 816a 	bne.w	80027b4 <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024e0:	4a48      	ldr	r2, [pc, #288]	@ (8002604 <HAL_RCC_OscConfig+0x270>)
 80024e2:	6813      	ldr	r3, [r2, #0]
 80024e4:	6921      	ldr	r1, [r4, #16]
 80024e6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80024ea:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80024ee:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024f0:	6823      	ldr	r3, [r4, #0]
 80024f2:	f013 0f08 	tst.w	r3, #8
 80024f6:	d046      	beq.n	8002586 <HAL_RCC_OscConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80024f8:	6963      	ldr	r3, [r4, #20]
 80024fa:	b383      	cbz	r3, 800255e <HAL_RCC_OscConfig+0x1ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024fc:	4a41      	ldr	r2, [pc, #260]	@ (8002604 <HAL_RCC_OscConfig+0x270>)
 80024fe:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8002500:	f043 0301 	orr.w	r3, r3, #1
 8002504:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002506:	f7fe fe0d 	bl	8001124 <HAL_GetTick>
 800250a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800250c:	4e3d      	ldr	r6, [pc, #244]	@ (8002604 <HAL_RCC_OscConfig+0x270>)
 800250e:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8002510:	f013 0f02 	tst.w	r3, #2
 8002514:	d137      	bne.n	8002586 <HAL_RCC_OscConfig+0x1f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002516:	f7fe fe05 	bl	8001124 <HAL_GetTick>
 800251a:	1b40      	subs	r0, r0, r5
 800251c:	2802      	cmp	r0, #2
 800251e:	d9f6      	bls.n	800250e <HAL_RCC_OscConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8002520:	2003      	movs	r0, #3
 8002522:	e14a      	b.n	80027ba <HAL_RCC_OscConfig+0x426>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002524:	4a37      	ldr	r2, [pc, #220]	@ (8002604 <HAL_RCC_OscConfig+0x270>)
 8002526:	6813      	ldr	r3, [r2, #0]
 8002528:	6921      	ldr	r1, [r4, #16]
 800252a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800252e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002532:	6013      	str	r3, [r2, #0]
 8002534:	e7dc      	b.n	80024f0 <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 8002536:	4a33      	ldr	r2, [pc, #204]	@ (8002604 <HAL_RCC_OscConfig+0x270>)
 8002538:	6813      	ldr	r3, [r2, #0]
 800253a:	f023 0301 	bic.w	r3, r3, #1
 800253e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002540:	f7fe fdf0 	bl	8001124 <HAL_GetTick>
 8002544:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002546:	4e2f      	ldr	r6, [pc, #188]	@ (8002604 <HAL_RCC_OscConfig+0x270>)
 8002548:	6833      	ldr	r3, [r6, #0]
 800254a:	f013 0f02 	tst.w	r3, #2
 800254e:	d0cf      	beq.n	80024f0 <HAL_RCC_OscConfig+0x15c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002550:	f7fe fde8 	bl	8001124 <HAL_GetTick>
 8002554:	1b40      	subs	r0, r0, r5
 8002556:	2802      	cmp	r0, #2
 8002558:	d9f6      	bls.n	8002548 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 800255a:	2003      	movs	r0, #3
 800255c:	e12d      	b.n	80027ba <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800255e:	4a29      	ldr	r2, [pc, #164]	@ (8002604 <HAL_RCC_OscConfig+0x270>)
 8002560:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8002562:	f023 0301 	bic.w	r3, r3, #1
 8002566:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002568:	f7fe fddc 	bl	8001124 <HAL_GetTick>
 800256c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800256e:	4e25      	ldr	r6, [pc, #148]	@ (8002604 <HAL_RCC_OscConfig+0x270>)
 8002570:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8002572:	f013 0f02 	tst.w	r3, #2
 8002576:	d006      	beq.n	8002586 <HAL_RCC_OscConfig+0x1f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002578:	f7fe fdd4 	bl	8001124 <HAL_GetTick>
 800257c:	1b40      	subs	r0, r0, r5
 800257e:	2802      	cmp	r0, #2
 8002580:	d9f6      	bls.n	8002570 <HAL_RCC_OscConfig+0x1dc>
        {
          return HAL_TIMEOUT;
 8002582:	2003      	movs	r0, #3
 8002584:	e119      	b.n	80027ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002586:	6823      	ldr	r3, [r4, #0]
 8002588:	f013 0f04 	tst.w	r3, #4
 800258c:	d07e      	beq.n	800268c <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800258e:	4b1d      	ldr	r3, [pc, #116]	@ (8002604 <HAL_RCC_OscConfig+0x270>)
 8002590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002592:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002596:	d11e      	bne.n	80025d6 <HAL_RCC_OscConfig+0x242>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002598:	4b1a      	ldr	r3, [pc, #104]	@ (8002604 <HAL_RCC_OscConfig+0x270>)
 800259a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800259c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80025a0:	641a      	str	r2, [r3, #64]	@ 0x40
 80025a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025a8:	9301      	str	r3, [sp, #4]
 80025aa:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80025ac:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025ae:	4b16      	ldr	r3, [pc, #88]	@ (8002608 <HAL_RCC_OscConfig+0x274>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80025b6:	d010      	beq.n	80025da <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025b8:	68a3      	ldr	r3, [r4, #8]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d026      	beq.n	800260c <HAL_RCC_OscConfig+0x278>
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d13c      	bne.n	800263c <HAL_RCC_OscConfig+0x2a8>
 80025c2:	4b10      	ldr	r3, [pc, #64]	@ (8002604 <HAL_RCC_OscConfig+0x270>)
 80025c4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80025c6:	f022 0201 	bic.w	r2, r2, #1
 80025ca:	671a      	str	r2, [r3, #112]	@ 0x70
 80025cc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80025ce:	f022 0204 	bic.w	r2, r2, #4
 80025d2:	671a      	str	r2, [r3, #112]	@ 0x70
 80025d4:	e01f      	b.n	8002616 <HAL_RCC_OscConfig+0x282>
  FlagStatus pwrclkchanged = RESET;
 80025d6:	2500      	movs	r5, #0
 80025d8:	e7e9      	b.n	80025ae <HAL_RCC_OscConfig+0x21a>
      PWR->CR1 |= PWR_CR1_DBP;
 80025da:	4a0b      	ldr	r2, [pc, #44]	@ (8002608 <HAL_RCC_OscConfig+0x274>)
 80025dc:	6813      	ldr	r3, [r2, #0]
 80025de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025e2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80025e4:	f7fe fd9e 	bl	8001124 <HAL_GetTick>
 80025e8:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025ea:	4f07      	ldr	r7, [pc, #28]	@ (8002608 <HAL_RCC_OscConfig+0x274>)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80025f2:	d1e1      	bne.n	80025b8 <HAL_RCC_OscConfig+0x224>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025f4:	f7fe fd96 	bl	8001124 <HAL_GetTick>
 80025f8:	1b80      	subs	r0, r0, r6
 80025fa:	2864      	cmp	r0, #100	@ 0x64
 80025fc:	d9f6      	bls.n	80025ec <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 80025fe:	2003      	movs	r0, #3
 8002600:	e0db      	b.n	80027ba <HAL_RCC_OscConfig+0x426>
 8002602:	bf00      	nop
 8002604:	40023800 	.word	0x40023800
 8002608:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800260c:	4a72      	ldr	r2, [pc, #456]	@ (80027d8 <HAL_RCC_OscConfig+0x444>)
 800260e:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8002610:	f043 0301 	orr.w	r3, r3, #1
 8002614:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002616:	68a3      	ldr	r3, [r4, #8]
 8002618:	b333      	cbz	r3, 8002668 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800261a:	f7fe fd83 	bl	8001124 <HAL_GetTick>
 800261e:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002620:	4f6d      	ldr	r7, [pc, #436]	@ (80027d8 <HAL_RCC_OscConfig+0x444>)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002622:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002626:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002628:	f013 0f02 	tst.w	r3, #2
 800262c:	d12d      	bne.n	800268a <HAL_RCC_OscConfig+0x2f6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800262e:	f7fe fd79 	bl	8001124 <HAL_GetTick>
 8002632:	1b80      	subs	r0, r0, r6
 8002634:	4540      	cmp	r0, r8
 8002636:	d9f6      	bls.n	8002626 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002638:	2003      	movs	r0, #3
 800263a:	e0be      	b.n	80027ba <HAL_RCC_OscConfig+0x426>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800263c:	2b05      	cmp	r3, #5
 800263e:	d009      	beq.n	8002654 <HAL_RCC_OscConfig+0x2c0>
 8002640:	4b65      	ldr	r3, [pc, #404]	@ (80027d8 <HAL_RCC_OscConfig+0x444>)
 8002642:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002644:	f022 0201 	bic.w	r2, r2, #1
 8002648:	671a      	str	r2, [r3, #112]	@ 0x70
 800264a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800264c:	f022 0204 	bic.w	r2, r2, #4
 8002650:	671a      	str	r2, [r3, #112]	@ 0x70
 8002652:	e7e0      	b.n	8002616 <HAL_RCC_OscConfig+0x282>
 8002654:	4b60      	ldr	r3, [pc, #384]	@ (80027d8 <HAL_RCC_OscConfig+0x444>)
 8002656:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002658:	f042 0204 	orr.w	r2, r2, #4
 800265c:	671a      	str	r2, [r3, #112]	@ 0x70
 800265e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002660:	f042 0201 	orr.w	r2, r2, #1
 8002664:	671a      	str	r2, [r3, #112]	@ 0x70
 8002666:	e7d6      	b.n	8002616 <HAL_RCC_OscConfig+0x282>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002668:	f7fe fd5c 	bl	8001124 <HAL_GetTick>
 800266c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800266e:	4f5a      	ldr	r7, [pc, #360]	@ (80027d8 <HAL_RCC_OscConfig+0x444>)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002670:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002674:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002676:	f013 0f02 	tst.w	r3, #2
 800267a:	d006      	beq.n	800268a <HAL_RCC_OscConfig+0x2f6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800267c:	f7fe fd52 	bl	8001124 <HAL_GetTick>
 8002680:	1b80      	subs	r0, r0, r6
 8002682:	4540      	cmp	r0, r8
 8002684:	d9f6      	bls.n	8002674 <HAL_RCC_OscConfig+0x2e0>
        {
          return HAL_TIMEOUT;
 8002686:	2003      	movs	r0, #3
 8002688:	e097      	b.n	80027ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800268a:	b9fd      	cbnz	r5, 80026cc <HAL_RCC_OscConfig+0x338>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800268c:	69a3      	ldr	r3, [r4, #24]
 800268e:	2b00      	cmp	r3, #0
 8002690:	f000 8092 	beq.w	80027b8 <HAL_RCC_OscConfig+0x424>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002694:	4a50      	ldr	r2, [pc, #320]	@ (80027d8 <HAL_RCC_OscConfig+0x444>)
 8002696:	6892      	ldr	r2, [r2, #8]
 8002698:	f002 020c 	and.w	r2, r2, #12
 800269c:	2a08      	cmp	r2, #8
 800269e:	d059      	beq.n	8002754 <HAL_RCC_OscConfig+0x3c0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d019      	beq.n	80026d8 <HAL_RCC_OscConfig+0x344>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a4:	4a4c      	ldr	r2, [pc, #304]	@ (80027d8 <HAL_RCC_OscConfig+0x444>)
 80026a6:	6813      	ldr	r3, [r2, #0]
 80026a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ae:	f7fe fd39 	bl	8001124 <HAL_GetTick>
 80026b2:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026b4:	4d48      	ldr	r5, [pc, #288]	@ (80027d8 <HAL_RCC_OscConfig+0x444>)
 80026b6:	682b      	ldr	r3, [r5, #0]
 80026b8:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80026bc:	d048      	beq.n	8002750 <HAL_RCC_OscConfig+0x3bc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026be:	f7fe fd31 	bl	8001124 <HAL_GetTick>
 80026c2:	1b00      	subs	r0, r0, r4
 80026c4:	2802      	cmp	r0, #2
 80026c6:	d9f6      	bls.n	80026b6 <HAL_RCC_OscConfig+0x322>
          {
            return HAL_TIMEOUT;
 80026c8:	2003      	movs	r0, #3
 80026ca:	e076      	b.n	80027ba <HAL_RCC_OscConfig+0x426>
      __HAL_RCC_PWR_CLK_DISABLE();
 80026cc:	4a42      	ldr	r2, [pc, #264]	@ (80027d8 <HAL_RCC_OscConfig+0x444>)
 80026ce:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80026d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80026d6:	e7d9      	b.n	800268c <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_DISABLE();
 80026d8:	4a3f      	ldr	r2, [pc, #252]	@ (80027d8 <HAL_RCC_OscConfig+0x444>)
 80026da:	6813      	ldr	r3, [r2, #0]
 80026dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026e0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80026e2:	f7fe fd1f 	bl	8001124 <HAL_GetTick>
 80026e6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026e8:	4e3b      	ldr	r6, [pc, #236]	@ (80027d8 <HAL_RCC_OscConfig+0x444>)
 80026ea:	6833      	ldr	r3, [r6, #0]
 80026ec:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80026f0:	d006      	beq.n	8002700 <HAL_RCC_OscConfig+0x36c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026f2:	f7fe fd17 	bl	8001124 <HAL_GetTick>
 80026f6:	1b40      	subs	r0, r0, r5
 80026f8:	2802      	cmp	r0, #2
 80026fa:	d9f6      	bls.n	80026ea <HAL_RCC_OscConfig+0x356>
            return HAL_TIMEOUT;
 80026fc:	2003      	movs	r0, #3
 80026fe:	e05c      	b.n	80027ba <HAL_RCC_OscConfig+0x426>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002700:	69e3      	ldr	r3, [r4, #28]
 8002702:	6a22      	ldr	r2, [r4, #32]
 8002704:	4313      	orrs	r3, r2
 8002706:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002708:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800270c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800270e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002712:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8002714:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002718:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800271a:	0852      	lsrs	r2, r2, #1
 800271c:	3a01      	subs	r2, #1
 800271e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002722:	4a2d      	ldr	r2, [pc, #180]	@ (80027d8 <HAL_RCC_OscConfig+0x444>)
 8002724:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002726:	6813      	ldr	r3, [r2, #0]
 8002728:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800272c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800272e:	f7fe fcf9 	bl	8001124 <HAL_GetTick>
 8002732:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002734:	4d28      	ldr	r5, [pc, #160]	@ (80027d8 <HAL_RCC_OscConfig+0x444>)
 8002736:	682b      	ldr	r3, [r5, #0]
 8002738:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800273c:	d106      	bne.n	800274c <HAL_RCC_OscConfig+0x3b8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800273e:	f7fe fcf1 	bl	8001124 <HAL_GetTick>
 8002742:	1b00      	subs	r0, r0, r4
 8002744:	2802      	cmp	r0, #2
 8002746:	d9f6      	bls.n	8002736 <HAL_RCC_OscConfig+0x3a2>
            return HAL_TIMEOUT;
 8002748:	2003      	movs	r0, #3
 800274a:	e036      	b.n	80027ba <HAL_RCC_OscConfig+0x426>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800274c:	2000      	movs	r0, #0
 800274e:	e034      	b.n	80027ba <HAL_RCC_OscConfig+0x426>
 8002750:	2000      	movs	r0, #0
 8002752:	e032      	b.n	80027ba <HAL_RCC_OscConfig+0x426>
      pll_config = RCC->PLLCFGR;
 8002754:	4a20      	ldr	r2, [pc, #128]	@ (80027d8 <HAL_RCC_OscConfig+0x444>)
 8002756:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002758:	2b01      	cmp	r3, #1
 800275a:	d031      	beq.n	80027c0 <HAL_RCC_OscConfig+0x42c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800275c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002760:	69e1      	ldr	r1, [r4, #28]
 8002762:	428b      	cmp	r3, r1
 8002764:	d12e      	bne.n	80027c4 <HAL_RCC_OscConfig+0x430>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002766:	f002 033f 	and.w	r3, r2, #63	@ 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800276a:	6a21      	ldr	r1, [r4, #32]
 800276c:	428b      	cmp	r3, r1
 800276e:	d12b      	bne.n	80027c8 <HAL_RCC_OscConfig+0x434>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002770:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002772:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002776:	4013      	ands	r3, r2
 8002778:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 800277c:	d126      	bne.n	80027cc <HAL_RCC_OscConfig+0x438>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800277e:	f402 3140 	and.w	r1, r2, #196608	@ 0x30000
 8002782:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002784:	085b      	lsrs	r3, r3, #1
 8002786:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002788:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 800278c:	d120      	bne.n	80027d0 <HAL_RCC_OscConfig+0x43c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800278e:	f002 6370 	and.w	r3, r2, #251658240	@ 0xf000000
 8002792:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002794:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 8002798:	d11c      	bne.n	80027d4 <HAL_RCC_OscConfig+0x440>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800279a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800279c:	f002 42e0 	and.w	r2, r2, #1879048192	@ 0x70000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027a0:	ebb2 7f03 	cmp.w	r2, r3, lsl #28
 80027a4:	bf14      	ite	ne
 80027a6:	2001      	movne	r0, #1
 80027a8:	2000      	moveq	r0, #0
 80027aa:	e006      	b.n	80027ba <HAL_RCC_OscConfig+0x426>
    return HAL_ERROR;
 80027ac:	2001      	movs	r0, #1
}
 80027ae:	4770      	bx	lr
        return HAL_ERROR;
 80027b0:	2001      	movs	r0, #1
 80027b2:	e002      	b.n	80027ba <HAL_RCC_OscConfig+0x426>
        return HAL_ERROR;
 80027b4:	2001      	movs	r0, #1
 80027b6:	e000      	b.n	80027ba <HAL_RCC_OscConfig+0x426>
  return HAL_OK;
 80027b8:	2000      	movs	r0, #0
}
 80027ba:	b002      	add	sp, #8
 80027bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 80027c0:	2001      	movs	r0, #1
 80027c2:	e7fa      	b.n	80027ba <HAL_RCC_OscConfig+0x426>
 80027c4:	2001      	movs	r0, #1
 80027c6:	e7f8      	b.n	80027ba <HAL_RCC_OscConfig+0x426>
 80027c8:	2001      	movs	r0, #1
 80027ca:	e7f6      	b.n	80027ba <HAL_RCC_OscConfig+0x426>
 80027cc:	2001      	movs	r0, #1
 80027ce:	e7f4      	b.n	80027ba <HAL_RCC_OscConfig+0x426>
 80027d0:	2001      	movs	r0, #1
 80027d2:	e7f2      	b.n	80027ba <HAL_RCC_OscConfig+0x426>
 80027d4:	2001      	movs	r0, #1
 80027d6:	e7f0      	b.n	80027ba <HAL_RCC_OscConfig+0x426>
 80027d8:	40023800 	.word	0x40023800

080027dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027dc:	b508      	push	{r3, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027de:	4b26      	ldr	r3, [pc, #152]	@ (8002878 <HAL_RCC_GetSysClockFreq+0x9c>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 030c 	and.w	r3, r3, #12
 80027e6:	2b04      	cmp	r3, #4
 80027e8:	d041      	beq.n	800286e <HAL_RCC_GetSysClockFreq+0x92>
 80027ea:	2b08      	cmp	r3, #8
 80027ec:	d141      	bne.n	8002872 <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027ee:	4b22      	ldr	r3, [pc, #136]	@ (8002878 <HAL_RCC_GetSysClockFreq+0x9c>)
 80027f0:	685a      	ldr	r2, [r3, #4]
 80027f2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80027fc:	d012      	beq.n	8002824 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002878 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002800:	6859      	ldr	r1, [r3, #4]
 8002802:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002806:	481d      	ldr	r0, [pc, #116]	@ (800287c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002808:	2300      	movs	r3, #0
 800280a:	fba1 0100 	umull	r0, r1, r1, r0
 800280e:	f7fd fd13 	bl	8000238 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002812:	4b19      	ldr	r3, [pc, #100]	@ (8002878 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800281a:	3301      	adds	r3, #1
 800281c:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 800281e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8002822:	e027      	b.n	8002874 <HAL_RCC_GetSysClockFreq+0x98>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002824:	4b14      	ldr	r3, [pc, #80]	@ (8002878 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002826:	6858      	ldr	r0, [r3, #4]
 8002828:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800282c:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002830:	ebbc 0c00 	subs.w	ip, ip, r0
 8002834:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002838:	ea4f 138e 	mov.w	r3, lr, lsl #6
 800283c:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002840:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002844:	ebb1 010c 	subs.w	r1, r1, ip
 8002848:	eb63 030e 	sbc.w	r3, r3, lr
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002852:	00c9      	lsls	r1, r1, #3
 8002854:	eb11 0c00 	adds.w	ip, r1, r0
 8002858:	f143 0300 	adc.w	r3, r3, #0
 800285c:	0299      	lsls	r1, r3, #10
 800285e:	2300      	movs	r3, #0
 8002860:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002864:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002868:	f7fd fce6 	bl	8000238 <__aeabi_uldivmod>
 800286c:	e7d1      	b.n	8002812 <HAL_RCC_GetSysClockFreq+0x36>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800286e:	4803      	ldr	r0, [pc, #12]	@ (800287c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002870:	e000      	b.n	8002874 <HAL_RCC_GetSysClockFreq+0x98>
      sysclockfreq = HSI_VALUE;
 8002872:	4803      	ldr	r0, [pc, #12]	@ (8002880 <HAL_RCC_GetSysClockFreq+0xa4>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002874:	bd08      	pop	{r3, pc}
 8002876:	bf00      	nop
 8002878:	40023800 	.word	0x40023800
 800287c:	017d7840 	.word	0x017d7840
 8002880:	00f42400 	.word	0x00f42400

08002884 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002884:	2800      	cmp	r0, #0
 8002886:	f000 80a2 	beq.w	80029ce <HAL_RCC_ClockConfig+0x14a>
{
 800288a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800288e:	460d      	mov	r5, r1
 8002890:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002892:	4b53      	ldr	r3, [pc, #332]	@ (80029e0 <HAL_RCC_ClockConfig+0x15c>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 030f 	and.w	r3, r3, #15
 800289a:	428b      	cmp	r3, r1
 800289c:	d20b      	bcs.n	80028b6 <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800289e:	4a50      	ldr	r2, [pc, #320]	@ (80029e0 <HAL_RCC_ClockConfig+0x15c>)
 80028a0:	6813      	ldr	r3, [r2, #0]
 80028a2:	f023 030f 	bic.w	r3, r3, #15
 80028a6:	430b      	orrs	r3, r1
 80028a8:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028aa:	6813      	ldr	r3, [r2, #0]
 80028ac:	f003 030f 	and.w	r3, r3, #15
 80028b0:	428b      	cmp	r3, r1
 80028b2:	f040 808e 	bne.w	80029d2 <HAL_RCC_ClockConfig+0x14e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028b6:	6823      	ldr	r3, [r4, #0]
 80028b8:	f013 0f02 	tst.w	r3, #2
 80028bc:	d017      	beq.n	80028ee <HAL_RCC_ClockConfig+0x6a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028be:	f013 0f04 	tst.w	r3, #4
 80028c2:	d004      	beq.n	80028ce <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028c4:	4a47      	ldr	r2, [pc, #284]	@ (80029e4 <HAL_RCC_ClockConfig+0x160>)
 80028c6:	6893      	ldr	r3, [r2, #8]
 80028c8:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80028cc:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ce:	6823      	ldr	r3, [r4, #0]
 80028d0:	f013 0f08 	tst.w	r3, #8
 80028d4:	d004      	beq.n	80028e0 <HAL_RCC_ClockConfig+0x5c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028d6:	4a43      	ldr	r2, [pc, #268]	@ (80029e4 <HAL_RCC_ClockConfig+0x160>)
 80028d8:	6893      	ldr	r3, [r2, #8]
 80028da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80028de:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028e0:	4a40      	ldr	r2, [pc, #256]	@ (80029e4 <HAL_RCC_ClockConfig+0x160>)
 80028e2:	6893      	ldr	r3, [r2, #8]
 80028e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80028e8:	68a1      	ldr	r1, [r4, #8]
 80028ea:	430b      	orrs	r3, r1
 80028ec:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ee:	6823      	ldr	r3, [r4, #0]
 80028f0:	f013 0f01 	tst.w	r3, #1
 80028f4:	d031      	beq.n	800295a <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028f6:	6862      	ldr	r2, [r4, #4]
 80028f8:	2a01      	cmp	r2, #1
 80028fa:	d020      	beq.n	800293e <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028fc:	2a02      	cmp	r2, #2
 80028fe:	d025      	beq.n	800294c <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002900:	4b38      	ldr	r3, [pc, #224]	@ (80029e4 <HAL_RCC_ClockConfig+0x160>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f013 0f02 	tst.w	r3, #2
 8002908:	d065      	beq.n	80029d6 <HAL_RCC_ClockConfig+0x152>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800290a:	4936      	ldr	r1, [pc, #216]	@ (80029e4 <HAL_RCC_ClockConfig+0x160>)
 800290c:	688b      	ldr	r3, [r1, #8]
 800290e:	f023 0303 	bic.w	r3, r3, #3
 8002912:	4313      	orrs	r3, r2
 8002914:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002916:	f7fe fc05 	bl	8001124 <HAL_GetTick>
 800291a:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800291c:	4f31      	ldr	r7, [pc, #196]	@ (80029e4 <HAL_RCC_ClockConfig+0x160>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800291e:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	f003 030c 	and.w	r3, r3, #12
 8002928:	6862      	ldr	r2, [r4, #4]
 800292a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800292e:	d014      	beq.n	800295a <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002930:	f7fe fbf8 	bl	8001124 <HAL_GetTick>
 8002934:	1b80      	subs	r0, r0, r6
 8002936:	4540      	cmp	r0, r8
 8002938:	d9f3      	bls.n	8002922 <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 800293a:	2003      	movs	r0, #3
 800293c:	e045      	b.n	80029ca <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800293e:	4b29      	ldr	r3, [pc, #164]	@ (80029e4 <HAL_RCC_ClockConfig+0x160>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002946:	d1e0      	bne.n	800290a <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8002948:	2001      	movs	r0, #1
 800294a:	e03e      	b.n	80029ca <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800294c:	4b25      	ldr	r3, [pc, #148]	@ (80029e4 <HAL_RCC_ClockConfig+0x160>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002954:	d1d9      	bne.n	800290a <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8002956:	2001      	movs	r0, #1
 8002958:	e037      	b.n	80029ca <HAL_RCC_ClockConfig+0x146>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800295a:	4b21      	ldr	r3, [pc, #132]	@ (80029e0 <HAL_RCC_ClockConfig+0x15c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 030f 	and.w	r3, r3, #15
 8002962:	42ab      	cmp	r3, r5
 8002964:	d90a      	bls.n	800297c <HAL_RCC_ClockConfig+0xf8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002966:	4a1e      	ldr	r2, [pc, #120]	@ (80029e0 <HAL_RCC_ClockConfig+0x15c>)
 8002968:	6813      	ldr	r3, [r2, #0]
 800296a:	f023 030f 	bic.w	r3, r3, #15
 800296e:	432b      	orrs	r3, r5
 8002970:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002972:	6813      	ldr	r3, [r2, #0]
 8002974:	f003 030f 	and.w	r3, r3, #15
 8002978:	42ab      	cmp	r3, r5
 800297a:	d12e      	bne.n	80029da <HAL_RCC_ClockConfig+0x156>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800297c:	6823      	ldr	r3, [r4, #0]
 800297e:	f013 0f04 	tst.w	r3, #4
 8002982:	d006      	beq.n	8002992 <HAL_RCC_ClockConfig+0x10e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002984:	4a17      	ldr	r2, [pc, #92]	@ (80029e4 <HAL_RCC_ClockConfig+0x160>)
 8002986:	6893      	ldr	r3, [r2, #8]
 8002988:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800298c:	68e1      	ldr	r1, [r4, #12]
 800298e:	430b      	orrs	r3, r1
 8002990:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002992:	6823      	ldr	r3, [r4, #0]
 8002994:	f013 0f08 	tst.w	r3, #8
 8002998:	d007      	beq.n	80029aa <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800299a:	4a12      	ldr	r2, [pc, #72]	@ (80029e4 <HAL_RCC_ClockConfig+0x160>)
 800299c:	6893      	ldr	r3, [r2, #8]
 800299e:	6921      	ldr	r1, [r4, #16]
 80029a0:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80029a4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80029a8:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029aa:	f7ff ff17 	bl	80027dc <HAL_RCC_GetSysClockFreq>
 80029ae:	4b0d      	ldr	r3, [pc, #52]	@ (80029e4 <HAL_RCC_ClockConfig+0x160>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80029b6:	4a0c      	ldr	r2, [pc, #48]	@ (80029e8 <HAL_RCC_ClockConfig+0x164>)
 80029b8:	5cd3      	ldrb	r3, [r2, r3]
 80029ba:	40d8      	lsrs	r0, r3
 80029bc:	4b0b      	ldr	r3, [pc, #44]	@ (80029ec <HAL_RCC_ClockConfig+0x168>)
 80029be:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80029c0:	4b0b      	ldr	r3, [pc, #44]	@ (80029f0 <HAL_RCC_ClockConfig+0x16c>)
 80029c2:	6818      	ldr	r0, [r3, #0]
 80029c4:	f7fe fb72 	bl	80010ac <HAL_InitTick>
  return HAL_OK;
 80029c8:	2000      	movs	r0, #0
}
 80029ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 80029ce:	2001      	movs	r0, #1
}
 80029d0:	4770      	bx	lr
      return HAL_ERROR;
 80029d2:	2001      	movs	r0, #1
 80029d4:	e7f9      	b.n	80029ca <HAL_RCC_ClockConfig+0x146>
        return HAL_ERROR;
 80029d6:	2001      	movs	r0, #1
 80029d8:	e7f7      	b.n	80029ca <HAL_RCC_ClockConfig+0x146>
      return HAL_ERROR;
 80029da:	2001      	movs	r0, #1
 80029dc:	e7f5      	b.n	80029ca <HAL_RCC_ClockConfig+0x146>
 80029de:	bf00      	nop
 80029e0:	40023c00 	.word	0x40023c00
 80029e4:	40023800 	.word	0x40023800
 80029e8:	08003c80 	.word	0x08003c80
 80029ec:	200000c8 	.word	0x200000c8
 80029f0:	200000d0 	.word	0x200000d0

080029f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80029f8:	b083      	sub	sp, #12
 80029fa:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80029fc:	6806      	ldr	r6, [r0, #0]
 80029fe:	f016 0601 	ands.w	r6, r6, #1
 8002a02:	d00c      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a04:	4bb7      	ldr	r3, [pc, #732]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 8002a0c:	609a      	str	r2, [r3, #8]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8002a12:	430a      	orrs	r2, r1
 8002a14:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002a16:	6b46      	ldr	r6, [r0, #52]	@ 0x34
 8002a18:	fab6 f686 	clz	r6, r6
 8002a1c:	0976      	lsrs	r6, r6, #5
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002a1e:	6825      	ldr	r5, [r4, #0]
 8002a20:	f415 2500 	ands.w	r5, r5, #524288	@ 0x80000
 8002a24:	d010      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x54>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a26:	4aaf      	ldr	r2, [pc, #700]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a28:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8002a2c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8002a30:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8002a32:	430b      	orrs	r3, r1
 8002a34:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002a38:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
    {
      plli2sused = 1;
 8002a3a:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8002a3e:	bf08      	it	eq
 8002a40:	2601      	moveq	r6, #1
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002a42:	fab5 f585 	clz	r5, r5
 8002a46:	096d      	lsrs	r5, r5, #5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002a48:	6823      	ldr	r3, [r4, #0]
 8002a4a:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8002a4e:	d010      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a50:	4aa4      	ldr	r2, [pc, #656]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a52:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8002a56:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002a5a:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8002a5c:	430b      	orrs	r3, r1
 8002a5e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002a62:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002a64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a68:	f000 813e 	beq.w	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	bf08      	it	eq
 8002a70:	2501      	moveq	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a72:	6823      	ldr	r3, [r4, #0]
  {
      plli2sused = 1;
 8002a74:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8002a78:	bf18      	it	ne
 8002a7a:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a7c:	f013 0f20 	tst.w	r3, #32
 8002a80:	f040 8134 	bne.w	8002cec <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a84:	6823      	ldr	r3, [r4, #0]
 8002a86:	f013 0f10 	tst.w	r3, #16
 8002a8a:	d00c      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a8c:	4b95      	ldr	r3, [pc, #596]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a8e:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002a92:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8002a96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8002a9a:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002a9e:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002aa6:	6823      	ldr	r3, [r4, #0]
 8002aa8:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8002aac:	d008      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002aae:	4a8d      	ldr	r2, [pc, #564]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ab0:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002ab4:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002ab8:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8002aba:	430b      	orrs	r3, r1
 8002abc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ac0:	6823      	ldr	r3, [r4, #0]
 8002ac2:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8002ac6:	d008      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ac8:	4a86      	ldr	r2, [pc, #536]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002aca:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002ace:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8002ad2:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8002ad4:	430b      	orrs	r3, r1
 8002ad6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ada:	6823      	ldr	r3, [r4, #0]
 8002adc:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8002ae0:	d008      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ae2:	4a80      	ldr	r2, [pc, #512]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ae4:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002ae8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8002aec:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8002aee:	430b      	orrs	r3, r1
 8002af0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002af4:	6823      	ldr	r3, [r4, #0]
 8002af6:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002afa:	d008      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002afc:	4a79      	ldr	r2, [pc, #484]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002afe:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002b02:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002b06:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8002b08:	430b      	orrs	r3, r1
 8002b0a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b0e:	6823      	ldr	r3, [r4, #0]
 8002b10:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8002b14:	d008      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b16:	4a73      	ldr	r2, [pc, #460]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b18:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002b1c:	f023 0303 	bic.w	r3, r3, #3
 8002b20:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8002b22:	430b      	orrs	r3, r1
 8002b24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b28:	6823      	ldr	r3, [r4, #0]
 8002b2a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002b2e:	d008      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b30:	4a6c      	ldr	r2, [pc, #432]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b32:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002b36:	f023 030c 	bic.w	r3, r3, #12
 8002b3a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8002b3c:	430b      	orrs	r3, r1
 8002b3e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b42:	6823      	ldr	r3, [r4, #0]
 8002b44:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002b48:	d008      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b4a:	4a66      	ldr	r2, [pc, #408]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b4c:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002b50:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002b54:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8002b56:	430b      	orrs	r3, r1
 8002b58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b5c:	6823      	ldr	r3, [r4, #0]
 8002b5e:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8002b62:	d008      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b64:	4a5f      	ldr	r2, [pc, #380]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b66:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002b6a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002b6e:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8002b70:	430b      	orrs	r3, r1
 8002b72:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b76:	6823      	ldr	r3, [r4, #0]
 8002b78:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8002b7c:	d008      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b7e:	4a59      	ldr	r2, [pc, #356]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b80:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002b84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b88:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8002b8a:	430b      	orrs	r3, r1
 8002b8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002b90:	6823      	ldr	r3, [r4, #0]
 8002b92:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8002b96:	d008      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002b98:	4a52      	ldr	r2, [pc, #328]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b9a:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002b9e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002ba2:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8002ba4:	430b      	orrs	r3, r1
 8002ba6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002baa:	6823      	ldr	r3, [r4, #0]
 8002bac:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8002bb0:	d008      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002bb2:	4a4c      	ldr	r2, [pc, #304]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002bb4:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002bb8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002bbc:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8002bbe:	430b      	orrs	r3, r1
 8002bc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002bc4:	6823      	ldr	r3, [r4, #0]
 8002bc6:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8002bca:	d008      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002bcc:	4a45      	ldr	r2, [pc, #276]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002bce:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002bd2:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002bd6:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8002bd8:	430b      	orrs	r3, r1
 8002bda:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002bde:	6823      	ldr	r3, [r4, #0]
 8002be0:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002be4:	d008      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002be6:	4a3f      	ldr	r2, [pc, #252]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002be8:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002bec:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002bf0:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8002bf2:	430b      	orrs	r3, r1
 8002bf4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002bf8:	6823      	ldr	r3, [r4, #0]
 8002bfa:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 8002bfe:	d00d      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002c00:	4a38      	ldr	r2, [pc, #224]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c02:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002c06:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8002c0a:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8002c0c:	430b      	orrs	r3, r1
 8002c0e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002c12:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
    {
      pllsaiused = 1;
 8002c14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c18:	bf08      	it	eq
 8002c1a:	2501      	moveq	r5, #1
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002c1c:	6823      	ldr	r3, [r4, #0]
  {
    pllsaiused = 1;
 8002c1e:	f013 0f08 	tst.w	r3, #8
 8002c22:	bf18      	it	ne
 8002c24:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c26:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8002c2a:	d008      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c2c:	4a2d      	ldr	r2, [pc, #180]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c2e:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002c32:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8002c36:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8002c38:	430b      	orrs	r3, r1
 8002c3a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002c3e:	6823      	ldr	r3, [r4, #0]
 8002c40:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8002c44:	d009      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c46:	4a27      	ldr	r2, [pc, #156]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c48:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002c4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c50:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 8002c54:	430b      	orrs	r3, r1
 8002c56:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002c5a:	6823      	ldr	r3, [r4, #0]
 8002c5c:	f013 6f80 	tst.w	r3, #67108864	@ 0x4000000
 8002c60:	d009      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x282>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002c62:	4a20      	ldr	r2, [pc, #128]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c64:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002c68:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8002c6c:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 8002c70:	430b      	orrs	r3, r1
 8002c72:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c76:	6823      	ldr	r3, [r4, #0]
 8002c78:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8002c7c:	d009      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c7e:	4a19      	ldr	r2, [pc, #100]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c80:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8002c84:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8002c88:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 8002c8c:	430b      	orrs	r3, r1
 8002c8e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002c92:	6823      	ldr	r3, [r4, #0]
 8002c94:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002c98:	d009      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002c9a:	4a12      	ldr	r2, [pc, #72]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c9c:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8002ca0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002ca4:	f8d4 108c 	ldr.w	r1, [r4, #140]	@ 0x8c
 8002ca8:	430b      	orrs	r3, r1
 8002caa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002cae:	2e01      	cmp	r6, #1
 8002cb0:	d004      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8002cb2:	6823      	ldr	r3, [r4, #0]
 8002cb4:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002cb8:	f000 8100 	beq.w	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002cbc:	4a09      	ldr	r2, [pc, #36]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002cbe:	6813      	ldr	r3, [r2, #0]
 8002cc0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002cc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cc6:	f7fe fa2d 	bl	8001124 <HAL_GetTick>
 8002cca:	4606      	mov	r6, r0

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ccc:	4f05      	ldr	r7, [pc, #20]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8002cd4:	d074      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002cd6:	f7fe fa25 	bl	8001124 <HAL_GetTick>
 8002cda:	1b80      	subs	r0, r0, r6
 8002cdc:	2864      	cmp	r0, #100	@ 0x64
 8002cde:	d9f6      	bls.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x2da>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ce0:	2003      	movs	r0, #3
 8002ce2:	e0ee      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8002ce4:	40023800 	.word	0x40023800
      plli2sused = 1;
 8002ce8:	2601      	movs	r6, #1
 8002cea:	e6c2      	b.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    __HAL_RCC_PWR_CLK_ENABLE();
 8002cec:	4b80      	ldr	r3, [pc, #512]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002cf0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002cf4:	641a      	str	r2, [r3, #64]	@ 0x40
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cfc:	9301      	str	r3, [sp, #4]
 8002cfe:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8002d00:	4a7c      	ldr	r2, [pc, #496]	@ (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x500>)
 8002d02:	6813      	ldr	r3, [r2, #0]
 8002d04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d08:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002d0a:	f7fe fa0b 	bl	8001124 <HAL_GetTick>
 8002d0e:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d10:	f8df 81e0 	ldr.w	r8, [pc, #480]	@ 8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8002d14:	f8d8 3000 	ldr.w	r3, [r8]
 8002d18:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002d1c:	d106      	bne.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x338>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d1e:	f7fe fa01 	bl	8001124 <HAL_GetTick>
 8002d22:	1bc0      	subs	r0, r0, r7
 8002d24:	2864      	cmp	r0, #100	@ 0x64
 8002d26:	d9f5      	bls.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x320>
        return HAL_TIMEOUT;
 8002d28:	2003      	movs	r0, #3
 8002d2a:	e0ca      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d2c:	4b70      	ldr	r3, [pc, #448]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d30:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8002d34:	d015      	beq.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8002d36:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8002d38:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d010      	beq.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x36e>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d40:	4b6b      	ldr	r3, [pc, #428]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d42:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002d44:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d48:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8002d4a:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 8002d4e:	6719      	str	r1, [r3, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d50:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8002d52:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8002d56:	6719      	str	r1, [r3, #112]	@ 0x70
      RCC->BDCR = tmpreg0;
 8002d58:	671a      	str	r2, [r3, #112]	@ 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d5c:	f013 0f01 	tst.w	r3, #1
 8002d60:	d112      	bne.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x394>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d62:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002d64:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8002d68:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8002d6c:	d01f      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8002d6e:	4a60      	ldr	r2, [pc, #384]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d70:	6893      	ldr	r3, [r2, #8]
 8002d72:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002d76:	6093      	str	r3, [r2, #8]
 8002d78:	4a5d      	ldr	r2, [pc, #372]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d7a:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8002d7c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002d7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d82:	430b      	orrs	r3, r1
 8002d84:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d86:	e67d      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x90>
        tickstart = HAL_GetTick();
 8002d88:	f7fe f9cc 	bl	8001124 <HAL_GetTick>
 8002d8c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d8e:	f8df 8160 	ldr.w	r8, [pc, #352]	@ 8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d92:	f241 3988 	movw	r9, #5000	@ 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d96:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8002d9a:	f013 0f02 	tst.w	r3, #2
 8002d9e:	d1e0      	bne.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x36e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002da0:	f7fe f9c0 	bl	8001124 <HAL_GetTick>
 8002da4:	1bc0      	subs	r0, r0, r7
 8002da6:	4548      	cmp	r0, r9
 8002da8:	d9f5      	bls.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
            return HAL_TIMEOUT;
 8002daa:	2003      	movs	r0, #3
 8002dac:	e089      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dae:	4850      	ldr	r0, [pc, #320]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002db0:	6882      	ldr	r2, [r0, #8]
 8002db2:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 8002db6:	4950      	ldr	r1, [pc, #320]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002db8:	4019      	ands	r1, r3
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	6082      	str	r2, [r0, #8]
 8002dbe:	e7db      	b.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x384>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002dc0:	6823      	ldr	r3, [r4, #0]
 8002dc2:	f013 0f01 	tst.w	r3, #1
 8002dc6:	d013      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8002dc8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002dca:	b98b      	cbnz	r3, 8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002dcc:	4a48      	ldr	r2, [pc, #288]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dce:	f8d2 3084 	ldr.w	r3, [r2, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002dd2:	f8d2 1084 	ldr.w	r1, [r2, #132]	@ 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002dd6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002dda:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 8002dde:	430b      	orrs	r3, r1
 8002de0:	6861      	ldr	r1, [r4, #4]
 8002de2:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002de6:	68a1      	ldr	r1, [r4, #8]
 8002de8:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002dec:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002df0:	6823      	ldr	r3, [r4, #0]
 8002df2:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8002df6:	d003      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8002df8:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8002dfa:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 8002dfe:	d006      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002e00:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8002e04:	d01e      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x450>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e06:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002e08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e0c:	d11a      	bne.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x450>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e0e:	4a38      	ldr	r2, [pc, #224]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e10:	f8d2 3084 	ldr.w	r3, [r2, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e14:	f8d2 1084 	ldr.w	r1, [r2, #132]	@ 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002e18:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e1c:	f001 41e0 	and.w	r1, r1, #1879048192	@ 0x70000000
 8002e20:	430b      	orrs	r3, r1
 8002e22:	6861      	ldr	r1, [r4, #4]
 8002e24:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002e28:	68e1      	ldr	r1, [r4, #12]
 8002e2a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002e2e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002e32:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
 8002e36:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	f021 011f 	bic.w	r1, r1, #31
 8002e3e:	430b      	orrs	r3, r1
 8002e40:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e44:	6823      	ldr	r3, [r4, #0]
 8002e46:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8002e4a:	d011      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e4c:	4a28      	ldr	r2, [pc, #160]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e4e:	f8d2 3084 	ldr.w	r3, [r2, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e52:	f8d2 1084 	ldr.w	r1, [r2, #132]	@ 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002e56:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8002e5a:	f001 41e0 	and.w	r1, r1, #1879048192	@ 0x70000000
 8002e5e:	430b      	orrs	r3, r1
 8002e60:	6861      	ldr	r1, [r4, #4]
 8002e62:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002e66:	6921      	ldr	r1, [r4, #16]
 8002e68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002e6c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002e70:	6823      	ldr	r3, [r4, #0]
 8002e72:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002e76:	d00d      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e78:	6862      	ldr	r2, [r4, #4]
 8002e7a:	6923      	ldr	r3, [r4, #16]
 8002e7c:	041b      	lsls	r3, r3, #16
 8002e7e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002e82:	68e2      	ldr	r2, [r4, #12]
 8002e84:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002e88:	68a2      	ldr	r2, [r4, #8]
 8002e8a:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002e8e:	4a18      	ldr	r2, [pc, #96]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e90:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002e94:	4a16      	ldr	r2, [pc, #88]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e96:	6813      	ldr	r3, [r2, #0]
 8002e98:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002e9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e9e:	f7fe f941 	bl	8001124 <HAL_GetTick>
 8002ea2:	4606      	mov	r6, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ea4:	4f12      	ldr	r7, [pc, #72]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8002eac:	d106      	bne.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x4c8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002eae:	f7fe f939 	bl	8001124 <HAL_GetTick>
 8002eb2:	1b80      	subs	r0, r0, r6
 8002eb4:	2864      	cmp	r0, #100	@ 0x64
 8002eb6:	d9f6      	bls.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002eb8:	2003      	movs	r0, #3
 8002eba:	e002      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002ebc:	2d01      	cmp	r5, #1
 8002ebe:	d003      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002ec0:	2000      	movs	r0, #0
}
 8002ec2:	b003      	add	sp, #12
 8002ec4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 8002ec8:	4a09      	ldr	r2, [pc, #36]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002eca:	6813      	ldr	r3, [r2, #0]
 8002ecc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ed0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002ed2:	f7fe f927 	bl	8001124 <HAL_GetTick>
 8002ed6:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ed8:	4e05      	ldr	r6, [pc, #20]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002eda:	6833      	ldr	r3, [r6, #0]
 8002edc:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8002ee0:	d00c      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x508>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ee2:	f7fe f91f 	bl	8001124 <HAL_GetTick>
 8002ee6:	1b40      	subs	r0, r0, r5
 8002ee8:	2864      	cmp	r0, #100	@ 0x64
 8002eea:	d9f6      	bls.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        return HAL_TIMEOUT;
 8002eec:	2003      	movs	r0, #3
 8002eee:	e7e8      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8002ef0:	40023800 	.word	0x40023800
 8002ef4:	40007000 	.word	0x40007000
 8002ef8:	0ffffcff 	.word	0x0ffffcff
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002efc:	6823      	ldr	r3, [r4, #0]
 8002efe:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8002f02:	d001      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002f04:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8002f06:	b122      	cbz	r2, 8002f12 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002f08:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8002f0c:	d01d      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x556>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f0e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002f10:	b9db      	cbnz	r3, 8002f4a <HAL_RCCEx_PeriphCLKConfig+0x556>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002f12:	4a35      	ldr	r2, [pc, #212]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002f14:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f18:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002f1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f20:	f001 41e0 	and.w	r1, r1, #1879048192	@ 0x70000000
 8002f24:	430b      	orrs	r3, r1
 8002f26:	6961      	ldr	r1, [r4, #20]
 8002f28:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002f2c:	69a1      	ldr	r1, [r4, #24]
 8002f2e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002f32:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002f36:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8002f3a:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8002f3c:	3901      	subs	r1, #1
 8002f3e:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8002f42:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002f46:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002f4a:	6823      	ldr	r3, [r4, #0]
 8002f4c:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 8002f50:	d003      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002f52:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8002f54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f58:	d031      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002f5a:	6823      	ldr	r3, [r4, #0]
 8002f5c:	f013 0f08 	tst.w	r3, #8
 8002f60:	d019      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f62:	4a21      	ldr	r2, [pc, #132]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002f64:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002f68:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002f6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f70:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 8002f74:	430b      	orrs	r3, r1
 8002f76:	6961      	ldr	r1, [r4, #20]
 8002f78:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002f7c:	69e1      	ldr	r1, [r4, #28]
 8002f7e:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002f82:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002f86:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8002f8a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002f8e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8002f90:	430b      	orrs	r3, r1
 8002f92:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8002f96:	4a14      	ldr	r2, [pc, #80]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002f98:	6813      	ldr	r3, [r2, #0]
 8002f9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f9e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002fa0:	f7fe f8c0 	bl	8001124 <HAL_GetTick>
 8002fa4:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002fa6:	4d10      	ldr	r5, [pc, #64]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002fa8:	682b      	ldr	r3, [r5, #0]
 8002faa:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8002fae:	d119      	bne.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002fb0:	f7fe f8b8 	bl	8001124 <HAL_GetTick>
 8002fb4:	1b00      	subs	r0, r0, r4
 8002fb6:	2864      	cmp	r0, #100	@ 0x64
 8002fb8:	d9f6      	bls.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
        return HAL_TIMEOUT;
 8002fba:	2003      	movs	r0, #3
 8002fbc:	e781      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002fc0:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002fc4:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002fc8:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8002fcc:	f001 41e0 	and.w	r1, r1, #1879048192	@ 0x70000000
 8002fd0:	430b      	orrs	r3, r1
 8002fd2:	6961      	ldr	r1, [r4, #20]
 8002fd4:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002fd8:	6a21      	ldr	r1, [r4, #32]
 8002fda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002fde:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8002fe2:	e7ba      	b.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x566>
  return HAL_OK;
 8002fe4:	2000      	movs	r0, #0
 8002fe6:	e76c      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8002fe8:	40023800 	.word	0x40023800

08002fec <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8002fec:	f5b0 2f00 	cmp.w	r0, #524288	@ 0x80000
 8002ff0:	d037      	beq.n	8003062 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        break;
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8002ff2:	f5b0 1f80 	cmp.w	r0, #1048576	@ 0x100000
 8002ff6:	f040 80c9 	bne.w	800318c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
  {
    saiclocksource = RCC->DCKCFGR1;
 8002ffa:	4b67      	ldr	r3, [pc, #412]	@ (8003198 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8002ffc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8003000:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
    switch (saiclocksource)
 8003004:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003008:	f000 80c2 	beq.w	8003190 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 800300c:	f200 808e 	bhi.w	800312c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
 8003010:	2b00      	cmp	r3, #0
 8003012:	f000 8099 	beq.w	8003148 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
 8003016:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800301a:	f040 8085 	bne.w	8003128 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      }
    case RCC_DCKCFGR1_SAI2SEL_0: /* PLLI2S is the clock source for SAI2 */
      {
        /* Configure the PLLI2S division factor */
        /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800301e:	4b5e      	ldr	r3, [pc, #376]	@ (8003198 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
        {
          /* In Case the PLL Source is HSI (Internal Clock) */
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003026:	4b5c      	ldr	r3, [pc, #368]	@ (8003198 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800302e:	bf0c      	ite	eq
 8003030:	495a      	ldreq	r1, [pc, #360]	@ (800319c <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>)
        }
        else
        {
          /* In Case the PLL Source is HSE (External Clock) */
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003032:	495b      	ldrne	r1, [pc, #364]	@ (80031a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8003034:	fbb1 f1f3 	udiv	r1, r1, r3
        }

        /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
        /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8003038:	4b57      	ldr	r3, [pc, #348]	@ (8003198 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 800303a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800303e:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8003042:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8003046:	fb01 f000 	mul.w	r0, r1, r0
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800304a:	f3c2 6203 	ubfx	r2, r2, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800304e:	fbb0 f0f2 	udiv	r0, r0, r2

        /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8003052:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003056:	f003 031f 	and.w	r3, r3, #31
 800305a:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
 800305c:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8003060:	4770      	bx	lr
    saiclocksource = RCC->DCKCFGR1;
 8003062:	4b4d      	ldr	r3, [pc, #308]	@ (8003198 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8003064:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8003068:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    switch (saiclocksource)
 800306c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003070:	f000 8090 	beq.w	8003194 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 8003074:	d828      	bhi.n	80030c8 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8003076:	2b00      	cmp	r3, #0
 8003078:	d034      	beq.n	80030e4 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
 800307a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800307e:	d121      	bne.n	80030c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003080:	4b45      	ldr	r3, [pc, #276]	@ (8003198 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003088:	4b43      	ldr	r3, [pc, #268]	@ (8003198 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003090:	bf0c      	ite	eq
 8003092:	4942      	ldreq	r1, [pc, #264]	@ (800319c <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>)
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003094:	4942      	ldrne	r1, [pc, #264]	@ (80031a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8003096:	fbb1 f1f3 	udiv	r1, r1, r3
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800309a:	4b3f      	ldr	r3, [pc, #252]	@ (8003198 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 800309c:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80030a0:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 80030a4:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80030a8:	fb01 f000 	mul.w	r0, r1, r0
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80030ac:	f3c2 6203 	ubfx	r2, r2, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80030b0:	fbb0 f0f2 	udiv	r0, r0, r2
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80030b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030b8:	f003 031f 	and.w	r3, r3, #31
 80030bc:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
 80030be:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 80030c2:	4770      	bx	lr
    switch (saiclocksource)
 80030c4:	2000      	movs	r0, #0
 80030c6:	4770      	bx	lr
 80030c8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80030cc:	d108      	bne.n	80030e0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80030ce:	4b32      	ldr	r3, [pc, #200]	@ (8003198 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 80030d0:	685b      	ldr	r3, [r3, #4]
          frequency = HSI_VALUE;
 80030d2:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80030d6:	4832      	ldr	r0, [pc, #200]	@ (80031a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 80030d8:	4b30      	ldr	r3, [pc, #192]	@ (800319c <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>)
 80030da:	bf08      	it	eq
 80030dc:	4618      	moveq	r0, r3
 80030de:	4770      	bx	lr
    switch (saiclocksource)
 80030e0:	2000      	movs	r0, #0
 80030e2:	4770      	bx	lr
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80030e4:	4b2c      	ldr	r3, [pc, #176]	@ (8003198 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80030ec:	4b2a      	ldr	r3, [pc, #168]	@ (8003198 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030f4:	bf0c      	ite	eq
 80030f6:	4929      	ldreq	r1, [pc, #164]	@ (800319c <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>)
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80030f8:	4929      	ldrne	r1, [pc, #164]	@ (80031a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 80030fa:	fbb1 f1f3 	udiv	r1, r1, r3
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80030fe:	4b26      	ldr	r3, [pc, #152]	@ (8003198 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8003100:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8003104:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 8003108:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800310c:	fb01 f000 	mul.w	r0, r1, r0
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8003110:	f3c2 6203 	ubfx	r2, r2, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8003114:	fbb0 f0f2 	udiv	r0, r0, r2
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8003118:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800311c:	f3c3 2304 	ubfx	r3, r3, #8, #5
 8003120:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
 8003122:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8003126:	4770      	bx	lr
    switch (saiclocksource)
 8003128:	2000      	movs	r0, #0
 800312a:	4770      	bx	lr
 800312c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003130:	d108      	bne.n	8003144 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
        break;
      }
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
    case RCC_DCKCFGR1_SAI2SEL: /* HSI or HSE is the clock source for SAI2 */
      {
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003132:	4b19      	ldr	r3, [pc, #100]	@ (8003198 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8003134:	685b      	ldr	r3, [r3, #4]
        {
          /* In Case the main PLL Source is HSI */
          frequency = HSI_VALUE;
 8003136:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800313a:	4819      	ldr	r0, [pc, #100]	@ (80031a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 800313c:	4b17      	ldr	r3, [pc, #92]	@ (800319c <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>)
 800313e:	bf08      	it	eq
 8003140:	4618      	moveq	r0, r3
 8003142:	4770      	bx	lr
    switch (saiclocksource)
 8003144:	2000      	movs	r0, #0
 8003146:	4770      	bx	lr
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003148:	4b13      	ldr	r3, [pc, #76]	@ (8003198 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003150:	4b11      	ldr	r3, [pc, #68]	@ (8003198 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003158:	bf0c      	ite	eq
 800315a:	4910      	ldreq	r1, [pc, #64]	@ (800319c <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>)
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800315c:	4910      	ldrne	r1, [pc, #64]	@ (80031a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 800315e:	fbb1 f1f3 	udiv	r1, r1, r3
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8003162:	4b0d      	ldr	r3, [pc, #52]	@ (8003198 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8003164:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8003168:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 800316c:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8003170:	fb01 f000 	mul.w	r0, r1, r0
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8003174:	f3c2 6203 	ubfx	r2, r2, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8003178:	fbb0 f0f2 	udiv	r0, r0, r2
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800317c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003180:	f3c3 2304 	ubfx	r3, r3, #8, #5
 8003184:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
 8003186:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 800318a:	4770      	bx	lr
 800318c:	2000      	movs	r0, #0
 800318e:	4770      	bx	lr
    switch (saiclocksource)
 8003190:	4804      	ldr	r0, [pc, #16]	@ (80031a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8003192:	4770      	bx	lr
    switch (saiclocksource)
 8003194:	4803      	ldr	r0, [pc, #12]	@ (80031a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
      }
    }
  }

  return frequency;
}
 8003196:	4770      	bx	lr
 8003198:	40023800 	.word	0x40023800
 800319c:	00f42400 	.word	0x00f42400
 80031a0:	017d7840 	.word	0x017d7840
 80031a4:	00bb8000 	.word	0x00bb8000

080031a8 <SAI_InterruptFlag>:
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80031a8:	2901      	cmp	r1, #1
 80031aa:	bf0c      	ite	eq
 80031ac:	2309      	moveq	r3, #9
 80031ae:	2301      	movne	r3, #1
  if (mode == SAI_MODE_IT)
  {
    tmpIT |= SAI_IT_FREQ;
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80031b0:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 80031b2:	2a08      	cmp	r2, #8
 80031b4:	d008      	beq.n	80031c8 <SAI_InterruptFlag+0x20>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
  {
    tmpIT |= SAI_IT_CNRDY;
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80031b6:	6842      	ldr	r2, [r0, #4]
 80031b8:	3a02      	subs	r2, #2
 80031ba:	2a01      	cmp	r2, #1
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80031bc:	bf94      	ite	ls
 80031be:	f043 0060 	orrls.w	r0, r3, #96	@ 0x60
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 80031c2:	f043 0004 	orrhi.w	r0, r3, #4
  }
  return tmpIT;
}
 80031c6:	4770      	bx	lr
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80031c8:	6842      	ldr	r2, [r0, #4]
 80031ca:	f022 0202 	bic.w	r2, r2, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80031ce:	2a01      	cmp	r2, #1
    tmpIT |= SAI_IT_CNRDY;
 80031d0:	bf08      	it	eq
 80031d2:	f043 0310 	orreq.w	r3, r3, #16
 80031d6:	e7ee      	b.n	80031b6 <SAI_InterruptFlag+0xe>

080031d8 <SAI_Disable>:
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 80031d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003218 <SAI_Disable+0x40>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a0f      	ldr	r2, [pc, #60]	@ (800321c <SAI_Disable+0x44>)
 80031de:	fba2 2303 	umull	r2, r3, r2, r3
 80031e2:	0b1b      	lsrs	r3, r3, #12
 80031e4:	009b      	lsls	r3, r3, #2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80031e6:	6801      	ldr	r1, [r0, #0]
 80031e8:	680a      	ldr	r2, [r1, #0]
 80031ea:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80031ee:	600a      	str	r2, [r1, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80031f0:	3b01      	subs	r3, #1
 80031f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f6:	d006      	beq.n	8003206 <SAI_Disable+0x2e>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
      status = HAL_TIMEOUT;
      break;
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80031f8:	6802      	ldr	r2, [r0, #0]
 80031fa:	6812      	ldr	r2, [r2, #0]
 80031fc:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 8003200:	d1f6      	bne.n	80031f0 <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8003202:	2000      	movs	r0, #0

  return status;
}
 8003204:	4770      	bx	lr
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8003206:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 800320a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800320e:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
      status = HAL_TIMEOUT;
 8003212:	2003      	movs	r0, #3
      break;
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	200000c8 	.word	0x200000c8
 800321c:	95cbec1b 	.word	0x95cbec1b

08003220 <HAL_SAI_Init>:
  if (hsai == NULL)
 8003220:	2800      	cmp	r0, #0
 8003222:	f000 80e2 	beq.w	80033ea <HAL_SAI_Init+0x1ca>
{
 8003226:	b570      	push	{r4, r5, r6, lr}
 8003228:	4604      	mov	r4, r0
  if (hsai->State == HAL_SAI_STATE_RESET)
 800322a:	f890 307d 	ldrb.w	r3, [r0, #125]	@ 0x7d
 800322e:	b313      	cbz	r3, 8003276 <HAL_SAI_Init+0x56>
  hsai->State = HAL_SAI_STATE_BUSY;
 8003230:	2302      	movs	r3, #2
 8003232:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
  SAI_Disable(hsai);
 8003236:	4620      	mov	r0, r4
 8003238:	f7ff ffce 	bl	80031d8 <SAI_Disable>
  switch (hsai->Init.SynchroExt)
 800323c:	68e3      	ldr	r3, [r4, #12]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d01e      	beq.n	8003280 <HAL_SAI_Init+0x60>
 8003242:	2b02      	cmp	r3, #2
 8003244:	bf14      	ite	ne
 8003246:	2300      	movne	r3, #0
 8003248:	2301      	moveq	r3, #1
 800324a:	015b      	lsls	r3, r3, #5
  switch (hsai->Init.Synchro)
 800324c:	68a5      	ldr	r5, [r4, #8]
 800324e:	2d02      	cmp	r5, #2
 8003250:	d01d      	beq.n	800328e <HAL_SAI_Init+0x6e>
 8003252:	2d03      	cmp	r5, #3
 8003254:	d016      	beq.n	8003284 <HAL_SAI_Init+0x64>
 8003256:	2d01      	cmp	r5, #1
 8003258:	bf14      	ite	ne
 800325a:	2500      	movne	r5, #0
 800325c:	2501      	moveq	r5, #1
 800325e:	02ad      	lsls	r5, r5, #10
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8003260:	6822      	ldr	r2, [r4, #0]
 8003262:	4963      	ldr	r1, [pc, #396]	@ (80033f0 <HAL_SAI_Init+0x1d0>)
 8003264:	428a      	cmp	r2, r1
 8003266:	d015      	beq.n	8003294 <HAL_SAI_Init+0x74>
 8003268:	3120      	adds	r1, #32
 800326a:	428a      	cmp	r2, r1
 800326c:	d012      	beq.n	8003294 <HAL_SAI_Init+0x74>
    SAI2->GCR = tmpregisterGCR;
 800326e:	4a61      	ldr	r2, [pc, #388]	@ (80033f4 <HAL_SAI_Init+0x1d4>)
 8003270:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8003274:	e011      	b.n	800329a <HAL_SAI_Init+0x7a>
    hsai->Lock = HAL_UNLOCKED;
 8003276:	f880 307c 	strb.w	r3, [r0, #124]	@ 0x7c
    HAL_SAI_MspInit(hsai);
 800327a:	f7fd fda1 	bl	8000dc0 <HAL_SAI_MspInit>
 800327e:	e7d7      	b.n	8003230 <HAL_SAI_Init+0x10>
  switch (hsai->Init.SynchroExt)
 8003280:	2310      	movs	r3, #16
 8003282:	e7e3      	b.n	800324c <HAL_SAI_Init+0x2c>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8003284:	f043 0301 	orr.w	r3, r3, #1
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8003288:	f44f 6500 	mov.w	r5, #2048	@ 0x800
    break;
 800328c:	e7e8      	b.n	8003260 <HAL_SAI_Init+0x40>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800328e:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 8003292:	e7e5      	b.n	8003260 <HAL_SAI_Init+0x40>
    SAI1->GCR = tmpregisterGCR;
 8003294:	4a57      	ldr	r2, [pc, #348]	@ (80033f4 <HAL_SAI_Init+0x1d4>)
 8003296:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800329a:	69e3      	ldr	r3, [r4, #28]
 800329c:	b39b      	cbz	r3, 8003306 <HAL_SAI_Init+0xe6>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800329e:	6823      	ldr	r3, [r4, #0]
 80032a0:	4a53      	ldr	r2, [pc, #332]	@ (80033f0 <HAL_SAI_Init+0x1d0>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d00a      	beq.n	80032bc <HAL_SAI_Init+0x9c>
 80032a6:	3220      	adds	r2, #32
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d007      	beq.n	80032bc <HAL_SAI_Init+0x9c>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80032ac:	4a52      	ldr	r2, [pc, #328]	@ (80033f8 <HAL_SAI_Init+0x1d8>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d00f      	beq.n	80032d2 <HAL_SAI_Init+0xb2>
 80032b2:	3220      	adds	r2, #32
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d00c      	beq.n	80032d2 <HAL_SAI_Init+0xb2>
 80032b8:	2300      	movs	r3, #0
 80032ba:	e020      	b.n	80032fe <HAL_SAI_Init+0xde>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80032bc:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80032c0:	f7ff fe94 	bl	8002fec <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80032c4:	6823      	ldr	r3, [r4, #0]
 80032c6:	4a4c      	ldr	r2, [pc, #304]	@ (80033f8 <HAL_SAI_Init+0x1d8>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d002      	beq.n	80032d2 <HAL_SAI_Init+0xb2>
 80032cc:	3220      	adds	r2, #32
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d103      	bne.n	80032da <HAL_SAI_Init+0xba>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80032d2:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80032d6:	f7ff fe89 	bl	8002fec <HAL_RCCEx_GetPeriphCLKFreq>
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80032da:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80032de:	0040      	lsls	r0, r0, #1
 80032e0:	69e3      	ldr	r3, [r4, #28]
 80032e2:	025b      	lsls	r3, r3, #9
 80032e4:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10;
 80032e8:	4b44      	ldr	r3, [pc, #272]	@ (80033fc <HAL_SAI_Init+0x1dc>)
 80032ea:	fba3 2300 	umull	r2, r3, r3, r0
 80032ee:	08db      	lsrs	r3, r3, #3
    if ((tmpval % 10) > 8)
 80032f0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80032f4:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
 80032f8:	2808      	cmp	r0, #8
      hsai->Init.Mckdiv += 1;
 80032fa:	bf88      	it	hi
 80032fc:	3301      	addhi	r3, #1
    hsai->Init.Mckdiv = tmpval / 10;
 80032fe:	6223      	str	r3, [r4, #32]
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8003300:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003302:	2b04      	cmp	r3, #4
 8003304:	d066      	beq.n	80033d4 <HAL_SAI_Init+0x1b4>
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003306:	6863      	ldr	r3, [r4, #4]
 8003308:	f033 0302 	bics.w	r3, r3, #2
 800330c:	d166      	bne.n	80033dc <HAL_SAI_Init+0x1bc>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800330e:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8003310:	3901      	subs	r1, #1
 8003312:	bf18      	it	ne
 8003314:	2101      	movne	r1, #1
 8003316:	0249      	lsls	r1, r1, #9
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8003318:	6822      	ldr	r2, [r4, #0]
 800331a:	6810      	ldr	r0, [r2, #0]
 800331c:	4b38      	ldr	r3, [pc, #224]	@ (8003400 <HAL_SAI_Init+0x1e0>)
 800331e:	4003      	ands	r3, r0
 8003320:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003322:	6822      	ldr	r2, [r4, #0]
 8003324:	6810      	ldr	r0, [r2, #0]
 8003326:	6863      	ldr	r3, [r4, #4]
 8003328:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 800332a:	4333      	orrs	r3, r6
 800332c:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 800332e:	4333      	orrs	r3, r6
 8003330:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8003332:	4333      	orrs	r3, r6
 8003334:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8003336:	4333      	orrs	r3, r6
 8003338:	6926      	ldr	r6, [r4, #16]
 800333a:	4333      	orrs	r3, r6
 800333c:	6966      	ldr	r6, [r4, #20]
 800333e:	4333      	orrs	r3, r6
 8003340:	4303      	orrs	r3, r0
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8003342:	6a20      	ldr	r0, [r4, #32]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003344:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
 8003348:	432b      	orrs	r3, r5
 800334a:	430b      	orrs	r3, r1
 800334c:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800334e:	6822      	ldr	r2, [r4, #0]
 8003350:	6851      	ldr	r1, [r2, #4]
 8003352:	4b2c      	ldr	r3, [pc, #176]	@ (8003404 <HAL_SAI_Init+0x1e4>)
 8003354:	400b      	ands	r3, r1
 8003356:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8003358:	6822      	ldr	r2, [r4, #0]
 800335a:	6851      	ldr	r1, [r2, #4]
 800335c:	69a3      	ldr	r3, [r4, #24]
 800335e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003360:	4303      	orrs	r3, r0
 8003362:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8003364:	4303      	orrs	r3, r0
 8003366:	430b      	orrs	r3, r1
 8003368:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800336a:	6822      	ldr	r2, [r4, #0]
 800336c:	6891      	ldr	r1, [r2, #8]
 800336e:	4b26      	ldr	r3, [pc, #152]	@ (8003408 <HAL_SAI_Init+0x1e8>)
 8003370:	400b      	ands	r3, r1
 8003372:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8003374:	6821      	ldr	r1, [r4, #0]
 8003376:	688a      	ldr	r2, [r1, #8]
 8003378:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800337a:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 800337c:	4303      	orrs	r3, r0
 800337e:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8003380:	4303      	orrs	r3, r0
 8003382:	4313      	orrs	r3, r2
 8003384:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003386:	3a01      	subs	r2, #1
 8003388:	4313      	orrs	r3, r2
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800338a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800338c:	3a01      	subs	r2, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800338e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003392:	608b      	str	r3, [r1, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8003394:	6822      	ldr	r2, [r4, #0]
 8003396:	68d3      	ldr	r3, [r2, #12]
 8003398:	f423 637d 	bic.w	r3, r3, #4048	@ 0xfd0
 800339c:	f023 030f 	bic.w	r3, r3, #15
 80033a0:	041b      	lsls	r3, r3, #16
 80033a2:	0c1b      	lsrs	r3, r3, #16
 80033a4:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80033a6:	6821      	ldr	r1, [r4, #0]
 80033a8:	68ca      	ldr	r2, [r1, #12]
 80033aa:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80033ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80033ae:	4303      	orrs	r3, r0
 80033b0:	4313      	orrs	r3, r2
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 80033b2:	6e22      	ldr	r2, [r4, #96]	@ 0x60
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80033b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 80033b8:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80033ba:	3a01      	subs	r2, #1
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80033bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80033c0:	60cb      	str	r3, [r1, #12]
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80033c2:	2000      	movs	r0, #0
 80033c4:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  hsai->State = HAL_SAI_STATE_READY;
 80033c8:	2301      	movs	r3, #1
 80033ca:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
  __HAL_UNLOCK(hsai);
 80033ce:	f884 007c 	strb.w	r0, [r4, #124]	@ 0x7c
}
 80033d2:	bd70      	pop	{r4, r5, r6, pc}
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80033d4:	6a23      	ldr	r3, [r4, #32]
 80033d6:	085b      	lsrs	r3, r3, #1
 80033d8:	6223      	str	r3, [r4, #32]
 80033da:	e794      	b.n	8003306 <HAL_SAI_Init+0xe6>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80033dc:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80033de:	2901      	cmp	r1, #1
 80033e0:	bf14      	ite	ne
 80033e2:	2100      	movne	r1, #0
 80033e4:	2101      	moveq	r1, #1
 80033e6:	0249      	lsls	r1, r1, #9
 80033e8:	e796      	b.n	8003318 <HAL_SAI_Init+0xf8>
    return HAL_ERROR;
 80033ea:	2001      	movs	r0, #1
}
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	40015804 	.word	0x40015804
 80033f4:	40015000 	.word	0x40015000
 80033f8:	40015c04 	.word	0x40015c04
 80033fc:	cccccccd 	.word	0xcccccccd
 8003400:	ff05c010 	.word	0xff05c010
 8003404:	ffff1ff0 	.word	0xffff1ff0
 8003408:	fff88000 	.word	0xfff88000

0800340c <HAL_SAI_InitProtocol>:
{
 800340c:	b538      	push	{r3, r4, r5, lr}
  switch (protocol)
 800340e:	2902      	cmp	r1, #2
 8003410:	d926      	bls.n	8003460 <HAL_SAI_InitProtocol+0x54>
 8003412:	f1a1 0c03 	sub.w	ip, r1, #3
 8003416:	f1bc 0f01 	cmp.w	ip, #1
 800341a:	f200 808c 	bhi.w	8003536 <HAL_SAI_InitProtocol+0x12a>
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800341e:	2400      	movs	r4, #0
 8003420:	6304      	str	r4, [r0, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8003422:	6384      	str	r4, [r0, #56]	@ 0x38
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003424:	6845      	ldr	r5, [r0, #4]
 8003426:	f035 0502 	bics.w	r5, r5, #2
 800342a:	bf0c      	ite	eq
 800342c:	2501      	moveq	r5, #1
 800342e:	4625      	movne	r5, r4
 8003430:	63c5      	str	r5, [r0, #60]	@ 0x3c
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8003432:	6484      	str	r4, [r0, #72]	@ 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8003434:	f44f 3500 	mov.w	r5, #131072	@ 0x20000
 8003438:	64c5      	str	r5, [r0, #76]	@ 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800343a:	f44f 2580 	mov.w	r5, #262144	@ 0x40000
 800343e:	6505      	str	r5, [r0, #80]	@ 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 8003440:	6544      	str	r4, [r0, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8003442:	65c3      	str	r3, [r0, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8003444:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8003448:	6604      	str	r4, [r0, #96]	@ 0x60
    hsai->FrameInit.ActiveFrameLength = 13;
 800344a:	2904      	cmp	r1, #4
 800344c:	bf0c      	ite	eq
 800344e:	2101      	moveq	r1, #1
 8003450:	210d      	movne	r1, #13
 8003452:	6441      	str	r1, [r0, #68]	@ 0x44
  switch (datasize)
 8003454:	2a03      	cmp	r2, #3
 8003456:	d874      	bhi.n	8003542 <HAL_SAI_InitProtocol+0x136>
 8003458:	e8df f002 	tbb	[pc, r2]
 800345c:	665f5952 	.word	0x665f5952
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8003460:	2400      	movs	r4, #0
 8003462:	6304      	str	r4, [r0, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8003464:	6384      	str	r4, [r0, #56]	@ 0x38
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003466:	6845      	ldr	r5, [r0, #4]
 8003468:	f035 0502 	bics.w	r5, r5, #2
 800346c:	bf14      	ite	ne
 800346e:	2501      	movne	r5, #1
 8003470:	4625      	moveq	r5, r4
 8003472:	63c5      	str	r5, [r0, #60]	@ 0x3c
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8003474:	f44f 3580 	mov.w	r5, #65536	@ 0x10000
 8003478:	6485      	str	r5, [r0, #72]	@ 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_0 | SAI_SLOTACTIVE_2; //SAI_SLOTACTIVE_ALL;
 800347a:	2505      	movs	r5, #5
 800347c:	6605      	str	r5, [r0, #96]	@ 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 800347e:	6544      	str	r4, [r0, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8003480:	65c3      	str	r3, [r0, #92]	@ 0x5c
  if ((nbslot & 0x1) != 0)
 8003482:	f013 0401 	ands.w	r4, r3, #1
 8003486:	d158      	bne.n	800353a <HAL_SAI_InitProtocol+0x12e>
  if (protocol == SAI_I2S_STANDARD)
 8003488:	2900      	cmp	r1, #0
 800348a:	bf0a      	itet	eq
 800348c:	460d      	moveq	r5, r1
 800348e:	f44f 3500 	movne.w	r5, #131072	@ 0x20000
 8003492:	f44f 2480 	moveq.w	r4, #262144	@ 0x40000
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8003496:	64c5      	str	r5, [r0, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8003498:	6504      	str	r4, [r0, #80]	@ 0x50
  switch (datasize)
 800349a:	2a03      	cmp	r2, #3
 800349c:	d84f      	bhi.n	800353e <HAL_SAI_InitProtocol+0x132>
 800349e:	e8df f002 	tbb	[pc, r2]
 80034a2:	0e02      	.short	0x0e02
 80034a4:	291b      	.short	0x291b
      hsai->FrameInit.FrameLength = 32 * (nbslot / 2);
 80034a6:	085b      	lsrs	r3, r3, #1
 80034a8:	0159      	lsls	r1, r3, #5
      hsai->FrameInit.ActiveFrameLength = 16 * (nbslot / 2);
 80034aa:	011b      	lsls	r3, r3, #4
      break;
 80034ac:	2480      	movs	r4, #128	@ 0x80
 80034ae:	2240      	movs	r2, #64	@ 0x40
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80034b0:	6344      	str	r4, [r0, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32 * (nbslot / 2);
 80034b2:	6401      	str	r1, [r0, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 16 * (nbslot / 2);
 80034b4:	6443      	str	r3, [r0, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80034b6:	6582      	str	r2, [r0, #88]	@ 0x58
    status = HAL_SAI_Init(hsai);
 80034b8:	f7ff feb2 	bl	8003220 <HAL_SAI_Init>
  return status;
 80034bc:	e03c      	b.n	8003538 <HAL_SAI_InitProtocol+0x12c>
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80034be:	2280      	movs	r2, #128	@ 0x80
 80034c0:	6342      	str	r2, [r0, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 80034c2:	085b      	lsrs	r3, r3, #1
 80034c4:	019c      	lsls	r4, r3, #6
 80034c6:	6404      	str	r4, [r0, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 80034c8:	015b      	lsls	r3, r3, #5
 80034ca:	6443      	str	r3, [r0, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80034cc:	6582      	str	r2, [r0, #88]	@ 0x58
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80034ce:	2902      	cmp	r1, #2
 80034d0:	d1f2      	bne.n	80034b8 <HAL_SAI_InitProtocol+0xac>
      hsai->SlotInit.FirstBitOffset = 16;
 80034d2:	2310      	movs	r3, #16
 80034d4:	6543      	str	r3, [r0, #84]	@ 0x54
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 80034d6:	e7ef      	b.n	80034b8 <HAL_SAI_InitProtocol+0xac>
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80034d8:	22c0      	movs	r2, #192	@ 0xc0
 80034da:	6342      	str	r2, [r0, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 80034dc:	085b      	lsrs	r3, r3, #1
 80034de:	019a      	lsls	r2, r3, #6
 80034e0:	6402      	str	r2, [r0, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 80034e2:	015b      	lsls	r3, r3, #5
 80034e4:	6443      	str	r3, [r0, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80034e6:	2380      	movs	r3, #128	@ 0x80
 80034e8:	6583      	str	r3, [r0, #88]	@ 0x58
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80034ea:	2902      	cmp	r1, #2
 80034ec:	d1e4      	bne.n	80034b8 <HAL_SAI_InitProtocol+0xac>
      hsai->SlotInit.FirstBitOffset = 8;
 80034ee:	2308      	movs	r3, #8
 80034f0:	6543      	str	r3, [r0, #84]	@ 0x54
 80034f2:	e7e1      	b.n	80034b8 <HAL_SAI_InitProtocol+0xac>
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 80034f4:	085b      	lsrs	r3, r3, #1
 80034f6:	0199      	lsls	r1, r3, #6
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 80034f8:	015b      	lsls	r3, r3, #5
      break;
 80034fa:	24e0      	movs	r4, #224	@ 0xe0
 80034fc:	2280      	movs	r2, #128	@ 0x80
 80034fe:	e7d7      	b.n	80034b0 <HAL_SAI_InitProtocol+0xa4>
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8003500:	2280      	movs	r2, #128	@ 0x80
 8003502:	6342      	str	r2, [r0, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 16 * nbslot;
 8003504:	011b      	lsls	r3, r3, #4
 8003506:	6403      	str	r3, [r0, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8003508:	2340      	movs	r3, #64	@ 0x40
 800350a:	6583      	str	r3, [r0, #88]	@ 0x58
      break;
 800350c:	e7d4      	b.n	80034b8 <HAL_SAI_InitProtocol+0xac>
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800350e:	2280      	movs	r2, #128	@ 0x80
 8003510:	6342      	str	r2, [r0, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 8003512:	015b      	lsls	r3, r3, #5
 8003514:	6403      	str	r3, [r0, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8003516:	6582      	str	r2, [r0, #88]	@ 0x58
      break;
 8003518:	e7ce      	b.n	80034b8 <HAL_SAI_InitProtocol+0xac>
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800351a:	22c0      	movs	r2, #192	@ 0xc0
 800351c:	6342      	str	r2, [r0, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 800351e:	015b      	lsls	r3, r3, #5
 8003520:	6403      	str	r3, [r0, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8003522:	2380      	movs	r3, #128	@ 0x80
 8003524:	6583      	str	r3, [r0, #88]	@ 0x58
      break;
 8003526:	e7c7      	b.n	80034b8 <HAL_SAI_InitProtocol+0xac>
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8003528:	22e0      	movs	r2, #224	@ 0xe0
 800352a:	6342      	str	r2, [r0, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 800352c:	015b      	lsls	r3, r3, #5
 800352e:	6403      	str	r3, [r0, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8003530:	2380      	movs	r3, #128	@ 0x80
 8003532:	6583      	str	r3, [r0, #88]	@ 0x58
      break;
 8003534:	e7c0      	b.n	80034b8 <HAL_SAI_InitProtocol+0xac>
  switch (protocol)
 8003536:	2001      	movs	r0, #1
}
 8003538:	bd38      	pop	{r3, r4, r5, pc}
 800353a:	2001      	movs	r0, #1
 800353c:	e7fc      	b.n	8003538 <HAL_SAI_InitProtocol+0x12c>
  switch (datasize)
 800353e:	2001      	movs	r0, #1
 8003540:	e7fa      	b.n	8003538 <HAL_SAI_InitProtocol+0x12c>
  switch (datasize)
 8003542:	2001      	movs	r0, #1
 8003544:	e7f8      	b.n	8003538 <HAL_SAI_InitProtocol+0x12c>
	...

08003548 <HAL_SAI_Transmit_DMA>:
{
 8003548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800354c:	4604      	mov	r4, r0
 800354e:	4688      	mov	r8, r1
 8003550:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 8003552:	f7fd fde7 	bl	8001124 <HAL_GetTick>
  if ((pData == NULL) || (Size == 0))
 8003556:	f1b8 0f00 	cmp.w	r8, #0
 800355a:	d063      	beq.n	8003624 <HAL_SAI_Transmit_DMA+0xdc>
 800355c:	4605      	mov	r5, r0
 800355e:	2f00      	cmp	r7, #0
 8003560:	d060      	beq.n	8003624 <HAL_SAI_Transmit_DMA+0xdc>
  if (hsai->State == HAL_SAI_STATE_READY)
 8003562:	f894 607d 	ldrb.w	r6, [r4, #125]	@ 0x7d
 8003566:	b2f6      	uxtb	r6, r6
 8003568:	2e01      	cmp	r6, #1
 800356a:	d15f      	bne.n	800362c <HAL_SAI_Transmit_DMA+0xe4>
    __HAL_LOCK(hsai);
 800356c:	f894 307c 	ldrb.w	r3, [r4, #124]	@ 0x7c
 8003570:	2b01      	cmp	r3, #1
 8003572:	d05d      	beq.n	8003630 <HAL_SAI_Transmit_DMA+0xe8>
 8003574:	2301      	movs	r3, #1
 8003576:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
    hsai->pBuffPtr = pData;
 800357a:	f8c4 8064 	str.w	r8, [r4, #100]	@ 0x64
    hsai->XferSize = Size;
 800357e:	f8a4 7068 	strh.w	r7, [r4, #104]	@ 0x68
    hsai->XferCount = Size;
 8003582:	f8a4 706a 	strh.w	r7, [r4, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8003586:	2300      	movs	r3, #0
 8003588:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800358c:	2212      	movs	r2, #18
 800358e:	f884 207d 	strb.w	r2, [r4, #125]	@ 0x7d
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8003592:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8003594:	4927      	ldr	r1, [pc, #156]	@ (8003634 <HAL_SAI_Transmit_DMA+0xec>)
 8003596:	6411      	str	r1, [r2, #64]	@ 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8003598:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 800359a:	4927      	ldr	r1, [pc, #156]	@ (8003638 <HAL_SAI_Transmit_DMA+0xf0>)
 800359c:	63d1      	str	r1, [r2, #60]	@ 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800359e:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 80035a0:	4926      	ldr	r1, [pc, #152]	@ (800363c <HAL_SAI_Transmit_DMA+0xf4>)
 80035a2:	64d1      	str	r1, [r2, #76]	@ 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
 80035a4:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 80035a6:	6513      	str	r3, [r2, #80]	@ 0x50
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80035a8:	6822      	ldr	r2, [r4, #0]
 80035aa:	f8b4 3068 	ldrh.w	r3, [r4, #104]	@ 0x68
 80035ae:	321c      	adds	r2, #28
 80035b0:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 80035b2:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 80035b4:	f7fe f9b2 	bl	800191c <HAL_DMA_Start_IT>
 80035b8:	4607      	mov	r7, r0
 80035ba:	bb10      	cbnz	r0, 8003602 <HAL_SAI_Transmit_DMA+0xba>
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80035bc:	2100      	movs	r1, #0
 80035be:	4620      	mov	r0, r4
 80035c0:	f7ff fdf2 	bl	80031a8 <SAI_InterruptFlag>
 80035c4:	6822      	ldr	r2, [r4, #0]
 80035c6:	6913      	ldr	r3, [r2, #16]
 80035c8:	4303      	orrs	r3, r0
 80035ca:	6113      	str	r3, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80035cc:	6822      	ldr	r2, [r4, #0]
 80035ce:	6813      	ldr	r3, [r2, #0]
 80035d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035d4:	6013      	str	r3, [r2, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 80035d6:	6823      	ldr	r3, [r4, #0]
 80035d8:	695a      	ldr	r2, [r3, #20]
 80035da:	f412 2fe0 	tst.w	r2, #458752	@ 0x70000
 80035de:	d114      	bne.n	800360a <HAL_SAI_Transmit_DMA+0xc2>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 80035e0:	f7fd fda0 	bl	8001124 <HAL_GetTick>
 80035e4:	1b43      	subs	r3, r0, r5
 80035e6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80035ea:	d9f4      	bls.n	80035d6 <HAL_SAI_Transmit_DMA+0x8e>
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80035ec:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80035f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80035f4:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        __HAL_UNLOCK(hsai);
 80035f8:	2300      	movs	r3, #0
 80035fa:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
        return HAL_TIMEOUT;
 80035fe:	2603      	movs	r6, #3
 8003600:	e011      	b.n	8003626 <HAL_SAI_Transmit_DMA+0xde>
      __HAL_UNLOCK(hsai);
 8003602:	2300      	movs	r3, #0
 8003604:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
      return  HAL_ERROR;
 8003608:	e00d      	b.n	8003626 <HAL_SAI_Transmit_DMA+0xde>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 8003610:	d103      	bne.n	800361a <HAL_SAI_Transmit_DMA+0xd2>
      __HAL_SAI_ENABLE(hsai);
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003618:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 800361a:	2300      	movs	r3, #0
 800361c:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 8003620:	463e      	mov	r6, r7
 8003622:	e000      	b.n	8003626 <HAL_SAI_Transmit_DMA+0xde>
    return  HAL_ERROR;
 8003624:	2601      	movs	r6, #1
}
 8003626:	4630      	mov	r0, r6
 8003628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800362c:	2602      	movs	r6, #2
 800362e:	e7fa      	b.n	8003626 <HAL_SAI_Transmit_DMA+0xde>
    __HAL_LOCK(hsai);
 8003630:	2602      	movs	r6, #2
 8003632:	e7f8      	b.n	8003626 <HAL_SAI_Transmit_DMA+0xde>
 8003634:	0800373f 	.word	0x0800373f
 8003638:	08003703 	.word	0x08003703
 800363c:	0800378f 	.word	0x0800378f

08003640 <HAL_SAI_Receive_DMA>:
{
 8003640:	b570      	push	{r4, r5, r6, lr}
  if ((pData == NULL) || (Size == 0))
 8003642:	2900      	cmp	r1, #0
 8003644:	d04e      	beq.n	80036e4 <HAL_SAI_Receive_DMA+0xa4>
 8003646:	4604      	mov	r4, r0
 8003648:	460b      	mov	r3, r1
 800364a:	2a00      	cmp	r2, #0
 800364c:	d04a      	beq.n	80036e4 <HAL_SAI_Receive_DMA+0xa4>
  if (hsai->State == HAL_SAI_STATE_READY)
 800364e:	f890 507d 	ldrb.w	r5, [r0, #125]	@ 0x7d
 8003652:	b2ed      	uxtb	r5, r5
 8003654:	2d01      	cmp	r5, #1
 8003656:	d148      	bne.n	80036ea <HAL_SAI_Receive_DMA+0xaa>
    __HAL_LOCK(hsai);
 8003658:	f890 107c 	ldrb.w	r1, [r0, #124]	@ 0x7c
 800365c:	2901      	cmp	r1, #1
 800365e:	d046      	beq.n	80036ee <HAL_SAI_Receive_DMA+0xae>
 8003660:	2101      	movs	r1, #1
 8003662:	f880 107c 	strb.w	r1, [r0, #124]	@ 0x7c
    hsai->pBuffPtr = pData;
 8003666:	6643      	str	r3, [r0, #100]	@ 0x64
    hsai->XferSize = Size;
 8003668:	f8a0 2068 	strh.w	r2, [r0, #104]	@ 0x68
    hsai->XferCount = Size;
 800366c:	f8a0 206a 	strh.w	r2, [r0, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8003670:	2300      	movs	r3, #0
 8003672:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8003676:	2222      	movs	r2, #34	@ 0x22
 8003678:	f880 207d 	strb.w	r2, [r0, #125]	@ 0x7d
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800367c:	6f02      	ldr	r2, [r0, #112]	@ 0x70
 800367e:	491d      	ldr	r1, [pc, #116]	@ (80036f4 <HAL_SAI_Receive_DMA+0xb4>)
 8003680:	6411      	str	r1, [r2, #64]	@ 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8003682:	6f02      	ldr	r2, [r0, #112]	@ 0x70
 8003684:	491c      	ldr	r1, [pc, #112]	@ (80036f8 <HAL_SAI_Receive_DMA+0xb8>)
 8003686:	63d1      	str	r1, [r2, #60]	@ 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8003688:	6f02      	ldr	r2, [r0, #112]	@ 0x70
 800368a:	491c      	ldr	r1, [pc, #112]	@ (80036fc <HAL_SAI_Receive_DMA+0xbc>)
 800368c:	64d1      	str	r1, [r2, #76]	@ 0x4c
    hsai->hdmarx->XferAbortCallback = NULL;
 800368e:	6f02      	ldr	r2, [r0, #112]	@ 0x70
 8003690:	6513      	str	r3, [r2, #80]	@ 0x50
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8003692:	6801      	ldr	r1, [r0, #0]
 8003694:	f8b0 3068 	ldrh.w	r3, [r0, #104]	@ 0x68
 8003698:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 800369a:	311c      	adds	r1, #28
 800369c:	6f00      	ldr	r0, [r0, #112]	@ 0x70
 800369e:	f7fe f93d 	bl	800191c <HAL_DMA_Start_IT>
 80036a2:	4606      	mov	r6, r0
 80036a4:	b118      	cbz	r0, 80036ae <HAL_SAI_Receive_DMA+0x6e>
      __HAL_UNLOCK(hsai);
 80036a6:	2300      	movs	r3, #0
 80036a8:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
      return  HAL_ERROR;
 80036ac:	e01b      	b.n	80036e6 <HAL_SAI_Receive_DMA+0xa6>
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80036ae:	2100      	movs	r1, #0
 80036b0:	4620      	mov	r0, r4
 80036b2:	f7ff fd79 	bl	80031a8 <SAI_InterruptFlag>
 80036b6:	6822      	ldr	r2, [r4, #0]
 80036b8:	6913      	ldr	r3, [r2, #16]
 80036ba:	4303      	orrs	r3, r0
 80036bc:	6113      	str	r3, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80036be:	6822      	ldr	r2, [r4, #0]
 80036c0:	6813      	ldr	r3, [r2, #0]
 80036c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036c6:	6013      	str	r3, [r2, #0]
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 80036c8:	6823      	ldr	r3, [r4, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 80036d0:	d103      	bne.n	80036da <HAL_SAI_Receive_DMA+0x9a>
      __HAL_SAI_ENABLE(hsai);
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80036d8:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 80036da:	2300      	movs	r3, #0
 80036dc:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 80036e0:	4635      	mov	r5, r6
 80036e2:	e000      	b.n	80036e6 <HAL_SAI_Receive_DMA+0xa6>
    return  HAL_ERROR;
 80036e4:	2501      	movs	r5, #1
}
 80036e6:	4628      	mov	r0, r5
 80036e8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 80036ea:	2502      	movs	r5, #2
 80036ec:	e7fb      	b.n	80036e6 <HAL_SAI_Receive_DMA+0xa6>
    __HAL_LOCK(hsai);
 80036ee:	2502      	movs	r5, #2
 80036f0:	e7f9      	b.n	80036e6 <HAL_SAI_Receive_DMA+0xa6>
 80036f2:	bf00      	nop
 80036f4:	08003783 	.word	0x08003783
 80036f8:	08003749 	.word	0x08003749
 80036fc:	0800378f 	.word	0x0800378f

08003700 <HAL_SAI_TxCpltCallback>:
}
 8003700:	4770      	bx	lr

08003702 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8003702:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003704:	6b84      	ldr	r4, [r0, #56]	@ 0x38

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003706:	69c3      	ldr	r3, [r0, #28]
 8003708:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800370c:	d012      	beq.n	8003734 <SAI_DMATxCplt+0x32>
  {
    hsai->XferCount = 0;
 800370e:	2100      	movs	r1, #0
 8003710:	f8a4 106a 	strh.w	r1, [r4, #106]	@ 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8003714:	6822      	ldr	r2, [r4, #0]
 8003716:	6813      	ldr	r3, [r2, #0]
 8003718:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800371c:	6013      	str	r3, [r2, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800371e:	4620      	mov	r0, r4
 8003720:	f7ff fd42 	bl	80031a8 <SAI_InterruptFlag>
 8003724:	6822      	ldr	r2, [r4, #0]
 8003726:	6913      	ldr	r3, [r2, #16]
 8003728:	ea23 0300 	bic.w	r3, r3, r0
 800372c:	6113      	str	r3, [r2, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800372e:	2301      	movs	r3, #1
 8003730:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8003734:	4620      	mov	r0, r4
 8003736:	f7ff ffe3 	bl	8003700 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800373a:	bd10      	pop	{r4, pc}

0800373c <HAL_SAI_TxHalfCpltCallback>:
}
 800373c:	4770      	bx	lr

0800373e <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800373e:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8003740:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8003742:	f7ff fffb 	bl	800373c <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8003746:	bd08      	pop	{r3, pc}

08003748 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8003748:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800374a:	6b84      	ldr	r4, [r0, #56]	@ 0x38

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800374c:	69c3      	ldr	r3, [r0, #28]
 800374e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003752:	d012      	beq.n	800377a <SAI_DMARxCplt+0x32>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8003754:	6822      	ldr	r2, [r4, #0]
 8003756:	6813      	ldr	r3, [r2, #0]
 8003758:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800375c:	6013      	str	r3, [r2, #0]
    hsai->XferCount = 0;
 800375e:	2100      	movs	r1, #0
 8003760:	f8a4 106a 	strh.w	r1, [r4, #106]	@ 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8003764:	4620      	mov	r0, r4
 8003766:	f7ff fd1f 	bl	80031a8 <SAI_InterruptFlag>
 800376a:	6822      	ldr	r2, [r4, #0]
 800376c:	6913      	ldr	r3, [r2, #16]
 800376e:	ea23 0300 	bic.w	r3, r3, r0
 8003772:	6113      	str	r3, [r2, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8003774:	2301      	movs	r3, #1
 8003776:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800377a:	4620      	mov	r0, r4
 800377c:	f7fd fa5e 	bl	8000c3c <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8003780:	bd10      	pop	{r4, pc}

08003782 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003782:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8003784:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8003786:	f7fd fa53 	bl	8000c30 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800378a:	bd08      	pop	{r3, pc}

0800378c <HAL_SAI_ErrorCallback>:
}
 800378c:	4770      	bx	lr

0800378e <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800378e:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003790:	6b84      	ldr	r4, [r0, #56]	@ 0x38

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8003792:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8003796:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800379a:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800379e:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80037a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d007      	beq.n	80037b6 <SAI_DMAError+0x28>
 80037a6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80037a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d003      	beq.n	80037b6 <SAI_DMAError+0x28>
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 80037ae:	4620      	mov	r0, r4
 80037b0:	f7ff ffec 	bl	800378c <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80037b4:	bd10      	pop	{r4, pc}
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80037b6:	6822      	ldr	r2, [r4, #0]
 80037b8:	6813      	ldr	r3, [r2, #0]
 80037ba:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80037be:	6013      	str	r3, [r2, #0]
    SAI_Disable(hsai);
 80037c0:	4620      	mov	r0, r4
 80037c2:	f7ff fd09 	bl	80031d8 <SAI_Disable>
    hsai->State = HAL_SAI_STATE_READY;
 80037c6:	2301      	movs	r3, #1
 80037c8:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
    hsai->XferCount = 0U;
 80037cc:	2300      	movs	r3, #0
 80037ce:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
 80037d2:	e7ec      	b.n	80037ae <SAI_DMAError+0x20>

080037d4 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037d4:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d145      	bne.n	800386a <HAL_TIM_Base_Start_IT+0x96>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037de:	2302      	movs	r3, #2
 80037e0:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037e4:	6802      	ldr	r2, [r0, #0]
 80037e6:	68d3      	ldr	r3, [r2, #12]
 80037e8:	f043 0301 	orr.w	r3, r3, #1
 80037ec:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037ee:	6802      	ldr	r2, [r0, #0]
 80037f0:	4b20      	ldr	r3, [pc, #128]	@ (8003874 <HAL_TIM_Base_Start_IT+0xa0>)
 80037f2:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80037f6:	bf18      	it	ne
 80037f8:	429a      	cmpne	r2, r3
 80037fa:	bf0c      	ite	eq
 80037fc:	2301      	moveq	r3, #1
 80037fe:	2300      	movne	r3, #0
 8003800:	491d      	ldr	r1, [pc, #116]	@ (8003878 <HAL_TIM_Base_Start_IT+0xa4>)
 8003802:	428a      	cmp	r2, r1
 8003804:	bf08      	it	eq
 8003806:	f043 0301 	orreq.w	r3, r3, #1
 800380a:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800380e:	428a      	cmp	r2, r1
 8003810:	bf08      	it	eq
 8003812:	f043 0301 	orreq.w	r3, r3, #1
 8003816:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800381a:	428a      	cmp	r2, r1
 800381c:	bf08      	it	eq
 800381e:	f043 0301 	orreq.w	r3, r3, #1
 8003822:	f501 4178 	add.w	r1, r1, #63488	@ 0xf800
 8003826:	428a      	cmp	r2, r1
 8003828:	bf08      	it	eq
 800382a:	f043 0301 	orreq.w	r3, r3, #1
 800382e:	f501 5170 	add.w	r1, r1, #15360	@ 0x3c00
 8003832:	428a      	cmp	r2, r1
 8003834:	bf08      	it	eq
 8003836:	f043 0301 	orreq.w	r3, r3, #1
 800383a:	b913      	cbnz	r3, 8003842 <HAL_TIM_Base_Start_IT+0x6e>
 800383c:	4b0f      	ldr	r3, [pc, #60]	@ (800387c <HAL_TIM_Base_Start_IT+0xa8>)
 800383e:	429a      	cmp	r2, r3
 8003840:	d10d      	bne.n	800385e <HAL_TIM_Base_Start_IT+0x8a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003842:	6891      	ldr	r1, [r2, #8]
 8003844:	4b0e      	ldr	r3, [pc, #56]	@ (8003880 <HAL_TIM_Base_Start_IT+0xac>)
 8003846:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003848:	2b06      	cmp	r3, #6
 800384a:	d010      	beq.n	800386e <HAL_TIM_Base_Start_IT+0x9a>
 800384c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003850:	d00d      	beq.n	800386e <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8003852:	6813      	ldr	r3, [r2, #0]
 8003854:	f043 0301 	orr.w	r3, r3, #1
 8003858:	6013      	str	r3, [r2, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800385a:	2000      	movs	r0, #0
 800385c:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 800385e:	6813      	ldr	r3, [r2, #0]
 8003860:	f043 0301 	orr.w	r3, r3, #1
 8003864:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8003866:	2000      	movs	r0, #0
 8003868:	4770      	bx	lr
    return HAL_ERROR;
 800386a:	2001      	movs	r0, #1
 800386c:	4770      	bx	lr
  return HAL_OK;
 800386e:	2000      	movs	r0, #0
}
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	40010000 	.word	0x40010000
 8003878:	40000400 	.word	0x40000400
 800387c:	40001800 	.word	0x40001800
 8003880:	00010007 	.word	0x00010007

08003884 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003884:	b410      	push	{r4}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003886:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003888:	4a34      	ldr	r2, [pc, #208]	@ (800395c <TIM_Base_SetConfig+0xd8>)
 800388a:	4290      	cmp	r0, r2
 800388c:	bf14      	ite	ne
 800388e:	2200      	movne	r2, #0
 8003890:	2201      	moveq	r2, #1
 8003892:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003896:	d044      	beq.n	8003922 <TIM_Base_SetConfig+0x9e>
 8003898:	2a00      	cmp	r2, #0
 800389a:	d142      	bne.n	8003922 <TIM_Base_SetConfig+0x9e>
 800389c:	4c30      	ldr	r4, [pc, #192]	@ (8003960 <TIM_Base_SetConfig+0xdc>)
 800389e:	42a0      	cmp	r0, r4
 80038a0:	d00b      	beq.n	80038ba <TIM_Base_SetConfig+0x36>
 80038a2:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80038a6:	42a0      	cmp	r0, r4
 80038a8:	d007      	beq.n	80038ba <TIM_Base_SetConfig+0x36>
 80038aa:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80038ae:	42a0      	cmp	r0, r4
 80038b0:	d003      	beq.n	80038ba <TIM_Base_SetConfig+0x36>
 80038b2:	f504 4478 	add.w	r4, r4, #63488	@ 0xf800
 80038b6:	42a0      	cmp	r0, r4
 80038b8:	d10a      	bne.n	80038d0 <TIM_Base_SetConfig+0x4c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80038be:	684c      	ldr	r4, [r1, #4]
 80038c0:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038c2:	4c27      	ldr	r4, [pc, #156]	@ (8003960 <TIM_Base_SetConfig+0xdc>)
 80038c4:	42a0      	cmp	r0, r4
 80038c6:	d030      	beq.n	800392a <TIM_Base_SetConfig+0xa6>
 80038c8:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80038cc:	42a0      	cmp	r0, r4
 80038ce:	d02c      	beq.n	800392a <TIM_Base_SetConfig+0xa6>
 80038d0:	4c24      	ldr	r4, [pc, #144]	@ (8003964 <TIM_Base_SetConfig+0xe0>)
 80038d2:	42a0      	cmp	r0, r4
 80038d4:	d029      	beq.n	800392a <TIM_Base_SetConfig+0xa6>
 80038d6:	f504 4478 	add.w	r4, r4, #63488	@ 0xf800
 80038da:	42a0      	cmp	r0, r4
 80038dc:	d025      	beq.n	800392a <TIM_Base_SetConfig+0xa6>
 80038de:	f504 5470 	add.w	r4, r4, #15360	@ 0x3c00
 80038e2:	42a0      	cmp	r0, r4
 80038e4:	d021      	beq.n	800392a <TIM_Base_SetConfig+0xa6>
 80038e6:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80038ea:	42a0      	cmp	r0, r4
 80038ec:	d01d      	beq.n	800392a <TIM_Base_SetConfig+0xa6>
 80038ee:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80038f2:	42a0      	cmp	r0, r4
 80038f4:	d019      	beq.n	800392a <TIM_Base_SetConfig+0xa6>
 80038f6:	f5a4 3498 	sub.w	r4, r4, #77824	@ 0x13000
 80038fa:	42a0      	cmp	r0, r4
 80038fc:	d015      	beq.n	800392a <TIM_Base_SetConfig+0xa6>
 80038fe:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003902:	42a0      	cmp	r0, r4
 8003904:	d011      	beq.n	800392a <TIM_Base_SetConfig+0xa6>
 8003906:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800390a:	42a0      	cmp	r0, r4
 800390c:	d00d      	beq.n	800392a <TIM_Base_SetConfig+0xa6>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800390e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003912:	694a      	ldr	r2, [r1, #20]
 8003914:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8003916:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003918:	688b      	ldr	r3, [r1, #8]
 800391a:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800391c:	680b      	ldr	r3, [r1, #0]
 800391e:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003920:	e016      	b.n	8003950 <TIM_Base_SetConfig+0xcc>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003922:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003926:	684c      	ldr	r4, [r1, #4]
 8003928:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 800392a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800392e:	68cc      	ldr	r4, [r1, #12]
 8003930:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003932:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003936:	694c      	ldr	r4, [r1, #20]
 8003938:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 800393a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800393c:	688b      	ldr	r3, [r1, #8]
 800393e:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003940:	680b      	ldr	r3, [r1, #0]
 8003942:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003944:	4b08      	ldr	r3, [pc, #32]	@ (8003968 <TIM_Base_SetConfig+0xe4>)
 8003946:	4298      	cmp	r0, r3
 8003948:	d000      	beq.n	800394c <TIM_Base_SetConfig+0xc8>
 800394a:	b10a      	cbz	r2, 8003950 <TIM_Base_SetConfig+0xcc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800394c:	690b      	ldr	r3, [r1, #16]
 800394e:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003950:	2301      	movs	r3, #1
 8003952:	6143      	str	r3, [r0, #20]
}
 8003954:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	40010000 	.word	0x40010000
 8003960:	40000400 	.word	0x40000400
 8003964:	40000c00 	.word	0x40000c00
 8003968:	40010400 	.word	0x40010400

0800396c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800396c:	b360      	cbz	r0, 80039c8 <HAL_TIM_Base_Init+0x5c>
{
 800396e:	b510      	push	{r4, lr}
 8003970:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003972:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003976:	b313      	cbz	r3, 80039be <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8003978:	2302      	movs	r3, #2
 800397a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800397e:	4621      	mov	r1, r4
 8003980:	f851 0b04 	ldr.w	r0, [r1], #4
 8003984:	f7ff ff7e 	bl	8003884 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003988:	2301      	movs	r3, #1
 800398a:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800398e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8003992:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003996:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800399a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800399e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80039a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039a6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80039aa:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80039ae:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 80039b2:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 80039b6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80039ba:	2000      	movs	r0, #0
}
 80039bc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80039be:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80039c2:	f7fd fb27 	bl	8001014 <HAL_TIM_Base_MspInit>
 80039c6:	e7d7      	b.n	8003978 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80039c8:	2001      	movs	r0, #1
}
 80039ca:	4770      	bx	lr

080039cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039cc:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039ce:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039d0:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039d4:	430a      	orrs	r2, r1
 80039d6:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80039da:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039de:	6082      	str	r2, [r0, #8]
}
 80039e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80039e4:	4770      	bx	lr
	...

080039e8 <HAL_TIM_ConfigClockSource>:
{
 80039e8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80039ea:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	f000 80ab 	beq.w	8003b4a <HAL_TIM_ConfigClockSource+0x162>
 80039f4:	4604      	mov	r4, r0
 80039f6:	2301      	movs	r3, #1
 80039f8:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80039fc:	2302      	movs	r3, #2
 80039fe:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003a02:	6802      	ldr	r2, [r0, #0]
 8003a04:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a06:	4b52      	ldr	r3, [pc, #328]	@ (8003b50 <HAL_TIM_ConfigClockSource+0x168>)
 8003a08:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8003a0a:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8003a0c:	680b      	ldr	r3, [r1, #0]
 8003a0e:	2b60      	cmp	r3, #96	@ 0x60
 8003a10:	d060      	beq.n	8003ad4 <HAL_TIM_ConfigClockSource+0xec>
 8003a12:	d83d      	bhi.n	8003a90 <HAL_TIM_ConfigClockSource+0xa8>
 8003a14:	2b40      	cmp	r3, #64	@ 0x40
 8003a16:	d079      	beq.n	8003b0c <HAL_TIM_ConfigClockSource+0x124>
 8003a18:	d91c      	bls.n	8003a54 <HAL_TIM_ConfigClockSource+0x6c>
 8003a1a:	2b50      	cmp	r3, #80	@ 0x50
 8003a1c:	d136      	bne.n	8003a8c <HAL_TIM_ConfigClockSource+0xa4>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a1e:	6823      	ldr	r3, [r4, #0]
 8003a20:	6848      	ldr	r0, [r1, #4]
 8003a22:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8003a24:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a26:	6a1a      	ldr	r2, [r3, #32]
 8003a28:	f022 0201 	bic.w	r2, r2, #1
 8003a2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a2e:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a30:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a34:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a38:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8003a3c:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8003a3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a40:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a42:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8003a44:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a4a:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8003a4e:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003a50:	2000      	movs	r0, #0
}
 8003a52:	e012      	b.n	8003a7a <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8003a54:	2b20      	cmp	r3, #32
 8003a56:	d002      	beq.n	8003a5e <HAL_TIM_ConfigClockSource+0x76>
 8003a58:	d90b      	bls.n	8003a72 <HAL_TIM_ConfigClockSource+0x8a>
 8003a5a:	2b30      	cmp	r3, #48	@ 0x30
 8003a5c:	d114      	bne.n	8003a88 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a5e:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8003a60:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a62:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a66:	4313      	orrs	r3, r2
 8003a68:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8003a6c:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003a6e:	2000      	movs	r0, #0
}
 8003a70:	e003      	b.n	8003a7a <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8003a72:	f033 0210 	bics.w	r2, r3, #16
 8003a76:	d0f2      	beq.n	8003a5e <HAL_TIM_ConfigClockSource+0x76>
 8003a78:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8003a80:	2300      	movs	r3, #0
 8003a82:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8003a86:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8003a88:	2001      	movs	r0, #1
 8003a8a:	e7f6      	b.n	8003a7a <HAL_TIM_ConfigClockSource+0x92>
 8003a8c:	2001      	movs	r0, #1
 8003a8e:	e7f4      	b.n	8003a7a <HAL_TIM_ConfigClockSource+0x92>
 8003a90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a94:	d055      	beq.n	8003b42 <HAL_TIM_ConfigClockSource+0x15a>
 8003a96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a9a:	d10c      	bne.n	8003ab6 <HAL_TIM_ConfigClockSource+0xce>
      TIM_ETR_SetConfig(htim->Instance,
 8003a9c:	68cb      	ldr	r3, [r1, #12]
 8003a9e:	684a      	ldr	r2, [r1, #4]
 8003aa0:	6889      	ldr	r1, [r1, #8]
 8003aa2:	6820      	ldr	r0, [r4, #0]
 8003aa4:	f7ff ff92 	bl	80039cc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003aa8:	6822      	ldr	r2, [r4, #0]
 8003aaa:	6893      	ldr	r3, [r2, #8]
 8003aac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ab0:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003ab2:	2000      	movs	r0, #0
      break;
 8003ab4:	e7e1      	b.n	8003a7a <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8003ab6:	2b70      	cmp	r3, #112	@ 0x70
 8003ab8:	d145      	bne.n	8003b46 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8003aba:	68cb      	ldr	r3, [r1, #12]
 8003abc:	684a      	ldr	r2, [r1, #4]
 8003abe:	6889      	ldr	r1, [r1, #8]
 8003ac0:	6820      	ldr	r0, [r4, #0]
 8003ac2:	f7ff ff83 	bl	80039cc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003ac6:	6822      	ldr	r2, [r4, #0]
 8003ac8:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003aca:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003ace:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003ad0:	2000      	movs	r0, #0
      break;
 8003ad2:	e7d2      	b.n	8003a7a <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ad4:	6823      	ldr	r3, [r4, #0]
 8003ad6:	6848      	ldr	r0, [r1, #4]
 8003ad8:	68cd      	ldr	r5, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ada:	6a1a      	ldr	r2, [r3, #32]
 8003adc:	f022 0210 	bic.w	r2, r2, #16
 8003ae0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ae2:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8003ae4:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ae6:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003aea:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003aee:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003af2:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8003af6:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8003af8:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003afa:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8003afc:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003afe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b02:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8003b06:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003b08:	2000      	movs	r0, #0
}
 8003b0a:	e7b6      	b.n	8003a7a <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b0c:	6823      	ldr	r3, [r4, #0]
 8003b0e:	6848      	ldr	r0, [r1, #4]
 8003b10:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8003b12:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b14:	6a1a      	ldr	r2, [r3, #32]
 8003b16:	f022 0201 	bic.w	r2, r2, #1
 8003b1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b1c:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b1e:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b22:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b26:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8003b2a:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8003b2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b2e:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b30:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8003b32:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b38:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8003b3c:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003b3e:	2000      	movs	r0, #0
}
 8003b40:	e79b      	b.n	8003a7a <HAL_TIM_ConfigClockSource+0x92>
  HAL_StatusTypeDef status = HAL_OK;
 8003b42:	2000      	movs	r0, #0
 8003b44:	e799      	b.n	8003a7a <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8003b46:	2001      	movs	r0, #1
 8003b48:	e797      	b.n	8003a7a <HAL_TIM_ConfigClockSource+0x92>
  __HAL_LOCK(htim);
 8003b4a:	2002      	movs	r0, #2
 8003b4c:	e79b      	b.n	8003a86 <HAL_TIM_ConfigClockSource+0x9e>
 8003b4e:	bf00      	nop
 8003b50:	fffe0088 	.word	0xfffe0088

08003b54 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b54:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d051      	beq.n	8003c00 <HAL_TIMEx_MasterConfigSynchronization+0xac>
{
 8003b5c:	b430      	push	{r4, r5}
 8003b5e:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8003b60:	2301      	movs	r3, #1
 8003b62:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b66:	2302      	movs	r3, #2
 8003b68:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b6c:	6800      	ldr	r0, [r0, #0]
 8003b6e:	6843      	ldr	r3, [r0, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b70:	6884      	ldr	r4, [r0, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b72:	4d24      	ldr	r5, [pc, #144]	@ (8003c04 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003b74:	42a8      	cmp	r0, r5
 8003b76:	d003      	beq.n	8003b80 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
 8003b78:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003b7c:	42a8      	cmp	r0, r5
 8003b7e:	d103      	bne.n	8003b88 <HAL_TIMEx_MasterConfigSynchronization+0x34>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003b80:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003b84:	684d      	ldr	r5, [r1, #4]
 8003b86:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b8c:	680d      	ldr	r5, [r1, #0]
 8003b8e:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b90:	6043      	str	r3, [r0, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b92:	6810      	ldr	r0, [r2, #0]
 8003b94:	4b1b      	ldr	r3, [pc, #108]	@ (8003c04 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003b96:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003b9a:	bf18      	it	ne
 8003b9c:	4298      	cmpne	r0, r3
 8003b9e:	bf0c      	ite	eq
 8003ba0:	2301      	moveq	r3, #1
 8003ba2:	2300      	movne	r3, #0
 8003ba4:	4d18      	ldr	r5, [pc, #96]	@ (8003c08 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003ba6:	42a8      	cmp	r0, r5
 8003ba8:	bf08      	it	eq
 8003baa:	f043 0301 	orreq.w	r3, r3, #1
 8003bae:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003bb2:	42a8      	cmp	r0, r5
 8003bb4:	bf08      	it	eq
 8003bb6:	f043 0301 	orreq.w	r3, r3, #1
 8003bba:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003bbe:	42a8      	cmp	r0, r5
 8003bc0:	bf08      	it	eq
 8003bc2:	f043 0301 	orreq.w	r3, r3, #1
 8003bc6:	f505 4578 	add.w	r5, r5, #63488	@ 0xf800
 8003bca:	42a8      	cmp	r0, r5
 8003bcc:	bf08      	it	eq
 8003bce:	f043 0301 	orreq.w	r3, r3, #1
 8003bd2:	f505 5570 	add.w	r5, r5, #15360	@ 0x3c00
 8003bd6:	42a8      	cmp	r0, r5
 8003bd8:	bf08      	it	eq
 8003bda:	f043 0301 	orreq.w	r3, r3, #1
 8003bde:	b913      	cbnz	r3, 8003be6 <HAL_TIMEx_MasterConfigSynchronization+0x92>
 8003be0:	4b0a      	ldr	r3, [pc, #40]	@ (8003c0c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003be2:	4298      	cmp	r0, r3
 8003be4:	d104      	bne.n	8003bf0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003be6:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bea:	688b      	ldr	r3, [r1, #8]
 8003bec:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bee:	6084      	str	r4, [r0, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003bf6:	2000      	movs	r0, #0
 8003bf8:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
}
 8003bfc:	bc30      	pop	{r4, r5}
 8003bfe:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003c00:	2002      	movs	r0, #2
}
 8003c02:	4770      	bx	lr
 8003c04:	40010000 	.word	0x40010000
 8003c08:	40000400 	.word	0x40000400
 8003c0c:	40001800 	.word	0x40001800

08003c10 <memset>:
 8003c10:	4402      	add	r2, r0
 8003c12:	4603      	mov	r3, r0
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d100      	bne.n	8003c1a <memset+0xa>
 8003c18:	4770      	bx	lr
 8003c1a:	f803 1b01 	strb.w	r1, [r3], #1
 8003c1e:	e7f9      	b.n	8003c14 <memset+0x4>

08003c20 <__libc_init_array>:
 8003c20:	b570      	push	{r4, r5, r6, lr}
 8003c22:	4d0d      	ldr	r5, [pc, #52]	@ (8003c58 <__libc_init_array+0x38>)
 8003c24:	4c0d      	ldr	r4, [pc, #52]	@ (8003c5c <__libc_init_array+0x3c>)
 8003c26:	1b64      	subs	r4, r4, r5
 8003c28:	10a4      	asrs	r4, r4, #2
 8003c2a:	2600      	movs	r6, #0
 8003c2c:	42a6      	cmp	r6, r4
 8003c2e:	d109      	bne.n	8003c44 <__libc_init_array+0x24>
 8003c30:	4d0b      	ldr	r5, [pc, #44]	@ (8003c60 <__libc_init_array+0x40>)
 8003c32:	4c0c      	ldr	r4, [pc, #48]	@ (8003c64 <__libc_init_array+0x44>)
 8003c34:	f000 f818 	bl	8003c68 <_init>
 8003c38:	1b64      	subs	r4, r4, r5
 8003c3a:	10a4      	asrs	r4, r4, #2
 8003c3c:	2600      	movs	r6, #0
 8003c3e:	42a6      	cmp	r6, r4
 8003c40:	d105      	bne.n	8003c4e <__libc_init_array+0x2e>
 8003c42:	bd70      	pop	{r4, r5, r6, pc}
 8003c44:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c48:	4798      	blx	r3
 8003c4a:	3601      	adds	r6, #1
 8003c4c:	e7ee      	b.n	8003c2c <__libc_init_array+0xc>
 8003c4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c52:	4798      	blx	r3
 8003c54:	3601      	adds	r6, #1
 8003c56:	e7f2      	b.n	8003c3e <__libc_init_array+0x1e>
 8003c58:	08003ca0 	.word	0x08003ca0
 8003c5c:	08003ca0 	.word	0x08003ca0
 8003c60:	08003ca0 	.word	0x08003ca0
 8003c64:	08003ca4 	.word	0x08003ca4

08003c68 <_init>:
 8003c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c6a:	bf00      	nop
 8003c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c6e:	bc08      	pop	{r3}
 8003c70:	469e      	mov	lr, r3
 8003c72:	4770      	bx	lr

08003c74 <_fini>:
 8003c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c76:	bf00      	nop
 8003c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c7a:	bc08      	pop	{r3}
 8003c7c:	469e      	mov	lr, r3
 8003c7e:	4770      	bx	lr
